
lab4_none_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df30  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001eb8  0800e0e0  0800e0e0  0000f0e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff98  0800ff98  00011340  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff98  0800ff98  00010f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ffa0  0800ffa0  00011340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffa0  0800ffa0  00010fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ffa4  0800ffa4  00010fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000340  20000000  0800ffa8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011340  2**0
                  CONTENTS
 10 .bss          00001fec  20000340  20000340  00011340  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  2000232c  2000232c  00011340  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011340  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019870  00000000  00000000  00011370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048d0  00000000  00000000  0002abe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  0002f4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011b7  00000000  00000000  00030c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029a2b  00000000  00000000  00031e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001defe  00000000  00000000  0005b832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4e42  00000000  00000000  00079730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015e572  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000071f8  00000000  00000000  0015e5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001657b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000340 	.word	0x20000340
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e0c8 	.word	0x0800e0c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000344 	.word	0x20000344
 80001ec:	0800e0c8 	.word	0x0800e0c8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <DrawArrows>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Hàm vẽ mũi tên trên màn hình LCD
void DrawArrows(float pitch, float roll) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ec2:	edc7 0a00 	vstr	s1, [r7]
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eca:	f001 fa9f 	bl	800240c <BSP_LCD_Clear>

    // Kiểm tra hướng nghiêng
    if (pitch > THRESHOLD) {
 8000ece:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ed2:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000f54 <DrawArrows+0x9c>
 8000ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ede:	dd06      	ble.n	8000eee <DrawArrows+0x36>
        BSP_LCD_DisplayStringAt(120, 50, "▲", CENTER_MODE); // Nghiêng trước
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8000f58 <DrawArrows+0xa0>)
 8000ee4:	2132      	movs	r1, #50	@ 0x32
 8000ee6:	2078      	movs	r0, #120	@ 0x78
 8000ee8:	f001 fafc 	bl	80024e4 <BSP_LCD_DisplayStringAt>
 8000eec:	e00e      	b.n	8000f0c <DrawArrows+0x54>
    } else if (pitch < -THRESHOLD) {
 8000eee:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ef2:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000f5c <DrawArrows+0xa4>
 8000ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efe:	d505      	bpl.n	8000f0c <DrawArrows+0x54>
    	BSP_LCD_DisplayStringAt(120, 190, "▼", CENTER_MODE); // Nghiêng sau
 8000f00:	2301      	movs	r3, #1
 8000f02:	4a17      	ldr	r2, [pc, #92]	@ (8000f60 <DrawArrows+0xa8>)
 8000f04:	21be      	movs	r1, #190	@ 0xbe
 8000f06:	2078      	movs	r0, #120	@ 0x78
 8000f08:	f001 faec 	bl	80024e4 <BSP_LCD_DisplayStringAt>
    }

    if (roll > THRESHOLD) {
 8000f0c:	edd7 7a00 	vldr	s15, [r7]
 8000f10:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000f54 <DrawArrows+0x9c>
 8000f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	dd06      	ble.n	8000f2c <DrawArrows+0x74>
    	BSP_LCD_DisplayStringAt(190, 120, "►", CENTER_MODE); // Nghiêng phải
 8000f1e:	2301      	movs	r3, #1
 8000f20:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <DrawArrows+0xac>)
 8000f22:	2178      	movs	r1, #120	@ 0x78
 8000f24:	20be      	movs	r0, #190	@ 0xbe
 8000f26:	f001 fadd 	bl	80024e4 <BSP_LCD_DisplayStringAt>
    } else if (roll < -THRESHOLD) {
    	BSP_LCD_DisplayStringAt(50, 120, "◄", CENTER_MODE); // Nghiêng trái
    }

}
 8000f2a:	e00f      	b.n	8000f4c <DrawArrows+0x94>
    } else if (roll < -THRESHOLD) {
 8000f2c:	edd7 7a00 	vldr	s15, [r7]
 8000f30:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000f5c <DrawArrows+0xa4>
 8000f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3c:	d400      	bmi.n	8000f40 <DrawArrows+0x88>
}
 8000f3e:	e005      	b.n	8000f4c <DrawArrows+0x94>
    	BSP_LCD_DisplayStringAt(50, 120, "◄", CENTER_MODE); // Nghiêng trái
 8000f40:	2301      	movs	r3, #1
 8000f42:	4a09      	ldr	r2, [pc, #36]	@ (8000f68 <DrawArrows+0xb0>)
 8000f44:	2178      	movs	r1, #120	@ 0x78
 8000f46:	2032      	movs	r0, #50	@ 0x32
 8000f48:	f001 facc 	bl	80024e4 <BSP_LCD_DisplayStringAt>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	43480000 	.word	0x43480000
 8000f58:	0800e0e0 	.word	0x0800e0e0
 8000f5c:	c3480000 	.word	0xc3480000
 8000f60:	0800e0e4 	.word	0x0800e0e4
 8000f64:	0800e0e8 	.word	0x0800e0e8
 8000f68:	0800e0ec 	.word	0x0800e0ec

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f74:	f001 ff3c 	bl	8002df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f78:	f000 f85e 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7c:	f000 f8c6 	bl	800110c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000f80:	f009 fd3e 	bl	800aa00 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8000f84:	f001 f900 	bl	8002188 <BSP_LCD_Init>
  BSP_SDRAM_Init();
 8000f88:	f001 fd68 	bl	8002a5c <BSP_SDRAM_Init>
  BSP_GYRO_Init();
 8000f8c:	f001 f882 	bl	8002094 <BSP_GYRO_Init>

  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000f90:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000f94:	2001      	movs	r0, #1
 8000f96:	f001 f979 	bl	800228c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f001 f9da 	bl	8002354 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8000fa0:	f001 fb5e 	bl	8002660 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000fa4:	4820      	ldr	r0, [pc, #128]	@ (8001028 <main+0xbc>)
 8000fa6:	f001 fa31 	bl	800240c <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8000faa:	481f      	ldr	r0, [pc, #124]	@ (8001028 <main+0xbc>)
 8000fac:	f001 f9fa 	bl	80023a4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f001 f9de 	bl	8002374 <BSP_LCD_SetTextColor>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //đọc giá trị gyroscope
	BSP_GYRO_GetXYZ(dataRec);
 8000fb8:	481c      	ldr	r0, [pc, #112]	@ (800102c <main+0xc0>)
 8000fba:	f001 f8d1 	bl	8002160 <BSP_GYRO_GetXYZ>
	sprintf(buffer, "X: %.2f, Y: %.2f, Z: %.2f", dataRec[0], dataRec[1], dataRec[2]);
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <main+0xc0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fad0 	bl	8000568 <__aeabi_f2d>
 8000fc8:	4680      	mov	r8, r0
 8000fca:	4689      	mov	r9, r1
 8000fcc:	4b17      	ldr	r3, [pc, #92]	@ (800102c <main+0xc0>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fac9 	bl	8000568 <__aeabi_f2d>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	460d      	mov	r5, r1
 8000fda:	4b14      	ldr	r3, [pc, #80]	@ (800102c <main+0xc0>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fac2 	bl	8000568 <__aeabi_f2d>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000fec:	e9cd 4500 	strd	r4, r5, [sp]
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	464b      	mov	r3, r9
 8000ff4:	490e      	ldr	r1, [pc, #56]	@ (8001030 <main+0xc4>)
 8000ff6:	480f      	ldr	r0, [pc, #60]	@ (8001034 <main+0xc8>)
 8000ff8:	f00a ff38 	bl	800be6c <siprintf>
	CDC_Transmit_HS(buffer, sizeof(buffer));
 8000ffc:	2132      	movs	r1, #50	@ 0x32
 8000ffe:	480d      	ldr	r0, [pc, #52]	@ (8001034 <main+0xc8>)
 8001000:	f009 fdbc 	bl	800ab7c <CDC_Transmit_HS>

	// Hiển thị mũi tên tương ứng với hướng nghiêng
	DrawArrows(dataRec[1], dataRec[0]);
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <main+0xc0>)
 8001006:	edd3 7a01 	vldr	s15, [r3, #4]
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <main+0xc0>)
 800100c:	ed93 7a00 	vldr	s14, [r3]
 8001010:	eef0 0a47 	vmov.f32	s1, s14
 8001014:	eeb0 0a67 	vmov.f32	s0, s15
 8001018:	f7ff ff4e 	bl	8000eb8 <DrawArrows>

	HAL_Delay(100); // Đợi 100ms trước khi lặp lại
 800101c:	2064      	movs	r0, #100	@ 0x64
 800101e:	f001 ff59 	bl	8002ed4 <HAL_Delay>
	BSP_GYRO_GetXYZ(dataRec);
 8001022:	bf00      	nop
 8001024:	e7c8      	b.n	8000fb8 <main+0x4c>
 8001026:	bf00      	nop
 8001028:	ff0000ff 	.word	0xff0000ff
 800102c:	20000390 	.word	0x20000390
 8001030:	0800e0f0 	.word	0x0800e0f0
 8001034:	2000035c 	.word	0x2000035c

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b094      	sub	sp, #80	@ 0x50
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 0320 	add.w	r3, r7, #32
 8001042:	2230      	movs	r2, #48	@ 0x30
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f00a ff73 	bl	800bf32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <SystemClock_Config+0xcc>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	4a27      	ldr	r2, [pc, #156]	@ (8001104 <SystemClock_Config+0xcc>)
 8001066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106a:	6413      	str	r3, [r2, #64]	@ 0x40
 800106c:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <SystemClock_Config+0xcc>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <SystemClock_Config+0xd0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a21      	ldr	r2, [pc, #132]	@ (8001108 <SystemClock_Config+0xd0>)
 8001082:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <SystemClock_Config+0xd0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001094:	2301      	movs	r3, #1
 8001096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001098:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a8:	2308      	movs	r3, #8
 80010aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b2:	2302      	movs	r3, #2
 80010b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b6:	2307      	movs	r3, #7
 80010b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	4618      	mov	r0, r3
 80010c0:	f004 fb84 	bl	80057cc <HAL_RCC_OscConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010ca:	f000 f855 	bl	8001178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ce:	230f      	movs	r3, #15
 80010d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d2:	2302      	movs	r3, #2
 80010d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80010e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	2105      	movs	r1, #5
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 fde5 	bl	8005cbc <HAL_RCC_ClockConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010f8:	f000 f83e 	bl	8001178 <Error_Handler>
  }
}
 80010fc:	bf00      	nop
 80010fe:	3750      	adds	r7, #80	@ 0x50
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <MX_GPIO_Init+0x68>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a16      	ldr	r2, [pc, #88]	@ (8001174 <MX_GPIO_Init+0x68>)
 800111c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <MX_GPIO_Init+0x68>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <MX_GPIO_Init+0x68>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a0f      	ldr	r2, [pc, #60]	@ (8001174 <MX_GPIO_Init+0x68>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <MX_GPIO_Init+0x68>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <MX_GPIO_Init+0x68>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <MX_GPIO_Init+0x68>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <MX_GPIO_Init+0x68>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <Error_Handler+0x8>

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	4a0f      	ldr	r2, [pc, #60]	@ (80011d0 <HAL_MspInit+0x4c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001198:	6453      	str	r3, [r2, #68]	@ 0x44
 800119a:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a08      	ldr	r2, [pc, #32]	@ (80011d0 <HAL_MspInit+0x4c>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <NMI_Handler+0x4>

080011dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <MemManage_Handler+0x4>

080011ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122a:	f001 fe33 	bl	8002e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001238:	4802      	ldr	r0, [pc, #8]	@ (8001244 <OTG_HS_IRQHandler+0x10>)
 800123a:	f003 f9b8 	bl	80045ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20001adc 	.word	0x20001adc

08001248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return 1;
 800124c:	2301      	movs	r3, #1
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <_kill>:

int _kill(int pid, int sig)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001262:	f00a feb9 	bl	800bfd8 <__errno>
 8001266:	4603      	mov	r3, r0
 8001268:	2216      	movs	r2, #22
 800126a:	601a      	str	r2, [r3, #0]
  return -1;
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_exit>:

void _exit (int status)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ffe7 	bl	8001258 <_kill>
  while (1) {}    /* Make sure we hang here */
 800128a:	bf00      	nop
 800128c:	e7fd      	b.n	800128a <_exit+0x12>

0800128e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e00a      	b.n	80012b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012a0:	f3af 8000 	nop.w
 80012a4:	4601      	mov	r1, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	60ba      	str	r2, [r7, #8]
 80012ac:	b2ca      	uxtb	r2, r1
 80012ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3301      	adds	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	dbf0      	blt.n	80012a0 <_read+0x12>
  }

  return len;
 80012be:	687b      	ldr	r3, [r7, #4]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e009      	b.n	80012ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	60ba      	str	r2, [r7, #8]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3301      	adds	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dbf1      	blt.n	80012da <_write+0x12>
  }
  return len;
 80012f6:	687b      	ldr	r3, [r7, #4]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_close>:

int _close(int file)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001328:	605a      	str	r2, [r3, #4]
  return 0;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <_isatty>:

int _isatty(int file)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001340:	2301      	movs	r3, #1
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800134e:	b480      	push	{r7}
 8001350:	b085      	sub	sp, #20
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001370:	4a14      	ldr	r2, [pc, #80]	@ (80013c4 <_sbrk+0x5c>)
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <_sbrk+0x60>)
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137c:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <_sbrk+0x64>)
 8001386:	4a12      	ldr	r2, [pc, #72]	@ (80013d0 <_sbrk+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d207      	bcs.n	80013a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001398:	f00a fe1e 	bl	800bfd8 <__errno>
 800139c:	4603      	mov	r3, r0
 800139e:	220c      	movs	r2, #12
 80013a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e009      	b.n	80013bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <_sbrk+0x64>)
 80013b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20030000 	.word	0x20030000
 80013c8:	00000400 	.word	0x00000400
 80013cc:	2000039c 	.word	0x2000039c
 80013d0:	20002330 	.word	0x20002330

080013d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <SystemInit+0x20>)
 80013da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <SystemInit+0x20>)
 80013e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80013f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001430 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013fc:	f7ff ffea 	bl	80013d4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001400:	480c      	ldr	r0, [pc, #48]	@ (8001434 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001402:	490d      	ldr	r1, [pc, #52]	@ (8001438 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001404:	4a0d      	ldr	r2, [pc, #52]	@ (800143c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0a      	ldr	r2, [pc, #40]	@ (8001440 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001418:	4c0a      	ldr	r4, [pc, #40]	@ (8001444 <LoopFillZerobss+0x22>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001426:	f00a fddd 	bl	800bfe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142a:	f7ff fd9f 	bl	8000f6c <main>
  bx  lr    
 800142e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001430:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001438:	20000340 	.word	0x20000340
  ldr r2, =_sidata
 800143c:	0800ffa8 	.word	0x0800ffa8
  ldr r2, =_sbss
 8001440:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8001444:	2000232c 	.word	0x2000232c

08001448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC_IRQHandler>

0800144a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800144e:	f000 fc6f 	bl	8001d30 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001452:	20ca      	movs	r0, #202	@ 0xca
 8001454:	f000 f95d 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001458:	20c3      	movs	r0, #195	@ 0xc3
 800145a:	f000 f967 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800145e:	2008      	movs	r0, #8
 8001460:	f000 f964 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001464:	2050      	movs	r0, #80	@ 0x50
 8001466:	f000 f961 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800146a:	20cf      	movs	r0, #207	@ 0xcf
 800146c:	f000 f951 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001470:	2000      	movs	r0, #0
 8001472:	f000 f95b 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001476:	20c1      	movs	r0, #193	@ 0xc1
 8001478:	f000 f958 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800147c:	2030      	movs	r0, #48	@ 0x30
 800147e:	f000 f955 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001482:	20ed      	movs	r0, #237	@ 0xed
 8001484:	f000 f945 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001488:	2064      	movs	r0, #100	@ 0x64
 800148a:	f000 f94f 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800148e:	2003      	movs	r0, #3
 8001490:	f000 f94c 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001494:	2012      	movs	r0, #18
 8001496:	f000 f949 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800149a:	2081      	movs	r0, #129	@ 0x81
 800149c:	f000 f946 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80014a0:	20e8      	movs	r0, #232	@ 0xe8
 80014a2:	f000 f936 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80014a6:	2085      	movs	r0, #133	@ 0x85
 80014a8:	f000 f940 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014ac:	2000      	movs	r0, #0
 80014ae:	f000 f93d 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80014b2:	2078      	movs	r0, #120	@ 0x78
 80014b4:	f000 f93a 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80014b8:	20cb      	movs	r0, #203	@ 0xcb
 80014ba:	f000 f92a 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80014be:	2039      	movs	r0, #57	@ 0x39
 80014c0:	f000 f934 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80014c4:	202c      	movs	r0, #44	@ 0x2c
 80014c6:	f000 f931 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f92e 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80014d0:	2034      	movs	r0, #52	@ 0x34
 80014d2:	f000 f92b 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80014d6:	2002      	movs	r0, #2
 80014d8:	f000 f928 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80014dc:	20f7      	movs	r0, #247	@ 0xf7
 80014de:	f000 f918 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80014e2:	2020      	movs	r0, #32
 80014e4:	f000 f922 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80014e8:	20ea      	movs	r0, #234	@ 0xea
 80014ea:	f000 f912 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 f91c 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f919 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80014fa:	20b1      	movs	r0, #177	@ 0xb1
 80014fc:	f000 f909 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001500:	2000      	movs	r0, #0
 8001502:	f000 f913 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001506:	201b      	movs	r0, #27
 8001508:	f000 f910 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800150c:	20b6      	movs	r0, #182	@ 0xb6
 800150e:	f000 f900 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001512:	200a      	movs	r0, #10
 8001514:	f000 f90a 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001518:	20a2      	movs	r0, #162	@ 0xa2
 800151a:	f000 f907 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800151e:	20c0      	movs	r0, #192	@ 0xc0
 8001520:	f000 f8f7 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001524:	2010      	movs	r0, #16
 8001526:	f000 f901 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800152a:	20c1      	movs	r0, #193	@ 0xc1
 800152c:	f000 f8f1 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001530:	2010      	movs	r0, #16
 8001532:	f000 f8fb 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001536:	20c5      	movs	r0, #197	@ 0xc5
 8001538:	f000 f8eb 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800153c:	2045      	movs	r0, #69	@ 0x45
 800153e:	f000 f8f5 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001542:	2015      	movs	r0, #21
 8001544:	f000 f8f2 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001548:	20c7      	movs	r0, #199	@ 0xc7
 800154a:	f000 f8e2 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800154e:	2090      	movs	r0, #144	@ 0x90
 8001550:	f000 f8ec 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001554:	2036      	movs	r0, #54	@ 0x36
 8001556:	f000 f8dc 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800155a:	20c8      	movs	r0, #200	@ 0xc8
 800155c:	f000 f8e6 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001560:	20f2      	movs	r0, #242	@ 0xf2
 8001562:	f000 f8d6 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001566:	2000      	movs	r0, #0
 8001568:	f000 f8e0 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800156c:	20b0      	movs	r0, #176	@ 0xb0
 800156e:	f000 f8d0 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001572:	20c2      	movs	r0, #194	@ 0xc2
 8001574:	f000 f8da 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001578:	20b6      	movs	r0, #182	@ 0xb6
 800157a:	f000 f8ca 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800157e:	200a      	movs	r0, #10
 8001580:	f000 f8d4 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001584:	20a7      	movs	r0, #167	@ 0xa7
 8001586:	f000 f8d1 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800158a:	2027      	movs	r0, #39	@ 0x27
 800158c:	f000 f8ce 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001590:	2004      	movs	r0, #4
 8001592:	f000 f8cb 	bl	800172c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001596:	202a      	movs	r0, #42	@ 0x2a
 8001598:	f000 f8bb 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800159c:	2000      	movs	r0, #0
 800159e:	f000 f8c5 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 f8c2 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f000 f8bf 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80015ae:	20ef      	movs	r0, #239	@ 0xef
 80015b0:	f000 f8bc 	bl	800172c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80015b4:	202b      	movs	r0, #43	@ 0x2b
 80015b6:	f000 f8ac 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f000 f8b6 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f000 f8b3 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f000 f8b0 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80015cc:	203f      	movs	r0, #63	@ 0x3f
 80015ce:	f000 f8ad 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80015d2:	20f6      	movs	r0, #246	@ 0xf6
 80015d4:	f000 f89d 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80015d8:	2001      	movs	r0, #1
 80015da:	f000 f8a7 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 f8a4 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80015e4:	2006      	movs	r0, #6
 80015e6:	f000 f8a1 	bl	800172c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80015ea:	202c      	movs	r0, #44	@ 0x2c
 80015ec:	f000 f891 	bl	8001712 <ili9341_WriteReg>
  LCD_Delay(200);
 80015f0:	20c8      	movs	r0, #200	@ 0xc8
 80015f2:	f000 fc8b 	bl	8001f0c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80015f6:	2026      	movs	r0, #38	@ 0x26
 80015f8:	f000 f88b 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f000 f895 	bl	800172c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001602:	20e0      	movs	r0, #224	@ 0xe0
 8001604:	f000 f885 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001608:	200f      	movs	r0, #15
 800160a:	f000 f88f 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800160e:	2029      	movs	r0, #41	@ 0x29
 8001610:	f000 f88c 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001614:	2024      	movs	r0, #36	@ 0x24
 8001616:	f000 f889 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800161a:	200c      	movs	r0, #12
 800161c:	f000 f886 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001620:	200e      	movs	r0, #14
 8001622:	f000 f883 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001626:	2009      	movs	r0, #9
 8001628:	f000 f880 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800162c:	204e      	movs	r0, #78	@ 0x4e
 800162e:	f000 f87d 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001632:	2078      	movs	r0, #120	@ 0x78
 8001634:	f000 f87a 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001638:	203c      	movs	r0, #60	@ 0x3c
 800163a:	f000 f877 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800163e:	2009      	movs	r0, #9
 8001640:	f000 f874 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001644:	2013      	movs	r0, #19
 8001646:	f000 f871 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800164a:	2005      	movs	r0, #5
 800164c:	f000 f86e 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001650:	2017      	movs	r0, #23
 8001652:	f000 f86b 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001656:	2011      	movs	r0, #17
 8001658:	f000 f868 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800165c:	2000      	movs	r0, #0
 800165e:	f000 f865 	bl	800172c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001662:	20e1      	movs	r0, #225	@ 0xe1
 8001664:	f000 f855 	bl	8001712 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001668:	2000      	movs	r0, #0
 800166a:	f000 f85f 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800166e:	2016      	movs	r0, #22
 8001670:	f000 f85c 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001674:	201b      	movs	r0, #27
 8001676:	f000 f859 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800167a:	2004      	movs	r0, #4
 800167c:	f000 f856 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001680:	2011      	movs	r0, #17
 8001682:	f000 f853 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001686:	2007      	movs	r0, #7
 8001688:	f000 f850 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800168c:	2031      	movs	r0, #49	@ 0x31
 800168e:	f000 f84d 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001692:	2033      	movs	r0, #51	@ 0x33
 8001694:	f000 f84a 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001698:	2042      	movs	r0, #66	@ 0x42
 800169a:	f000 f847 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800169e:	2005      	movs	r0, #5
 80016a0:	f000 f844 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80016a4:	200c      	movs	r0, #12
 80016a6:	f000 f841 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80016aa:	200a      	movs	r0, #10
 80016ac:	f000 f83e 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80016b0:	2028      	movs	r0, #40	@ 0x28
 80016b2:	f000 f83b 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80016b6:	202f      	movs	r0, #47	@ 0x2f
 80016b8:	f000 f838 	bl	800172c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80016bc:	200f      	movs	r0, #15
 80016be:	f000 f835 	bl	800172c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80016c2:	2011      	movs	r0, #17
 80016c4:	f000 f825 	bl	8001712 <ili9341_WriteReg>
  LCD_Delay(200);
 80016c8:	20c8      	movs	r0, #200	@ 0xc8
 80016ca:	f000 fc1f 	bl	8001f0c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80016ce:	2029      	movs	r0, #41	@ 0x29
 80016d0:	f000 f81f 	bl	8001712 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80016d4:	202c      	movs	r0, #44	@ 0x2c
 80016d6:	f000 f81c 	bl	8001712 <ili9341_WriteReg>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}

080016de <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80016e2:	f000 fb25 	bl	8001d30 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80016e6:	2103      	movs	r1, #3
 80016e8:	20d3      	movs	r0, #211	@ 0xd3
 80016ea:	f000 f82c 	bl	8001746 <ili9341_ReadData>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b29b      	uxth	r3, r3
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80016fa:	2029      	movs	r0, #41	@ 0x29
 80016fc:	f000 f809 	bl	8001712 <ili9341_WriteReg>
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001708:	2028      	movs	r0, #40	@ 0x28
 800170a:	f000 f802 	bl	8001712 <ili9341_WriteReg>
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}

08001712 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fba0 	bl	8001e64 <LCD_IO_WriteReg>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fb71 	bl	8001e20 <LCD_IO_WriteData>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	460a      	mov	r2, r1
 8001750:	80fb      	strh	r3, [r7, #6]
 8001752:	4613      	mov	r3, r2
 8001754:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001756:	797a      	ldrb	r2, [r7, #5]
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fba3 	bl	8001ea8 <LCD_IO_ReadData>
 8001762:	4603      	mov	r3, r0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001770:	23f0      	movs	r3, #240	@ 0xf0
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001780:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800179c:	f000 fbc2 	bl	8001f24 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80017a6:	f107 030f 	add.w	r3, r7, #15
 80017aa:	2201      	movs	r2, #1
 80017ac:	2120      	movs	r1, #32
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fc04 	bl	8001fbc <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80017be:	f107 030f 	add.w	r3, r7, #15
 80017c2:	2201      	movs	r2, #1
 80017c4:	2123      	movs	r1, #35	@ 0x23
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fbf8 	bl	8001fbc <GYRO_IO_Write>
}
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80017e8:	f000 fb9c 	bl	8001f24 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80017ec:	1dfb      	adds	r3, r7, #7
 80017ee:	2201      	movs	r2, #1
 80017f0:	210f      	movs	r1, #15
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fc14 	bl	8002020 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80017f8:	79fb      	ldrb	r3, [r7, #7]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001808:	1dfb      	adds	r3, r7, #7
 800180a:	2201      	movs	r2, #1
 800180c:	2124      	movs	r1, #36	@ 0x24
 800180e:	4618      	mov	r0, r3
 8001810:	f000 fc06 	bl	8002020 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800181a:	b2db      	uxtb	r3, r3
 800181c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	2201      	movs	r2, #1
 8001822:	2124      	movs	r1, #36	@ 0x24
 8001824:	4618      	mov	r0, r3
 8001826:	f000 fbc9 	bl	8001fbc <GYRO_IO_Write>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001846:	f107 030f 	add.w	r3, r7, #15
 800184a:	2201      	movs	r2, #1
 800184c:	2120      	movs	r1, #32
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fbb4 	bl	8001fbc <GYRO_IO_Write>
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	2300      	movs	r3, #0
 800186c:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800186e:	f107 030f 	add.w	r3, r7, #15
 8001872:	2201      	movs	r2, #1
 8001874:	2130      	movs	r1, #48	@ 0x30
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fbd2 	bl	8002020 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800187c:	f107 030e 	add.w	r3, r7, #14
 8001880:	2201      	movs	r2, #1
 8001882:	2122      	movs	r1, #34	@ 0x22
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fbcb 	bl	8002020 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001890:	b2db      	uxtb	r3, r3
 8001892:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	121b      	asrs	r3, r3, #8
 800189a:	b25a      	sxtb	r2, r3
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	b25b      	sxtb	r3, r3
 80018a0:	4313      	orrs	r3, r2
 80018a2:	b25b      	sxtb	r3, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80018a8:	7bbb      	ldrb	r3, [r7, #14]
 80018aa:	f023 0320 	bic.w	r3, r3, #32
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	7bbb      	ldrb	r3, [r7, #14]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80018be:	f107 030f 	add.w	r3, r7, #15
 80018c2:	2201      	movs	r2, #1
 80018c4:	2130      	movs	r1, #48	@ 0x30
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fb78 	bl	8001fbc <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80018cc:	f107 030e 	add.w	r3, r7, #14
 80018d0:	2201      	movs	r2, #1
 80018d2:	2122      	movs	r1, #34	@ 0x22
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fb71 	bl	8001fbc <GYRO_IO_Write>
}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b084      	sub	sp, #16
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80018ec:	f107 030f 	add.w	r3, r7, #15
 80018f0:	2201      	movs	r2, #1
 80018f2:	2122      	movs	r1, #34	@ 0x22
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fb93 	bl	8002020 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10a      	bne.n	8001916 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001906:	b2db      	uxtb	r3, r3
 8001908:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001910:	b2db      	uxtb	r3, r3
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	e00c      	b.n	8001930 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d109      	bne.n	8001930 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	f023 0308 	bic.w	r3, r3, #8
 8001922:	b2db      	uxtb	r3, r3
 8001924:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	b2db      	uxtb	r3, r3
 800192e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001930:	f107 030f 	add.w	r3, r7, #15
 8001934:	2201      	movs	r2, #1
 8001936:	2122      	movs	r1, #34	@ 0x22
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fb3f 	bl	8001fbc <GYRO_IO_Write>
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001950:	f107 030f 	add.w	r3, r7, #15
 8001954:	2201      	movs	r2, #1
 8001956:	2122      	movs	r1, #34	@ 0x22
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fb61 	bl	8002020 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d107      	bne.n	8001974 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800196a:	b2db      	uxtb	r3, r3
 800196c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	e009      	b.n	8001988 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d106      	bne.n	8001988 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	f023 0308 	bic.w	r3, r3, #8
 8001980:	b2db      	uxtb	r3, r3
 8001982:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001988:	f107 030f 	add.w	r3, r7, #15
 800198c:	2201      	movs	r2, #1
 800198e:	2122      	movs	r1, #34	@ 0x22
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fb13 	bl	8001fbc <GYRO_IO_Write>
}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80019a8:	f107 030f 	add.w	r3, r7, #15
 80019ac:	2201      	movs	r2, #1
 80019ae:	2121      	movs	r1, #33	@ 0x21
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 fb35 	bl	8002020 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80019ca:	f107 030f 	add.w	r3, r7, #15
 80019ce:	2201      	movs	r2, #1
 80019d0:	2121      	movs	r1, #33	@ 0x21
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 faf2 	bl	8001fbc <GYRO_IO_Write>
}
 80019d8:	bf00      	nop
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80019ea:	f107 030f 	add.w	r3, r7, #15
 80019ee:	2201      	movs	r2, #1
 80019f0:	2124      	movs	r1, #36	@ 0x24
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fb14 	bl	8002020 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	f023 0310 	bic.w	r3, r3, #16
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001a0c:	f107 030f 	add.w	r3, r7, #15
 8001a10:	2201      	movs	r2, #1
 8001a12:	2124      	movs	r1, #36	@ 0x24
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fad1 	bl	8001fbc <GYRO_IO_Write>
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	@ 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	2300      	movs	r3, #0
 8001a32:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001a4c:	f107 030f 	add.w	r3, r7, #15
 8001a50:	2201      	movs	r2, #1
 8001a52:	2123      	movs	r1, #35	@ 0x23
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 fae3 	bl	8002020 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001a5a:	f107 0318 	add.w	r3, r7, #24
 8001a5e:	2206      	movs	r2, #6
 8001a60:	2128      	movs	r1, #40	@ 0x28
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 fadc 	bl	8002020 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d121      	bne.n	8001ab6 <L3GD20_ReadXYZAngRate+0x92>
  {
    for(i=0; i<3; i++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
 8001a76:	e01a      	b.n	8001aae <L3GD20_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	3328      	adds	r3, #40	@ 0x28
 8001a80:	443b      	add	r3, r7
 8001a82:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	6a3a      	ldr	r2, [r7, #32]
 8001a8c:	0052      	lsls	r2, r2, #1
 8001a8e:	3228      	adds	r2, #40	@ 0x28
 8001a90:	443a      	add	r2, r7
 8001a92:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	3328      	adds	r3, #40	@ 0x28
 8001aa2:	443b      	add	r3, r7
 8001aa4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	623b      	str	r3, [r7, #32]
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	dde1      	ble.n	8001a78 <L3GD20_ReadXYZAngRate+0x54>
 8001ab4:	e020      	b.n	8001af8 <L3GD20_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
 8001aba:	e01a      	b.n	8001af2 <L3GD20_ReadXYZAngRate+0xce>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	3328      	adds	r3, #40	@ 0x28
 8001ac2:	443b      	add	r3, r7
 8001ac4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	6a3a      	ldr	r2, [r7, #32]
 8001ace:	0052      	lsls	r2, r2, #1
 8001ad0:	3201      	adds	r2, #1
 8001ad2:	3228      	adds	r2, #40	@ 0x28
 8001ad4:	443a      	add	r2, r7
 8001ad6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001ada:	4413      	add	r3, r2
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	b21a      	sxth	r2, r3
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	3328      	adds	r3, #40	@ 0x28
 8001ae6:	443b      	add	r3, r7
 8001ae8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	3301      	adds	r3, #1
 8001af0:	623b      	str	r3, [r7, #32]
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	dde1      	ble.n	8001abc <L3GD20_ReadXYZAngRate+0x98>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	d00c      	beq.n	8001b1c <L3GD20_ReadXYZAngRate+0xf8>
 8001b02:	2b20      	cmp	r3, #32
 8001b04:	dc0d      	bgt.n	8001b22 <L3GD20_ReadXYZAngRate+0xfe>
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <L3GD20_ReadXYZAngRate+0xec>
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	d003      	beq.n	8001b16 <L3GD20_ReadXYZAngRate+0xf2>
 8001b0e:	e008      	b.n	8001b22 <L3GD20_ReadXYZAngRate+0xfe>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001b10:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <L3GD20_ReadXYZAngRate+0x144>)
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001b14:	e005      	b.n	8001b22 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <L3GD20_ReadXYZAngRate+0x148>)
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001b1a:	e002      	b.n	8001b22 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <L3GD20_ReadXYZAngRate+0x14c>)
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001b20:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
 8001b26:	e016      	b.n	8001b56 <L3GD20_ReadXYZAngRate+0x132>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	3328      	adds	r3, #40	@ 0x28
 8001b2e:	443b      	add	r3, r7
 8001b30:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4c:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	3301      	adds	r3, #1
 8001b54:	623b      	str	r3, [r7, #32]
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	dde5      	ble.n	8001b28 <L3GD20_ReadXYZAngRate+0x104>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	@ 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	410c0000 	.word	0x410c0000
 8001b6c:	418c0000 	.word	0x418c0000
 8001b70:	428c0000 	.word	0x428c0000

08001b74 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001b78:	4819      	ldr	r0, [pc, #100]	@ (8001be0 <SPIx_Init+0x6c>)
 8001b7a:	f005 f9bd 	bl	8006ef8 <HAL_SPI_GetState>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d12b      	bne.n	8001bdc <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001b84:	4b16      	ldr	r3, [pc, #88]	@ (8001be0 <SPIx_Init+0x6c>)
 8001b86:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <SPIx_Init+0x70>)
 8001b88:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b8a:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <SPIx_Init+0x6c>)
 8001b8c:	2218      	movs	r2, #24
 8001b8e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001b90:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <SPIx_Init+0x6c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001b96:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <SPIx_Init+0x6c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001b9c:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <SPIx_Init+0x6c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <SPIx_Init+0x6c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <SPIx_Init+0x6c>)
 8001baa:	2207      	movs	r2, #7
 8001bac:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001bae:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <SPIx_Init+0x6c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <SPIx_Init+0x6c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <SPIx_Init+0x6c>)
 8001bbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bc0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <SPIx_Init+0x6c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <SPIx_Init+0x6c>)
 8001bca:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bce:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001bd0:	4803      	ldr	r0, [pc, #12]	@ (8001be0 <SPIx_Init+0x6c>)
 8001bd2:	f000 f873 	bl	8001cbc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001bd6:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <SPIx_Init+0x6c>)
 8001bd8:	f004 fcc3 	bl	8006562 <HAL_SPI_Init>
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200003a0 	.word	0x200003a0
 8001be4:	40015000 	.word	0x40015000

08001be8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <SPIx_Read+0x38>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f107 0108 	add.w	r1, r7, #8
 8001c02:	4808      	ldr	r0, [pc, #32]	@ (8001c24 <SPIx_Read+0x3c>)
 8001c04:	f004 feb6 	bl	8006974 <HAL_SPI_Receive>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001c12:	f000 f847 	bl	8001ca4 <SPIx_Error>
  }

  return readvalue;
 8001c16:	68bb      	ldr	r3, [r7, #8]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000070 	.word	0x20000070
 8001c24:	200003a0 	.word	0x200003a0

08001c28 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 8001c36:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <SPIx_Write+0x34>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	1db9      	adds	r1, r7, #6
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4808      	ldr	r0, [pc, #32]	@ (8001c60 <SPIx_Write+0x38>)
 8001c40:	f004 fd54 	bl	80066ec <HAL_SPI_Transmit>
 8001c44:	4603      	mov	r3, r0
 8001c46:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001c4e:	f000 f829 	bl	8001ca4 <SPIx_Error>
  }
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000070 	.word	0x20000070
 8001c60:	200003a0 	.word	0x200003a0

08001c64 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]

  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *) &Byte, (uint8_t *) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001c72:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <SPIx_WriteRead+0x38>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f107 020f 	add.w	r2, r7, #15
 8001c7a:	1df9      	adds	r1, r7, #7
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2301      	movs	r3, #1
 8001c80:	4807      	ldr	r0, [pc, #28]	@ (8001ca0 <SPIx_WriteRead+0x3c>)
 8001c82:	f004 ff90 	bl	8006ba6 <HAL_SPI_TransmitReceive>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001c8c:	f000 f80a 	bl	8001ca4 <SPIx_Error>
  }

  return receivedbyte;
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000070 	.word	0x20000070
 8001ca0:	200003a0 	.word	0x200003a0

08001ca4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001ca8:	4803      	ldr	r0, [pc, #12]	@ (8001cb8 <SPIx_Error+0x14>)
 8001caa:	f004 fce3 	bl	8006674 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001cae:	f7ff ff61 	bl	8001b74 <SPIx_Init>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200003a0 	.word	0x200003a0

08001cbc <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	@ 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <SPIx_MspInit+0x6c>)
 8001cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ccc:	4a16      	ldr	r2, [pc, #88]	@ (8001d28 <SPIx_MspInit+0x6c>)
 8001cce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001cd2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd4:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <SPIx_MspInit+0x6c>)
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <SPIx_MspInit+0x6c>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce8:	4a0f      	ldr	r2, [pc, #60]	@ (8001d28 <SPIx_MspInit+0x6c>)
 8001cea:	f043 0320 	orr.w	r3, r3, #32
 8001cee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <SPIx_MspInit+0x6c>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001cfc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001d06:	2302      	movs	r3, #2
 8001d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001d0e:	2305      	movs	r3, #5
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4804      	ldr	r0, [pc, #16]	@ (8001d2c <SPIx_MspInit+0x70>)
 8001d1a:	f001 fe65 	bl	80039e8 <HAL_GPIO_Init>
}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	@ 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40021400 	.word	0x40021400

08001d30 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8001d36:	4b36      	ldr	r3, [pc, #216]	@ (8001e10 <LCD_IO_Init+0xe0>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d164      	bne.n	8001e08 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001d3e:	4b34      	ldr	r3, [pc, #208]	@ (8001e10 <LCD_IO_Init+0xe0>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	4b32      	ldr	r3, [pc, #200]	@ (8001e14 <LCD_IO_Init+0xe4>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4c:	4a31      	ldr	r2, [pc, #196]	@ (8001e14 <LCD_IO_Init+0xe4>)
 8001d4e:	f043 0308 	orr.w	r3, r3, #8
 8001d52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d54:	4b2f      	ldr	r3, [pc, #188]	@ (8001e14 <LCD_IO_Init+0xe4>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001d60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	4619      	mov	r1, r3
 8001d78:	4827      	ldr	r0, [pc, #156]	@ (8001e18 <LCD_IO_Init+0xe8>)
 8001d7a:	f001 fe35 	bl	80039e8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b24      	ldr	r3, [pc, #144]	@ (8001e14 <LCD_IO_Init+0xe4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	4a23      	ldr	r2, [pc, #140]	@ (8001e14 <LCD_IO_Init+0xe4>)
 8001d88:	f043 0308 	orr.w	r3, r3, #8
 8001d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8e:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <LCD_IO_Init+0xe4>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001da0:	2301      	movs	r3, #1
 8001da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	4619      	mov	r1, r3
 8001db2:	4819      	ldr	r0, [pc, #100]	@ (8001e18 <LCD_IO_Init+0xe8>)
 8001db4:	f001 fe18 	bl	80039e8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001db8:	2300      	movs	r3, #0
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <LCD_IO_Init+0xe4>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc0:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <LCD_IO_Init+0xe4>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc8:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <LCD_IO_Init+0xe4>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001de0:	2302      	movs	r3, #2
 8001de2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	4619      	mov	r1, r3
 8001dea:	480c      	ldr	r0, [pc, #48]	@ (8001e1c <LCD_IO_Init+0xec>)
 8001dec:	f001 fdfc 	bl	80039e8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001df0:	2200      	movs	r2, #0
 8001df2:	2104      	movs	r1, #4
 8001df4:	4809      	ldr	r0, [pc, #36]	@ (8001e1c <LCD_IO_Init+0xec>)
 8001df6:	f001 ffa3 	bl	8003d40 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	4807      	ldr	r0, [pc, #28]	@ (8001e1c <LCD_IO_Init+0xec>)
 8001e00:	f001 ff9e 	bl	8003d40 <HAL_GPIO_WritePin>

    SPIx_Init();
 8001e04:	f7ff feb6 	bl	8001b74 <SPIx_Init>
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	200003f8 	.word	0x200003f8
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020c00 	.word	0x40020c00
 8001e1c:	40020800 	.word	0x40020800

08001e20 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e30:	480a      	ldr	r0, [pc, #40]	@ (8001e5c <LCD_IO_WriteData+0x3c>)
 8001e32:	f001 ff85 	bl	8003d40 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001e36:	2200      	movs	r2, #0
 8001e38:	2104      	movs	r1, #4
 8001e3a:	4809      	ldr	r0, [pc, #36]	@ (8001e60 <LCD_IO_WriteData+0x40>)
 8001e3c:	f001 ff80 	bl	8003d40 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fef0 	bl	8001c28 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e48:	2201      	movs	r2, #1
 8001e4a:	2104      	movs	r1, #4
 8001e4c:	4804      	ldr	r0, [pc, #16]	@ (8001e60 <LCD_IO_WriteData+0x40>)
 8001e4e:	f001 ff77 	bl	8003d40 <HAL_GPIO_WritePin>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40020c00 	.word	0x40020c00
 8001e60:	40020800 	.word	0x40020800

08001e64 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e74:	480a      	ldr	r0, [pc, #40]	@ (8001ea0 <LCD_IO_WriteReg+0x3c>)
 8001e76:	f001 ff63 	bl	8003d40 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	4809      	ldr	r0, [pc, #36]	@ (8001ea4 <LCD_IO_WriteReg+0x40>)
 8001e80:	f001 ff5e 	bl	8003d40 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fecd 	bl	8001c28 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2104      	movs	r1, #4
 8001e92:	4804      	ldr	r0, [pc, #16]	@ (8001ea4 <LCD_IO_WriteReg+0x40>)
 8001e94:	f001 ff54 	bl	8003d40 <HAL_GPIO_WritePin>
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	40020800 	.word	0x40020800

08001ea8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	460a      	mov	r2, r1
 8001eb2:	80fb      	strh	r3, [r7, #6]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	4810      	ldr	r0, [pc, #64]	@ (8001f04 <LCD_IO_ReadData+0x5c>)
 8001ec2:	f001 ff3d 	bl	8003d40 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ecc:	480e      	ldr	r0, [pc, #56]	@ (8001f08 <LCD_IO_ReadData+0x60>)
 8001ece:	f001 ff37 	bl	8003d40 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fea7 	bl	8001c28 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8001eda:	797b      	ldrb	r3, [r7, #5]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fe83 	bl	8001be8 <SPIx_Read>
 8001ee2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eea:	4807      	ldr	r0, [pc, #28]	@ (8001f08 <LCD_IO_ReadData+0x60>)
 8001eec:	f001 ff28 	bl	8003d40 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2104      	movs	r1, #4
 8001ef4:	4803      	ldr	r0, [pc, #12]	@ (8001f04 <LCD_IO_ReadData+0x5c>)
 8001ef6:	f001 ff23 	bl	8003d40 <HAL_GPIO_WritePin>

  return readvalue;
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020c00 	.word	0x40020c00

08001f0c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 ffdd 	bl	8002ed4 <HAL_Delay>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	4b20      	ldr	r3, [pc, #128]	@ (8001fb0 <GYRO_IO_Init+0x8c>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	4a1f      	ldr	r2, [pc, #124]	@ (8001fb0 <GYRO_IO_Init+0x8c>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <GYRO_IO_Init+0x8c>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8001f46:	2302      	movs	r3, #2
 8001f48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4815      	ldr	r0, [pc, #84]	@ (8001fb4 <GYRO_IO_Init+0x90>)
 8001f5e:	f001 fd43 	bl	80039e8 <HAL_GPIO_Init>

  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8001f62:	2201      	movs	r2, #1
 8001f64:	2102      	movs	r1, #2
 8001f66:	4813      	ldr	r0, [pc, #76]	@ (8001fb4 <GYRO_IO_Init+0x90>)
 8001f68:	f001 feea 	bl	8003d40 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <GYRO_IO_Init+0x8c>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb0 <GYRO_IO_Init+0x8c>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <GYRO_IO_Init+0x8c>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001f88:	2306      	movs	r3, #6
 8001f8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001f90:	2302      	movs	r3, #2
 8001f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4806      	ldr	r0, [pc, #24]	@ (8001fb8 <GYRO_IO_Init+0x94>)
 8001fa0:	f001 fd22 	bl	80039e8 <HAL_GPIO_Init>

  SPIx_Init();
 8001fa4:	f7ff fde6 	bl	8001b74 <SPIx_Init>
}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020800 	.word	0x40020800
 8001fb8:	40020000 	.word	0x40020000

08001fbc <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8001fcc:	883b      	ldrh	r3, [r7, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d903      	bls.n	8001fda <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fd8:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2102      	movs	r1, #2
 8001fde:	480f      	ldr	r0, [pc, #60]	@ (800201c <GYRO_IO_Write+0x60>)
 8001fe0:	f001 feae 	bl	8003d40 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fe3c 	bl	8001c64 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8001fec:	e00a      	b.n	8002004 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fe36 	bl	8001c64 <SPIx_WriteRead>
    NumByteToWrite--;
 8001ff8:	883b      	ldrh	r3, [r7, #0]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3301      	adds	r3, #1
 8002002:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8002004:	883b      	ldrh	r3, [r7, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f1      	bne.n	8001fee <GYRO_IO_Write+0x32>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 800200a:	2201      	movs	r2, #1
 800200c:	2102      	movs	r1, #2
 800200e:	4803      	ldr	r0, [pc, #12]	@ (800201c <GYRO_IO_Write+0x60>)
 8002010:	f001 fe96 	bl	8003d40 <HAL_GPIO_WritePin>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40020800 	.word	0x40020800

08002020 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
 800202c:	4613      	mov	r3, r2
 800202e:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8002030:	883b      	ldrh	r3, [r7, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d904      	bls.n	8002040 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800203c:	70fb      	strb	r3, [r7, #3]
 800203e:	e003      	b.n	8002048 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002046:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002048:	2200      	movs	r2, #0
 800204a:	2102      	movs	r1, #2
 800204c:	4810      	ldr	r0, [pc, #64]	@ (8002090 <GYRO_IO_Read+0x70>)
 800204e:	f001 fe77 	bl	8003d40 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fe05 	bl	8001c64 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 800205a:	e00c      	b.n	8002076 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800205c:	2000      	movs	r0, #0
 800205e:	f7ff fe01 	bl	8001c64 <SPIx_WriteRead>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800206a:	883b      	ldrh	r3, [r7, #0]
 800206c:	3b01      	subs	r3, #1
 800206e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3301      	adds	r3, #1
 8002074:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8002076:	883b      	ldrh	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ef      	bne.n	800205c <GYRO_IO_Read+0x3c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 800207c:	2201      	movs	r2, #1
 800207e:	2102      	movs	r1, #2
 8002080:	4803      	ldr	r0, [pc, #12]	@ (8002090 <GYRO_IO_Read+0x70>)
 8002082:	f001 fe5d 	bl	8003d40 <HAL_GPIO_WritePin>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40020800 	.word	0x40020800

08002094 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800209e:	2300      	movs	r3, #0
 80020a0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0, 0};
 80020a2:	2300      	movs	r3, #0
 80020a4:	703b      	strb	r3, [r7, #0]
 80020a6:	2300      	movs	r3, #0
 80020a8:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80020aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002158 <BSP_GYRO_Init+0xc4>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	4798      	blx	r3
 80020b0:	4603      	mov	r3, r0
 80020b2:	2bd4      	cmp	r3, #212	@ 0xd4
 80020b4:	d005      	beq.n	80020c2 <BSP_GYRO_Init+0x2e>
 80020b6:	4b28      	ldr	r3, [pc, #160]	@ (8002158 <BSP_GYRO_Init+0xc4>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	4798      	blx	r3
 80020bc:	4603      	mov	r3, r0
 80020be:	2bd5      	cmp	r3, #213	@ 0xd5
 80020c0:	d144      	bne.n	800214c <BSP_GYRO_Init+0xb8>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80020c2:	4b26      	ldr	r3, [pc, #152]	@ (800215c <BSP_GYRO_Init+0xc8>)
 80020c4:	4a24      	ldr	r2, [pc, #144]	@ (8002158 <BSP_GYRO_Init+0xc4>)
 80020c6:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80020c8:	2308      	movs	r3, #8
 80020ca:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80020cc:	2300      	movs	r3, #0
 80020ce:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80020d0:	2307      	movs	r3, #7
 80020d2:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80020d4:	2330      	movs	r3, #48	@ 0x30
 80020d6:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80020d8:	2300      	movs	r3, #0
 80020da:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80020dc:	2300      	movs	r3, #0
 80020de:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80020e0:	2310      	movs	r3, #16
 80020e2:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80020e4:	793a      	ldrb	r2, [r7, #4]
 80020e6:	797b      	ldrb	r3, [r7, #5]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80020ec:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80020f2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80020fa:	7a3a      	ldrb	r2, [r7, #8]
 80020fc:	7a7b      	ldrb	r3, [r7, #9]
 80020fe:	4313      	orrs	r3, r2
 8002100:	b2da      	uxtb	r2, r3
                        Gyro_InitStructure.Full_Scale) << 8);
 8002102:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002104:	4313      	orrs	r3, r2
 8002106:	b2db      	uxtb	r3, r3
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	b29a      	uxth	r2, r3
 800210c:	89bb      	ldrh	r3, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002112:	4b12      	ldr	r3, [pc, #72]	@ (800215c <BSP_GYRO_Init+0xc8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	89ba      	ldrh	r2, [r7, #12]
 800211a:	4610      	mov	r0, r2
 800211c:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 800211e:	2300      	movs	r3, #0
 8002120:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002122:	2300      	movs	r3, #0
 8002124:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 8002126:	783a      	ldrb	r2, [r7, #0]
                      Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002128:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 800212a:	4313      	orrs	r3, r2
 800212c:	b2db      	uxtb	r3, r3
 800212e:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002130:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <BSP_GYRO_Init+0xc8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002136:	89ba      	ldrh	r2, [r7, #12]
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	4610      	mov	r0, r2
 800213c:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800213e:	4b07      	ldr	r3, [pc, #28]	@ (800215c <BSP_GYRO_Init+0xc8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002144:	2010      	movs	r0, #16
 8002146:	4798      	blx	r3

    ret = GYRO_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000003c 	.word	0x2000003c
 800215c:	200003fc 	.word	0x200003fc

08002160 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <BSP_GYRO_GetXYZ+0x24>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	2b00      	cmp	r3, #0
 8002170:	d004      	beq.n	800217c <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002172:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <BSP_GYRO_GetXYZ+0x24>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
  }
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200003fc 	.word	0x200003fc

08002188 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 800218c:	4b2d      	ldr	r3, [pc, #180]	@ (8002244 <BSP_LCD_Init+0xbc>)
 800218e:	4a2e      	ldr	r2, [pc, #184]	@ (8002248 <BSP_LCD_Init+0xc0>)
 8002190:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002192:	4b2c      	ldr	r3, [pc, #176]	@ (8002244 <BSP_LCD_Init+0xbc>)
 8002194:	2209      	movs	r2, #9
 8002196:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002198:	4b2a      	ldr	r3, [pc, #168]	@ (8002244 <BSP_LCD_Init+0xbc>)
 800219a:	2201      	movs	r2, #1
 800219c:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800219e:	4b29      	ldr	r3, [pc, #164]	@ (8002244 <BSP_LCD_Init+0xbc>)
 80021a0:	221d      	movs	r2, #29
 80021a2:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80021a4:	4b27      	ldr	r3, [pc, #156]	@ (8002244 <BSP_LCD_Init+0xbc>)
 80021a6:	2203      	movs	r2, #3
 80021a8:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 80021aa:	4b26      	ldr	r3, [pc, #152]	@ (8002244 <BSP_LCD_Init+0xbc>)
 80021ac:	f240 120d 	movw	r2, #269	@ 0x10d
 80021b0:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 80021b2:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <BSP_LCD_Init+0xbc>)
 80021b4:	f240 1243 	movw	r2, #323	@ 0x143
 80021b8:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 80021ba:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <BSP_LCD_Init+0xbc>)
 80021bc:	f240 1217 	movw	r2, #279	@ 0x117
 80021c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 80021c2:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <BSP_LCD_Init+0xbc>)
 80021c4:	f240 1247 	movw	r2, #327	@ 0x147
 80021c8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 80021ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002244 <BSP_LCD_Init+0xbc>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 80021d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002244 <BSP_LCD_Init+0xbc>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 80021da:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <BSP_LCD_Init+0xbc>)
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80021e2:	4b1a      	ldr	r3, [pc, #104]	@ (800224c <BSP_LCD_Init+0xc4>)
 80021e4:	2208      	movs	r2, #8
 80021e6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80021e8:	4b18      	ldr	r3, [pc, #96]	@ (800224c <BSP_LCD_Init+0xc4>)
 80021ea:	22c0      	movs	r2, #192	@ 0xc0
 80021ec:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80021ee:	4b17      	ldr	r3, [pc, #92]	@ (800224c <BSP_LCD_Init+0xc4>)
 80021f0:	2204      	movs	r2, #4
 80021f2:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80021f4:	4b15      	ldr	r3, [pc, #84]	@ (800224c <BSP_LCD_Init+0xc4>)
 80021f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021fa:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80021fc:	4813      	ldr	r0, [pc, #76]	@ (800224c <BSP_LCD_Init+0xc4>)
 80021fe:	f003 ff55 	bl	80060ac <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002202:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <BSP_LCD_Init+0xbc>)
 8002204:	2200      	movs	r2, #0
 8002206:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002208:	4b0e      	ldr	r3, [pc, #56]	@ (8002244 <BSP_LCD_Init+0xbc>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800220e:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <BSP_LCD_Init+0xbc>)
 8002210:	2200      	movs	r2, #0
 8002212:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002214:	4b0b      	ldr	r3, [pc, #44]	@ (8002244 <BSP_LCD_Init+0xbc>)
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 800221a:	f000 fa31 	bl	8002680 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 800221e:	4809      	ldr	r0, [pc, #36]	@ (8002244 <BSP_LCD_Init+0xbc>)
 8002220:	f001 fda8 	bl	8003d74 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8002224:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <BSP_LCD_Init+0xc8>)
 8002226:	4a0b      	ldr	r2, [pc, #44]	@ (8002254 <BSP_LCD_Init+0xcc>)
 8002228:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 800222a:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <BSP_LCD_Init+0xc8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002232:	f000 fc13 	bl	8002a5c <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002236:	4808      	ldr	r0, [pc, #32]	@ (8002258 <BSP_LCD_Init+0xd0>)
 8002238:	f000 f8ce 	bl	80023d8 <BSP_LCD_SetFont>

  return LCD_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000400 	.word	0x20000400
 8002248:	40016800 	.word	0x40016800
 800224c:	200004e8 	.word	0x200004e8
 8002250:	20000534 	.word	0x20000534
 8002254:	20000004 	.word	0x20000004
 8002258:	20000074 	.word	0x20000074

0800225c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002260:	4b03      	ldr	r3, [pc, #12]	@ (8002270 <BSP_LCD_GetXSize+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002266:	4798      	blx	r3
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000534 	.word	0x20000534

08002274 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002278:	4b03      	ldr	r3, [pc, #12]	@ (8002288 <BSP_LCD_GetYSize+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227e:	4798      	blx	r3
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000534 	.word	0x20000534

0800228c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b090      	sub	sp, #64	@ 0x40
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800229c:	f7ff ffde 	bl	800225c <BSP_LCD_GetXSize>
 80022a0:	4603      	mov	r3, r0
 80022a2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 80022a8:	f7ff ffe4 	bl	8002274 <BSP_LCD_GetYSize>
 80022ac:	4603      	mov	r3, r0
 80022ae:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80022b8:	23ff      	movs	r3, #255	@ 0xff
 80022ba:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80022d2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80022d8:	2307      	movs	r3, #7
 80022da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80022dc:	f7ff ffbe 	bl	800225c <BSP_LCD_GetXSize>
 80022e0:	4603      	mov	r3, r0
 80022e2:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80022e4:	f7ff ffc6 	bl	8002274 <BSP_LCD_GetYSize>
 80022e8:	4603      	mov	r3, r0
 80022ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 80022ec:	88fa      	ldrh	r2, [r7, #6]
 80022ee:	f107 030c 	add.w	r3, r7, #12
 80022f2:	4619      	mov	r1, r3
 80022f4:	4814      	ldr	r0, [pc, #80]	@ (8002348 <BSP_LCD_LayerDefaultInit+0xbc>)
 80022f6:	f001 fe17 	bl	8003f28 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80022fa:	88fa      	ldrh	r2, [r7, #6]
 80022fc:	4913      	ldr	r1, [pc, #76]	@ (800234c <BSP_LCD_LayerDefaultInit+0xc0>)
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	3304      	adds	r3, #4
 800230a:	f04f 32ff 	mov.w	r2, #4294967295
 800230e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002310:	88fa      	ldrh	r2, [r7, #6]
 8002312:	490e      	ldr	r1, [pc, #56]	@ (800234c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	3308      	adds	r3, #8
 8002320:	4a0b      	ldr	r2, [pc, #44]	@ (8002350 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002322:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	4909      	ldr	r1, [pc, #36]	@ (800234c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8002336:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002338:	4803      	ldr	r0, [pc, #12]	@ (8002348 <BSP_LCD_LayerDefaultInit+0xbc>)
 800233a:	f001 fe33 	bl	8003fa4 <HAL_LTDC_EnableDither>
}
 800233e:	bf00      	nop
 8002340:	3740      	adds	r7, #64	@ 0x40
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000400 	.word	0x20000400
 800234c:	2000051c 	.word	0x2000051c
 8002350:	20000074 	.word	0x20000074

08002354 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800235c:	4a04      	ldr	r2, [pc, #16]	@ (8002370 <BSP_LCD_SelectLayer+0x1c>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6013      	str	r3, [r2, #0]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000518 	.word	0x20000518

08002374 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800237c:	4b07      	ldr	r3, [pc, #28]	@ (800239c <BSP_LCD_SetTextColor+0x28>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4907      	ldr	r1, [pc, #28]	@ (80023a0 <BSP_LCD_SetTextColor+0x2c>)
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	601a      	str	r2, [r3, #0]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	20000518 	.word	0x20000518
 80023a0:	2000051c 	.word	0x2000051c

080023a4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <BSP_LCD_SetBackColor+0x2c>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4908      	ldr	r1, [pc, #32]	@ (80023d4 <BSP_LCD_SetBackColor+0x30>)
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	3304      	adds	r3, #4
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	601a      	str	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000518 	.word	0x20000518
 80023d4:	2000051c 	.word	0x2000051c

080023d8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80023e0:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <BSP_LCD_SetFont+0x2c>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4908      	ldr	r1, [pc, #32]	@ (8002408 <BSP_LCD_SetFont+0x30>)
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	3308      	adds	r3, #8
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000518 	.word	0x20000518
 8002408:	2000051c 	.word	0x2000051c

0800240c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 800240c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240e:	b085      	sub	sp, #20
 8002410:	af02      	add	r7, sp, #8
 8002412:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8002414:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <BSP_LCD_Clear+0x48>)
 8002416:	681c      	ldr	r4, [r3, #0]
 8002418:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <BSP_LCD_Clear+0x48>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0e      	ldr	r2, [pc, #56]	@ (8002458 <BSP_LCD_Clear+0x4c>)
 800241e:	2134      	movs	r1, #52	@ 0x34
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	335c      	adds	r3, #92	@ 0x5c
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	461e      	mov	r6, r3
 800242c:	f7ff ff16 	bl	800225c <BSP_LCD_GetXSize>
 8002430:	4605      	mov	r5, r0
 8002432:	f7ff ff1f 	bl	8002274 <BSP_LCD_GetYSize>
 8002436:	4602      	mov	r2, r0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	2300      	movs	r3, #0
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	4613      	mov	r3, r2
 8002442:	462a      	mov	r2, r5
 8002444:	4631      	mov	r1, r6
 8002446:	4620      	mov	r0, r4
 8002448:	f000 fad0 	bl	80029ec <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002454:	20000518 	.word	0x20000518
 8002458:	20000400 	.word	0x20000400

0800245c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
 8002466:	460b      	mov	r3, r1
 8002468:	80bb      	strh	r3, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800246e:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <BSP_LCD_DisplayChar+0x80>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	491b      	ldr	r1, [pc, #108]	@ (80024e0 <BSP_LCD_DisplayChar+0x84>)
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	3308      	adds	r3, #8
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6819      	ldr	r1, [r3, #0]
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800248a:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <BSP_LCD_DisplayChar+0x80>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4c14      	ldr	r4, [pc, #80]	@ (80024e0 <BSP_LCD_DisplayChar+0x84>)
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4423      	add	r3, r4
 800249a:	3308      	adds	r3, #8
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80024a0:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80024a4:	4b0d      	ldr	r3, [pc, #52]	@ (80024dc <BSP_LCD_DisplayChar+0x80>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4c0d      	ldr	r4, [pc, #52]	@ (80024e0 <BSP_LCD_DisplayChar+0x84>)
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4423      	add	r3, r4
 80024b4:	3308      	adds	r3, #8
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	889b      	ldrh	r3, [r3, #4]
 80024ba:	3307      	adds	r3, #7
 80024bc:	2b00      	cmp	r3, #0
 80024be:	da00      	bge.n	80024c2 <BSP_LCD_DisplayChar+0x66>
 80024c0:	3307      	adds	r3, #7
 80024c2:	10db      	asrs	r3, r3, #3
 80024c4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80024c8:	18ca      	adds	r2, r1, r3
 80024ca:	88b9      	ldrh	r1, [r7, #4]
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f9d2 	bl	8002878 <DrawChar>
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd90      	pop	{r4, r7, pc}
 80024dc:	20000518 	.word	0x20000518
 80024e0:	2000051c 	.word	0x2000051c

080024e4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80024e4:	b5b0      	push	{r4, r5, r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60ba      	str	r2, [r7, #8]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	81fb      	strh	r3, [r7, #14]
 80024f2:	460b      	mov	r3, r1
 80024f4:	81bb      	strh	r3, [r7, #12]
 80024f6:	4613      	mov	r3, r2
 80024f8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80024fa:	2301      	movs	r3, #1
 80024fc:	83fb      	strh	r3, [r7, #30]
 80024fe:	2300      	movs	r3, #0
 8002500:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 800250e:	e002      	b.n	8002516 <BSP_LCD_DisplayStringAt+0x32>
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	3301      	adds	r3, #1
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	617a      	str	r2, [r7, #20]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f6      	bne.n	8002510 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8002522:	f7ff fe9b 	bl	800225c <BSP_LCD_GetXSize>
 8002526:	4601      	mov	r1, r0
 8002528:	4b4b      	ldr	r3, [pc, #300]	@ (8002658 <BSP_LCD_DisplayStringAt+0x174>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	484b      	ldr	r0, [pc, #300]	@ (800265c <BSP_LCD_DisplayStringAt+0x178>)
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4403      	add	r3, r0
 8002538:	3308      	adds	r3, #8
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	889b      	ldrh	r3, [r3, #4]
 800253e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002542:	613b      	str	r3, [r7, #16]

  switch (mode)
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	2b03      	cmp	r3, #3
 8002548:	d01c      	beq.n	8002584 <BSP_LCD_DisplayStringAt+0xa0>
 800254a:	2b03      	cmp	r3, #3
 800254c:	dc33      	bgt.n	80025b6 <BSP_LCD_DisplayStringAt+0xd2>
 800254e:	2b01      	cmp	r3, #1
 8002550:	d002      	beq.n	8002558 <BSP_LCD_DisplayStringAt+0x74>
 8002552:	2b02      	cmp	r3, #2
 8002554:	d019      	beq.n	800258a <BSP_LCD_DisplayStringAt+0xa6>
 8002556:	e02e      	b.n	80025b6 <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	1ad1      	subs	r1, r2, r3
 800255e:	4b3e      	ldr	r3, [pc, #248]	@ (8002658 <BSP_LCD_DisplayStringAt+0x174>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	483e      	ldr	r0, [pc, #248]	@ (800265c <BSP_LCD_DisplayStringAt+0x178>)
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4403      	add	r3, r0
 800256e:	3308      	adds	r3, #8
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	889b      	ldrh	r3, [r3, #4]
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	085b      	lsrs	r3, r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	89fb      	ldrh	r3, [r7, #14]
 800257e:	4413      	add	r3, r2
 8002580:	83fb      	strh	r3, [r7, #30]
      break;
 8002582:	e01b      	b.n	80025bc <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8002584:	89fb      	ldrh	r3, [r7, #14]
 8002586:	83fb      	strh	r3, [r7, #30]
      break;
 8002588:	e018      	b.n	80025bc <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	b299      	uxth	r1, r3
 8002592:	4b31      	ldr	r3, [pc, #196]	@ (8002658 <BSP_LCD_DisplayStringAt+0x174>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4831      	ldr	r0, [pc, #196]	@ (800265c <BSP_LCD_DisplayStringAt+0x178>)
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4403      	add	r3, r0
 80025a2:	3308      	adds	r3, #8
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	889b      	ldrh	r3, [r3, #4]
 80025a8:	fb11 f303 	smulbb	r3, r1, r3
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	89fb      	ldrh	r3, [r7, #14]
 80025b0:	4413      	add	r3, r2
 80025b2:	83fb      	strh	r3, [r7, #30]
      break;
 80025b4:	e002      	b.n	80025bc <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 80025b6:	89fb      	ldrh	r3, [r7, #14]
 80025b8:	83fb      	strh	r3, [r7, #30]
      break;
 80025ba:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80025bc:	e01a      	b.n	80025f4 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	89b9      	ldrh	r1, [r7, #12]
 80025c4:	8bfb      	ldrh	r3, [r7, #30]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff48 	bl	800245c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80025cc:	4b22      	ldr	r3, [pc, #136]	@ (8002658 <BSP_LCD_DisplayStringAt+0x174>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4922      	ldr	r1, [pc, #136]	@ (800265c <BSP_LCD_DisplayStringAt+0x178>)
 80025d2:	4613      	mov	r3, r2
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	3308      	adds	r3, #8
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	889a      	ldrh	r2, [r3, #4]
 80025e2:	8bfb      	ldrh	r3, [r7, #30]
 80025e4:	4413      	add	r3, r2
 80025e6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	3301      	adds	r3, #1
 80025ec:	60bb      	str	r3, [r7, #8]
    i++;
 80025ee:	8bbb      	ldrh	r3, [r7, #28]
 80025f0:	3301      	adds	r3, #1
 80025f2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bf14      	ite	ne
 80025fc:	2301      	movne	r3, #1
 80025fe:	2300      	moveq	r3, #0
 8002600:	b2dc      	uxtb	r4, r3
 8002602:	f7ff fe2b 	bl	800225c <BSP_LCD_GetXSize>
 8002606:	8bb9      	ldrh	r1, [r7, #28]
 8002608:	4b13      	ldr	r3, [pc, #76]	@ (8002658 <BSP_LCD_DisplayStringAt+0x174>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4d13      	ldr	r5, [pc, #76]	@ (800265c <BSP_LCD_DisplayStringAt+0x178>)
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	442b      	add	r3, r5
 8002618:	3308      	adds	r3, #8
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	889b      	ldrh	r3, [r3, #4]
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	1ac3      	subs	r3, r0, r3
 8002624:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 8002626:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <BSP_LCD_DisplayStringAt+0x174>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	480c      	ldr	r0, [pc, #48]	@ (800265c <BSP_LCD_DisplayStringAt+0x178>)
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4403      	add	r3, r0
 8002636:	3308      	adds	r3, #8
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 800263c:	4299      	cmp	r1, r3
 800263e:	bf2c      	ite	cs
 8002640:	2301      	movcs	r3, #1
 8002642:	2300      	movcc	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	4023      	ands	r3, r4
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1b7      	bne.n	80025be <BSP_LCD_DisplayStringAt+0xda>
  }
}
 800264e:	bf00      	nop
 8002650:	bf00      	nop
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bdb0      	pop	{r4, r5, r7, pc}
 8002658:	20000518 	.word	0x20000518
 800265c:	2000051c 	.word	0x2000051c

08002660 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <BSP_LCD_DisplayOn+0x1c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800266e:	4b03      	ldr	r3, [pc, #12]	@ (800267c <BSP_LCD_DisplayOn+0x1c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4798      	blx	r3
  }
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000534 	.word	0x20000534

08002680 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08e      	sub	sp, #56	@ 0x38
 8002684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
 800268a:	4b61      	ldr	r3, [pc, #388]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	4a60      	ldr	r2, [pc, #384]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 8002690:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002694:	6453      	str	r3, [r2, #68]	@ 0x44
 8002696:	4b5e      	ldr	r3, [pc, #376]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800269e:	623b      	str	r3, [r7, #32]
 80026a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	4a59      	ldr	r2, [pc, #356]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 80026ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b2:	4b57      	ldr	r3, [pc, #348]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	4b53      	ldr	r3, [pc, #332]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	4a52      	ldr	r2, [pc, #328]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ce:	4b50      	ldr	r3, [pc, #320]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	4b4c      	ldr	r3, [pc, #304]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	4a4b      	ldr	r2, [pc, #300]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ea:	4b49      	ldr	r3, [pc, #292]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	4b45      	ldr	r3, [pc, #276]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	4a44      	ldr	r2, [pc, #272]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 8002700:	f043 0304 	orr.w	r3, r3, #4
 8002704:	6313      	str	r3, [r2, #48]	@ 0x30
 8002706:	4b42      	ldr	r3, [pc, #264]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b3e      	ldr	r3, [pc, #248]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	4a3d      	ldr	r2, [pc, #244]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 800271c:	f043 0308 	orr.w	r3, r3, #8
 8002720:	6313      	str	r3, [r2, #48]	@ 0x30
 8002722:	4b3b      	ldr	r3, [pc, #236]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	4a36      	ldr	r2, [pc, #216]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 8002738:	f043 0320 	orr.w	r3, r3, #32
 800273c:	6313      	str	r3, [r2, #48]	@ 0x30
 800273e:	4b34      	ldr	r3, [pc, #208]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	4b30      	ldr	r3, [pc, #192]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	4a2f      	ldr	r2, [pc, #188]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 8002754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002758:	6313      	str	r3, [r2, #48]	@ 0x30
 800275a:	4b2d      	ldr	r3, [pc, #180]	@ (8002810 <BSP_LCD_MspInit+0x190>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002766:	f641 0358 	movw	r3, #6232	@ 0x1858
 800276a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002774:	2302      	movs	r3, #2
 8002776:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8002778:	230e      	movs	r3, #14
 800277a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800277c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002780:	4619      	mov	r1, r3
 8002782:	4824      	ldr	r0, [pc, #144]	@ (8002814 <BSP_LCD_MspInit+0x194>)
 8002784:	f001 f930 	bl	80039e8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002788:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800278e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002792:	4619      	mov	r1, r3
 8002794:	4820      	ldr	r0, [pc, #128]	@ (8002818 <BSP_LCD_MspInit+0x198>)
 8002796:	f001 f927 	bl	80039e8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800279a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80027a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027a4:	4619      	mov	r1, r3
 80027a6:	481d      	ldr	r0, [pc, #116]	@ (800281c <BSP_LCD_MspInit+0x19c>)
 80027a8:	f001 f91e 	bl	80039e8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80027ac:	2348      	movs	r3, #72	@ 0x48
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80027b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b4:	4619      	mov	r1, r3
 80027b6:	481a      	ldr	r0, [pc, #104]	@ (8002820 <BSP_LCD_MspInit+0x1a0>)
 80027b8:	f001 f916 	bl	80039e8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80027bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80027c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027c6:	4619      	mov	r1, r3
 80027c8:	4816      	ldr	r0, [pc, #88]	@ (8002824 <BSP_LCD_MspInit+0x1a4>)
 80027ca:	f001 f90d 	bl	80039e8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80027ce:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80027d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d8:	4619      	mov	r1, r3
 80027da:	4813      	ldr	r0, [pc, #76]	@ (8002828 <BSP_LCD_MspInit+0x1a8>)
 80027dc:	f001 f904 	bl	80039e8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80027e0:	2303      	movs	r3, #3
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80027e4:	2309      	movs	r3, #9
 80027e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80027e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ec:	4619      	mov	r1, r3
 80027ee:	480a      	ldr	r0, [pc, #40]	@ (8002818 <BSP_LCD_MspInit+0x198>)
 80027f0:	f001 f8fa 	bl	80039e8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80027f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80027fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027fe:	4619      	mov	r1, r3
 8002800:	4809      	ldr	r0, [pc, #36]	@ (8002828 <BSP_LCD_MspInit+0x1a8>)
 8002802:	f001 f8f1 	bl	80039e8 <HAL_GPIO_Init>
}
 8002806:	bf00      	nop
 8002808:	3738      	adds	r7, #56	@ 0x38
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	40020000 	.word	0x40020000
 8002818:	40020400 	.word	0x40020400
 800281c:	40020800 	.word	0x40020800
 8002820:	40020c00 	.word	0x40020c00
 8002824:	40021400 	.word	0x40021400
 8002828:	40021800 	.word	0x40021800

0800282c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800282c:	b5b0      	push	{r4, r5, r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	603a      	str	r2, [r7, #0]
 8002836:	80fb      	strh	r3, [r7, #6]
 8002838:	460b      	mov	r3, r1
 800283a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800283c:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <BSP_LCD_DrawPixel+0x44>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0c      	ldr	r2, [pc, #48]	@ (8002874 <BSP_LCD_DrawPixel+0x48>)
 8002842:	2134      	movs	r1, #52	@ 0x34
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	335c      	adds	r3, #92	@ 0x5c
 800284c:	681c      	ldr	r4, [r3, #0]
 800284e:	88bd      	ldrh	r5, [r7, #4]
 8002850:	f7ff fd04 	bl	800225c <BSP_LCD_GetXSize>
 8002854:	4603      	mov	r3, r0
 8002856:	fb03 f205 	mul.w	r2, r3, r5
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4423      	add	r3, r4
 8002862:	461a      	mov	r2, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6013      	str	r3, [r2, #0]
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bdb0      	pop	{r4, r5, r7, pc}
 8002870:	20000518 	.word	0x20000518
 8002874:	20000400 	.word	0x20000400

08002878 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	603a      	str	r2, [r7, #0]
 8002882:	80fb      	strh	r3, [r7, #6]
 8002884:	460b      	mov	r3, r1
 8002886:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002894:	4b53      	ldr	r3, [pc, #332]	@ (80029e4 <DrawChar+0x16c>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4953      	ldr	r1, [pc, #332]	@ (80029e8 <DrawChar+0x170>)
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	3308      	adds	r3, #8
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	88db      	ldrh	r3, [r3, #6]
 80028aa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80028ac:	4b4d      	ldr	r3, [pc, #308]	@ (80029e4 <DrawChar+0x16c>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	494d      	ldr	r1, [pc, #308]	@ (80029e8 <DrawChar+0x170>)
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	3308      	adds	r3, #8
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	889b      	ldrh	r3, [r3, #4]
 80028c2:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 80028c4:	8a3b      	ldrh	r3, [r7, #16]
 80028c6:	3307      	adds	r3, #7
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	da00      	bge.n	80028ce <DrawChar+0x56>
 80028cc:	3307      	adds	r3, #7
 80028ce:	10db      	asrs	r3, r3, #3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	8a3b      	ldrh	r3, [r7, #16]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	e076      	b.n	80029d2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 80028e4:	8a3b      	ldrh	r3, [r7, #16]
 80028e6:	3307      	adds	r3, #7
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	da00      	bge.n	80028ee <DrawChar+0x76>
 80028ec:	3307      	adds	r3, #7
 80028ee:	10db      	asrs	r3, r3, #3
 80028f0:	461a      	mov	r2, r3
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fb02 f303 	mul.w	r3, r2, r3
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 80028fe:	8a3b      	ldrh	r3, [r7, #16]
 8002900:	3307      	adds	r3, #7
 8002902:	2b00      	cmp	r3, #0
 8002904:	da00      	bge.n	8002908 <DrawChar+0x90>
 8002906:	3307      	adds	r3, #7
 8002908:	10db      	asrs	r3, r3, #3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d002      	beq.n	8002914 <DrawChar+0x9c>
 800290e:	2b02      	cmp	r3, #2
 8002910:	d004      	beq.n	800291c <DrawChar+0xa4>
 8002912:	e00c      	b.n	800292e <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	617b      	str	r3, [r7, #20]
        break;
 800291a:	e016      	b.n	800294a <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	3201      	adds	r2, #1
 8002926:	7812      	ldrb	r2, [r2, #0]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
        break;
 800292c:	e00d      	b.n	800294a <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	041a      	lsls	r2, r3, #16
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	3301      	adds	r3, #1
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	4313      	orrs	r3, r2
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	3202      	adds	r2, #2
 8002942:	7812      	ldrb	r2, [r2, #0]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
        break;
 8002948:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	e036      	b.n	80029be <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8002950:	8a3a      	ldrh	r2, [r7, #16]
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	1ad2      	subs	r2, r2, r3
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	4413      	add	r3, r2
 800295a:	3b01      	subs	r3, #1
 800295c:	2201      	movs	r2, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	461a      	mov	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d012      	beq.n	8002992 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	b29a      	uxth	r2, r3
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	4413      	add	r3, r2
 8002974:	b298      	uxth	r0, r3
 8002976:	4b1b      	ldr	r3, [pc, #108]	@ (80029e4 <DrawChar+0x16c>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	491b      	ldr	r1, [pc, #108]	@ (80029e8 <DrawChar+0x170>)
 800297c:	4613      	mov	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	88bb      	ldrh	r3, [r7, #4]
 800298a:	4619      	mov	r1, r3
 800298c:	f7ff ff4e 	bl	800282c <BSP_LCD_DrawPixel>
 8002990:	e012      	b.n	80029b8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	b29a      	uxth	r2, r3
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	4413      	add	r3, r2
 800299a:	b298      	uxth	r0, r3
 800299c:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <DrawChar+0x16c>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4911      	ldr	r1, [pc, #68]	@ (80029e8 <DrawChar+0x170>)
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	3304      	adds	r3, #4
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	88bb      	ldrh	r3, [r7, #4]
 80029b2:	4619      	mov	r1, r3
 80029b4:	f7ff ff3a 	bl	800282c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	3301      	adds	r3, #1
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	8a3b      	ldrh	r3, [r7, #16]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d3c4      	bcc.n	8002950 <DrawChar+0xd8>
      }
    }
    Ypos++;
 80029c6:	88bb      	ldrh	r3, [r7, #4]
 80029c8:	3301      	adds	r3, #1
 80029ca:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	3301      	adds	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	8a7b      	ldrh	r3, [r7, #18]
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d384      	bcc.n	80028e4 <DrawChar+0x6c>
  }
}
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000518 	.word	0x20000518
 80029e8:	2000051c 	.word	0x2000051c

080029ec <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80029fa:	4b16      	ldr	r3, [pc, #88]	@ (8002a54 <FillBuffer+0x68>)
 80029fc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002a00:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002a02:	4b14      	ldr	r3, [pc, #80]	@ (8002a54 <FillBuffer+0x68>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8002a08:	4a12      	ldr	r2, [pc, #72]	@ (8002a54 <FillBuffer+0x68>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 8002a0e:	4b11      	ldr	r3, [pc, #68]	@ (8002a54 <FillBuffer+0x68>)
 8002a10:	4a11      	ldr	r2, [pc, #68]	@ (8002a58 <FillBuffer+0x6c>)
 8002a12:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8002a14:	480f      	ldr	r0, [pc, #60]	@ (8002a54 <FillBuffer+0x68>)
 8002a16:	f000 fd51 	bl	80034bc <HAL_DMA2D_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d115      	bne.n	8002a4c <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8002a20:	68f9      	ldr	r1, [r7, #12]
 8002a22:	480c      	ldr	r0, [pc, #48]	@ (8002a54 <FillBuffer+0x68>)
 8002a24:	f000 feb2 	bl	800378c <HAL_DMA2D_ConfigLayer>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10e      	bne.n	8002a4c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69f9      	ldr	r1, [r7, #28]
 8002a38:	4806      	ldr	r0, [pc, #24]	@ (8002a54 <FillBuffer+0x68>)
 8002a3a:	f000 fd92 	bl	8003562 <HAL_DMA2D_Start>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002a44:	210a      	movs	r1, #10
 8002a46:	4803      	ldr	r0, [pc, #12]	@ (8002a54 <FillBuffer+0x68>)
 8002a48:	f000 fdb6 	bl	80035b8 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	200004a8 	.word	0x200004a8
 8002a58:	4002b000 	.word	0x4002b000

08002a5c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002a60:	4b29      	ldr	r3, [pc, #164]	@ (8002b08 <BSP_SDRAM_Init+0xac>)
 8002a62:	4a2a      	ldr	r2, [pc, #168]	@ (8002b0c <BSP_SDRAM_Init+0xb0>)
 8002a64:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002a66:	4b2a      	ldr	r3, [pc, #168]	@ (8002b10 <BSP_SDRAM_Init+0xb4>)
 8002a68:	2202      	movs	r2, #2
 8002a6a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002a6c:	4b28      	ldr	r3, [pc, #160]	@ (8002b10 <BSP_SDRAM_Init+0xb4>)
 8002a6e:	2207      	movs	r2, #7
 8002a70:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002a72:	4b27      	ldr	r3, [pc, #156]	@ (8002b10 <BSP_SDRAM_Init+0xb4>)
 8002a74:	2204      	movs	r2, #4
 8002a76:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002a78:	4b25      	ldr	r3, [pc, #148]	@ (8002b10 <BSP_SDRAM_Init+0xb4>)
 8002a7a:	2207      	movs	r2, #7
 8002a7c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002a7e:	4b24      	ldr	r3, [pc, #144]	@ (8002b10 <BSP_SDRAM_Init+0xb4>)
 8002a80:	2202      	movs	r2, #2
 8002a82:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002a84:	4b22      	ldr	r3, [pc, #136]	@ (8002b10 <BSP_SDRAM_Init+0xb4>)
 8002a86:	2202      	movs	r2, #2
 8002a88:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002a8a:	4b21      	ldr	r3, [pc, #132]	@ (8002b10 <BSP_SDRAM_Init+0xb4>)
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002a90:	4b1d      	ldr	r3, [pc, #116]	@ (8002b08 <BSP_SDRAM_Init+0xac>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002a96:	4b1c      	ldr	r3, [pc, #112]	@ (8002b08 <BSP_SDRAM_Init+0xac>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b08 <BSP_SDRAM_Init+0xac>)
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002aa2:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <BSP_SDRAM_Init+0xac>)
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002aa8:	4b17      	ldr	r3, [pc, #92]	@ (8002b08 <BSP_SDRAM_Init+0xac>)
 8002aaa:	2240      	movs	r2, #64	@ 0x40
 8002aac:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002aae:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <BSP_SDRAM_Init+0xac>)
 8002ab0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002ab4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002ab6:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <BSP_SDRAM_Init+0xac>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002abc:	4b12      	ldr	r3, [pc, #72]	@ (8002b08 <BSP_SDRAM_Init+0xac>)
 8002abe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ac2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002ac4:	4b10      	ldr	r3, [pc, #64]	@ (8002b08 <BSP_SDRAM_Init+0xac>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002aca:	4b0f      	ldr	r3, [pc, #60]	@ (8002b08 <BSP_SDRAM_Init+0xac>)
 8002acc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ad0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	480c      	ldr	r0, [pc, #48]	@ (8002b08 <BSP_SDRAM_Init+0xac>)
 8002ad6:	f000 f87f 	bl	8002bd8 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002ada:	490d      	ldr	r1, [pc, #52]	@ (8002b10 <BSP_SDRAM_Init+0xb4>)
 8002adc:	480a      	ldr	r0, [pc, #40]	@ (8002b08 <BSP_SDRAM_Init+0xac>)
 8002ade:	f003 fca5 	bl	800642c <HAL_SDRAM_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <BSP_SDRAM_Init+0xb8>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e002      	b.n	8002af6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002af0:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <BSP_SDRAM_Init+0xb8>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002af6:	f240 506a 	movw	r0, #1386	@ 0x56a
 8002afa:	f000 f80d 	bl	8002b18 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8002afe:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <BSP_SDRAM_Init+0xb8>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000538 	.word	0x20000538
 8002b0c:	a0000140 	.word	0xa0000140
 8002b10:	2000056c 	.word	0x2000056c
 8002b14:	2000007c 	.word	0x2000007c

08002b18 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002b24:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002b2a:	4b29      	ldr	r3, [pc, #164]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002b30:	4b27      	ldr	r3, [pc, #156]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002b36:	4b26      	ldr	r3, [pc, #152]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002b3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b40:	4923      	ldr	r1, [pc, #140]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b42:	4824      	ldr	r0, [pc, #144]	@ (8002bd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b44:	f003 fcb0 	bl	80064a8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002b48:	2001      	movs	r0, #1
 8002b4a:	f000 f9c3 	bl	8002ed4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002b4e:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b50:	2202      	movs	r2, #2
 8002b52:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002b54:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b56:	2208      	movs	r2, #8
 8002b58:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002b60:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002b66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b6a:	4919      	ldr	r1, [pc, #100]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b6c:	4819      	ldr	r0, [pc, #100]	@ (8002bd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b6e:	f003 fc9b 	bl	80064a8 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002b72:	4b17      	ldr	r3, [pc, #92]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b74:	2203      	movs	r2, #3
 8002b76:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002b78:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002b7e:	4b14      	ldr	r3, [pc, #80]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b80:	2204      	movs	r2, #4
 8002b82:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002b84:	4b12      	ldr	r3, [pc, #72]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002b8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b8e:	4910      	ldr	r1, [pc, #64]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b90:	4810      	ldr	r0, [pc, #64]	@ (8002bd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b92:	f003 fc89 	bl	80064a8 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002b96:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8002b9a:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002ba8:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4a07      	ldr	r2, [pc, #28]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bb2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002bb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bb8:	4905      	ldr	r1, [pc, #20]	@ (8002bd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bba:	4806      	ldr	r0, [pc, #24]	@ (8002bd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002bbc:	f003 fc74 	bl	80064a8 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4804      	ldr	r0, [pc, #16]	@ (8002bd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002bc4:	f003 fca5 	bl	8006512 <HAL_SDRAM_ProgramRefreshRate>
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000588 	.word	0x20000588
 8002bd4:	20000538 	.word	0x20000538

08002bd8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b090      	sub	sp, #64	@ 0x40
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80ec 	beq.w	8002dc2 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bee:	4b77      	ldr	r3, [pc, #476]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf2:	4a76      	ldr	r2, [pc, #472]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6393      	str	r3, [r2, #56]	@ 0x38
 8002bfa:	4b74      	ldr	r3, [pc, #464]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c0a:	4b70      	ldr	r3, [pc, #448]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	4a6f      	ldr	r2, [pc, #444]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c16:	4b6d      	ldr	r3, [pc, #436]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
 8002c26:	4b69      	ldr	r3, [pc, #420]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	4a68      	ldr	r2, [pc, #416]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c32:	4b66      	ldr	r3, [pc, #408]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	623b      	str	r3, [r7, #32]
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	4b62      	ldr	r3, [pc, #392]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	4a61      	ldr	r2, [pc, #388]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c48:	f043 0304 	orr.w	r3, r3, #4
 8002c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	4a5a      	ldr	r2, [pc, #360]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c64:	f043 0308 	orr.w	r3, r3, #8
 8002c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6a:	4b58      	ldr	r3, [pc, #352]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	4b54      	ldr	r3, [pc, #336]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	4a53      	ldr	r2, [pc, #332]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c80:	f043 0310 	orr.w	r3, r3, #16
 8002c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c86:	4b51      	ldr	r3, [pc, #324]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	4b4d      	ldr	r3, [pc, #308]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	4a4c      	ldr	r2, [pc, #304]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002c9c:	f043 0320 	orr.w	r3, r3, #32
 8002ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	4b46      	ldr	r3, [pc, #280]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	4a45      	ldr	r2, [pc, #276]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cbe:	4b43      	ldr	r3, [pc, #268]	@ (8002dcc <BSP_SDRAM_MspInit+0x1f4>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002cd6:	230c      	movs	r3, #12
 8002cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002cda:	2360      	movs	r3, #96	@ 0x60
 8002cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002cde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	483a      	ldr	r0, [pc, #232]	@ (8002dd0 <BSP_SDRAM_MspInit+0x1f8>)
 8002ce6:	f000 fe7f 	bl	80039e8 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8002cea:	2301      	movs	r3, #1
 8002cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002cee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4837      	ldr	r0, [pc, #220]	@ (8002dd4 <BSP_SDRAM_MspInit+0x1fc>)
 8002cf6:	f000 fe77 	bl	80039e8 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002cfa:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002d00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d04:	4619      	mov	r1, r3
 8002d06:	4834      	ldr	r0, [pc, #208]	@ (8002dd8 <BSP_SDRAM_MspInit+0x200>)
 8002d08:	f000 fe6e 	bl	80039e8 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002d0c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002d12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d16:	4619      	mov	r1, r3
 8002d18:	4830      	ldr	r0, [pc, #192]	@ (8002ddc <BSP_SDRAM_MspInit+0x204>)
 8002d1a:	f000 fe65 	bl	80039e8 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8002d1e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d28:	4619      	mov	r1, r3
 8002d2a:	482d      	ldr	r0, [pc, #180]	@ (8002de0 <BSP_SDRAM_MspInit+0x208>)
 8002d2c:	f000 fe5c 	bl	80039e8 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002d30:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002d36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4829      	ldr	r0, [pc, #164]	@ (8002de4 <BSP_SDRAM_MspInit+0x20c>)
 8002d3e:	f000 fe53 	bl	80039e8 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002d42:	4b29      	ldr	r3, [pc, #164]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002d48:	4b27      	ldr	r3, [pc, #156]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002d4a:	2280      	movs	r2, #128	@ 0x80
 8002d4c:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002d4e:	4b26      	ldr	r3, [pc, #152]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d54:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002d56:	4b24      	ldr	r3, [pc, #144]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002d58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d5c:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d5e:	4b22      	ldr	r3, [pc, #136]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002d60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d64:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002d66:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002d68:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d6c:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002d74:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002d76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d7a:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002d82:	4b19      	ldr	r3, [pc, #100]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002d84:	2203      	movs	r2, #3
 8002d86:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002d88:	4b17      	ldr	r3, [pc, #92]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002d8e:	4b16      	ldr	r3, [pc, #88]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002d94:	4b14      	ldr	r3, [pc, #80]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002d96:	4a15      	ldr	r2, [pc, #84]	@ (8002dec <BSP_SDRAM_MspInit+0x214>)
 8002d98:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a12      	ldr	r2, [pc, #72]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002da0:	4a11      	ldr	r2, [pc, #68]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8002da6:	4810      	ldr	r0, [pc, #64]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002da8:	f000 fa78 	bl	800329c <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8002dac:	480e      	ldr	r0, [pc, #56]	@ (8002de8 <BSP_SDRAM_MspInit+0x210>)
 8002dae:	f000 f9c7 	bl	8003140 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	210f      	movs	r1, #15
 8002db6:	2038      	movs	r0, #56	@ 0x38
 8002db8:	f000 f98b 	bl	80030d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002dbc:	2038      	movs	r0, #56	@ 0x38
 8002dbe:	f000 f9a4 	bl	800310a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002dc2:	bf00      	nop
 8002dc4:	3740      	adds	r7, #64	@ 0x40
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40020400 	.word	0x40020400
 8002dd4:	40020800 	.word	0x40020800
 8002dd8:	40020c00 	.word	0x40020c00
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40021400 	.word	0x40021400
 8002de4:	40021800 	.word	0x40021800
 8002de8:	20000598 	.word	0x20000598
 8002dec:	40026410 	.word	0x40026410

08002df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002df4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e30 <HAL_Init+0x40>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e30 <HAL_Init+0x40>)
 8002dfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <HAL_Init+0x40>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a0a      	ldr	r2, [pc, #40]	@ (8002e30 <HAL_Init+0x40>)
 8002e06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e0c:	4b08      	ldr	r3, [pc, #32]	@ (8002e30 <HAL_Init+0x40>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a07      	ldr	r2, [pc, #28]	@ (8002e30 <HAL_Init+0x40>)
 8002e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e18:	2003      	movs	r0, #3
 8002e1a:	f000 f94f 	bl	80030bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e1e:	200f      	movs	r0, #15
 8002e20:	f000 f808 	bl	8002e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e24:	f7fe f9ae 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023c00 	.word	0x40023c00

08002e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e3c:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <HAL_InitTick+0x54>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <HAL_InitTick+0x58>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	4619      	mov	r1, r3
 8002e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f967 	bl	8003126 <HAL_SYSTICK_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e00e      	b.n	8002e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b0f      	cmp	r3, #15
 8002e66:	d80a      	bhi.n	8002e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e70:	f000 f92f 	bl	80030d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e74:	4a06      	ldr	r2, [pc, #24]	@ (8002e90 <HAL_InitTick+0x5c>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e000      	b.n	8002e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	20000084 	.word	0x20000084
 8002e90:	20000080 	.word	0x20000080

08002e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e98:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <HAL_IncTick+0x20>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <HAL_IncTick+0x24>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a04      	ldr	r2, [pc, #16]	@ (8002eb8 <HAL_IncTick+0x24>)
 8002ea6:	6013      	str	r3, [r2, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000084 	.word	0x20000084
 8002eb8:	200005f8 	.word	0x200005f8

08002ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec0:	4b03      	ldr	r3, [pc, #12]	@ (8002ed0 <HAL_GetTick+0x14>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	200005f8 	.word	0x200005f8

08002ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff ffee 	bl	8002ebc <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d005      	beq.n	8002efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eee:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <HAL_Delay+0x44>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002efa:	bf00      	nop
 8002efc:	f7ff ffde 	bl	8002ebc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d8f7      	bhi.n	8002efc <HAL_Delay+0x28>
  {
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000084 	.word	0x20000084

08002f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <__NVIC_SetPriorityGrouping+0x44>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4e:	4a04      	ldr	r2, [pc, #16]	@ (8002f60 <__NVIC_SetPriorityGrouping+0x44>)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	60d3      	str	r3, [r2, #12]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f68:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <__NVIC_GetPriorityGrouping+0x18>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	0a1b      	lsrs	r3, r3, #8
 8002f6e:	f003 0307 	and.w	r3, r3, #7
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	db0b      	blt.n	8002faa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	4907      	ldr	r1, [pc, #28]	@ (8002fb8 <__NVIC_EnableIRQ+0x38>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e000e100 	.word	0xe000e100

08002fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	6039      	str	r1, [r7, #0]
 8002fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	db0a      	blt.n	8002fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	490c      	ldr	r1, [pc, #48]	@ (8003008 <__NVIC_SetPriority+0x4c>)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	0112      	lsls	r2, r2, #4
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	440b      	add	r3, r1
 8002fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe4:	e00a      	b.n	8002ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	4908      	ldr	r1, [pc, #32]	@ (800300c <__NVIC_SetPriority+0x50>)
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	3b04      	subs	r3, #4
 8002ff4:	0112      	lsls	r2, r2, #4
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	761a      	strb	r2, [r3, #24]
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000e100 	.word	0xe000e100
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003010:	b480      	push	{r7}
 8003012:	b089      	sub	sp, #36	@ 0x24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f1c3 0307 	rsb	r3, r3, #7
 800302a:	2b04      	cmp	r3, #4
 800302c:	bf28      	it	cs
 800302e:	2304      	movcs	r3, #4
 8003030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3304      	adds	r3, #4
 8003036:	2b06      	cmp	r3, #6
 8003038:	d902      	bls.n	8003040 <NVIC_EncodePriority+0x30>
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3b03      	subs	r3, #3
 800303e:	e000      	b.n	8003042 <NVIC_EncodePriority+0x32>
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003044:	f04f 32ff 	mov.w	r2, #4294967295
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43da      	mvns	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	401a      	ands	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003058:	f04f 31ff 	mov.w	r1, #4294967295
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fa01 f303 	lsl.w	r3, r1, r3
 8003062:	43d9      	mvns	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003068:	4313      	orrs	r3, r2
         );
}
 800306a:	4618      	mov	r0, r3
 800306c:	3724      	adds	r7, #36	@ 0x24
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3b01      	subs	r3, #1
 8003084:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003088:	d301      	bcc.n	800308e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800308a:	2301      	movs	r3, #1
 800308c:	e00f      	b.n	80030ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800308e:	4a0a      	ldr	r2, [pc, #40]	@ (80030b8 <SysTick_Config+0x40>)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3b01      	subs	r3, #1
 8003094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003096:	210f      	movs	r1, #15
 8003098:	f04f 30ff 	mov.w	r0, #4294967295
 800309c:	f7ff ff8e 	bl	8002fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a0:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <SysTick_Config+0x40>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030a6:	4b04      	ldr	r3, [pc, #16]	@ (80030b8 <SysTick_Config+0x40>)
 80030a8:	2207      	movs	r2, #7
 80030aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	e000e010 	.word	0xe000e010

080030bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff ff29 	bl	8002f1c <__NVIC_SetPriorityGrouping>
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030e4:	f7ff ff3e 	bl	8002f64 <__NVIC_GetPriorityGrouping>
 80030e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	6978      	ldr	r0, [r7, #20]
 80030f0:	f7ff ff8e 	bl	8003010 <NVIC_EncodePriority>
 80030f4:	4602      	mov	r2, r0
 80030f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff5d 	bl	8002fbc <__NVIC_SetPriority>
}
 8003102:	bf00      	nop
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	4603      	mov	r3, r0
 8003112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff31 	bl	8002f80 <__NVIC_EnableIRQ>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ffa2 	bl	8003078 <SysTick_Config>
 8003134:	4603      	mov	r3, r0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800314c:	f7ff feb6 	bl	8002ebc <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e099      	b.n	8003290 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800317c:	e00f      	b.n	800319e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800317e:	f7ff fe9d 	bl	8002ebc <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b05      	cmp	r3, #5
 800318a:	d908      	bls.n	800319e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2203      	movs	r2, #3
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e078      	b.n	8003290 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e8      	bne.n	800317e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4b38      	ldr	r3, [pc, #224]	@ (8003298 <HAL_DMA_Init+0x158>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d107      	bne.n	8003208 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	4313      	orrs	r3, r2
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f023 0307 	bic.w	r3, r3, #7
 800321e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	2b04      	cmp	r3, #4
 8003230:	d117      	bne.n	8003262 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00e      	beq.n	8003262 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f8bd 	bl	80033c4 <DMA_CheckFifoParam>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800325e:	2301      	movs	r3, #1
 8003260:	e016      	b.n	8003290 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f874 	bl	8003358 <DMA_CalcBaseAndBitshift>
 8003270:	4603      	mov	r3, r0
 8003272:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003278:	223f      	movs	r2, #63	@ 0x3f
 800327a:	409a      	lsls	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	f010803f 	.word	0xf010803f

0800329c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e050      	b.n	8003350 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d101      	bne.n	80032be <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
 80032bc:	e048      	b.n	8003350 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2200      	movs	r2, #0
 80032dc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2200      	movs	r2, #0
 80032e4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2200      	movs	r2, #0
 80032ec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2200      	movs	r2, #0
 80032f4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2221      	movs	r2, #33	@ 0x21
 80032fc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f82a 	bl	8003358 <DMA_CalcBaseAndBitshift>
 8003304:	4603      	mov	r3, r0
 8003306:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003330:	223f      	movs	r2, #63	@ 0x3f
 8003332:	409a      	lsls	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	3b10      	subs	r3, #16
 8003368:	4a14      	ldr	r2, [pc, #80]	@ (80033bc <DMA_CalcBaseAndBitshift+0x64>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003372:	4a13      	ldr	r2, [pc, #76]	@ (80033c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d909      	bls.n	800339a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800338e:	f023 0303 	bic.w	r3, r3, #3
 8003392:	1d1a      	adds	r2, r3, #4
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	659a      	str	r2, [r3, #88]	@ 0x58
 8003398:	e007      	b.n	80033aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	aaaaaaab 	.word	0xaaaaaaab
 80033c0:	0800fc1c 	.word	0x0800fc1c

080033c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11f      	bne.n	800341e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d856      	bhi.n	8003492 <DMA_CheckFifoParam+0xce>
 80033e4:	a201      	add	r2, pc, #4	@ (adr r2, 80033ec <DMA_CheckFifoParam+0x28>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	080033fd 	.word	0x080033fd
 80033f0:	0800340f 	.word	0x0800340f
 80033f4:	080033fd 	.word	0x080033fd
 80033f8:	08003493 	.word	0x08003493
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d046      	beq.n	8003496 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800340c:	e043      	b.n	8003496 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003412:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003416:	d140      	bne.n	800349a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800341c:	e03d      	b.n	800349a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003426:	d121      	bne.n	800346c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b03      	cmp	r3, #3
 800342c:	d837      	bhi.n	800349e <DMA_CheckFifoParam+0xda>
 800342e:	a201      	add	r2, pc, #4	@ (adr r2, 8003434 <DMA_CheckFifoParam+0x70>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003445 	.word	0x08003445
 8003438:	0800344b 	.word	0x0800344b
 800343c:	08003445 	.word	0x08003445
 8003440:	0800345d 	.word	0x0800345d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
      break;
 8003448:	e030      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d025      	beq.n	80034a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345a:	e022      	b.n	80034a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003460:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003464:	d11f      	bne.n	80034a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800346a:	e01c      	b.n	80034a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d903      	bls.n	800347a <DMA_CheckFifoParam+0xb6>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d003      	beq.n	8003480 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003478:	e018      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
      break;
 800347e:	e015      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00e      	beq.n	80034aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      break;
 8003490:	e00b      	b.n	80034aa <DMA_CheckFifoParam+0xe6>
      break;
 8003492:	bf00      	nop
 8003494:	e00a      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 8003496:	bf00      	nop
 8003498:	e008      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 800349a:	bf00      	nop
 800349c:	e006      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 800349e:	bf00      	nop
 80034a0:	e004      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 80034a2:	bf00      	nop
 80034a4:	e002      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;   
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 80034aa:	bf00      	nop
    }
  } 
  
  return status; 
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop

080034bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e03b      	b.n	8003546 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f833 	bl	800354e <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350c:	f023 0107 	bic.w	r1, r3, #7
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003526:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68d1      	ldr	r1, [r2, #12]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6812      	ldr	r2, [r2, #0]
 8003532:	430b      	orrs	r3, r1
 8003534:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af02      	add	r7, sp, #8
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
 800356e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_DMA2D_Start+0x1c>
 800357a:	2302      	movs	r3, #2
 800357c:	e018      	b.n	80035b0 <HAL_DMA2D_Start+0x4e>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2202      	movs	r2, #2
 800358a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f989 	bl	80038b0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0201 	orr.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d056      	beq.n	8003682 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80035d4:	f7ff fc72 	bl	8002ebc <HAL_GetTick>
 80035d8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80035da:	e04b      	b.n	8003674 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d023      	beq.n	8003636 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fc:	f043 0202 	orr.w	r2, r3, #2
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003612:	f043 0201 	orr.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2221      	movs	r2, #33	@ 0x21
 8003620:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2204      	movs	r2, #4
 8003626:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e0a5      	b.n	8003782 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d01a      	beq.n	8003674 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800363e:	f7ff fc3d 	bl	8002ebc <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d302      	bcc.n	8003654 <HAL_DMA2D_PollForTransfer+0x9c>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10f      	bne.n	8003674 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2203      	movs	r2, #3
 8003664:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e086      	b.n	8003782 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0ac      	beq.n	80035dc <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d061      	beq.n	8003768 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80036a4:	f7ff fc0a 	bl	8002ebc <HAL_GetTick>
 80036a8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80036aa:	e056      	b.n	800375a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d02e      	beq.n	800371c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036cc:	f043 0204 	orr.w	r2, r3, #4
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e2:	f043 0202 	orr.w	r2, r3, #2
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2229      	movs	r2, #41	@ 0x29
 8003706:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2204      	movs	r2, #4
 800370c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e032      	b.n	8003782 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003722:	d01a      	beq.n	800375a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003724:	f7ff fbca 	bl	8002ebc <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d302      	bcc.n	800373a <HAL_DMA2D_PollForTransfer+0x182>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10f      	bne.n	800375a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373e:	f043 0220 	orr.w	r2, r3, #32
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2203      	movs	r2, #3
 800374a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e013      	b.n	8003782 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0a1      	beq.n	80036ac <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2212      	movs	r2, #18
 800376e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_DMA2D_ConfigLayer+0x20>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e079      	b.n	80038a0 <HAL_DMA2D_ConfigLayer+0x114>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	3318      	adds	r3, #24
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	4413      	add	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	041b      	lsls	r3, r3, #16
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80037d6:	4b35      	ldr	r3, [pc, #212]	@ (80038ac <HAL_DMA2D_ConfigLayer+0x120>)
 80037d8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b0a      	cmp	r3, #10
 80037e0:	d003      	beq.n	80037ea <HAL_DMA2D_ConfigLayer+0x5e>
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b09      	cmp	r3, #9
 80037e8:	d107      	bne.n	80037fa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e005      	b.n	8003806 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	061b      	lsls	r3, r3, #24
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d120      	bne.n	800384e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	43db      	mvns	r3, r3
 8003816:	ea02 0103 	and.w	r1, r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	430a      	orrs	r2, r1
 8003822:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b0a      	cmp	r3, #10
 8003834:	d003      	beq.n	800383e <HAL_DMA2D_ConfigLayer+0xb2>
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b09      	cmp	r3, #9
 800383c:	d127      	bne.n	800388e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800384a:	629a      	str	r2, [r3, #40]	@ 0x28
 800384c:	e01f      	b.n	800388e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	43db      	mvns	r3, r3
 8003858:	ea02 0103 	and.w	r1, r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	430a      	orrs	r2, r1
 8003864:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b0a      	cmp	r3, #10
 8003876:	d003      	beq.n	8003880 <HAL_DMA2D_ConfigLayer+0xf4>
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b09      	cmp	r3, #9
 800387e:	d106      	bne.n	800388e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800388c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	371c      	adds	r7, #28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	ff03000f 	.word	0xff03000f

080038b0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b08b      	sub	sp, #44	@ 0x2c
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	041a      	lsls	r2, r3, #16
 80038cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ce:	431a      	orrs	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038e8:	d174      	bne.n	80039d4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80038f0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80038f8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003900:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d108      	bne.n	8003922 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	431a      	orrs	r2, r3
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	4313      	orrs	r3, r2
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003920:	e053      	b.n	80039ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d106      	bne.n	8003938 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	4313      	orrs	r3, r2
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
 8003936:	e048      	b.n	80039ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d111      	bne.n	8003964 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	0cdb      	lsrs	r3, r3, #19
 8003944:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	0a9b      	lsrs	r3, r3, #10
 800394a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	08db      	lsrs	r3, r3, #3
 8003950:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	02db      	lsls	r3, r3, #11
 800395a:	4313      	orrs	r3, r2
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
 8003962:	e032      	b.n	80039ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b03      	cmp	r3, #3
 800396a:	d117      	bne.n	800399c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	0fdb      	lsrs	r3, r3, #31
 8003970:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	0cdb      	lsrs	r3, r3, #19
 8003976:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	0adb      	lsrs	r3, r3, #11
 800397c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	08db      	lsrs	r3, r3, #3
 8003982:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	029b      	lsls	r3, r3, #10
 800398c:	431a      	orrs	r2, r3
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	03db      	lsls	r3, r3, #15
 8003992:	4313      	orrs	r3, r2
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	627b      	str	r3, [r7, #36]	@ 0x24
 800399a:	e016      	b.n	80039ca <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	0f1b      	lsrs	r3, r3, #28
 80039a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	0d1b      	lsrs	r3, r3, #20
 80039a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	0b1b      	lsrs	r3, r3, #12
 80039ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	011a      	lsls	r2, r3, #4
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	431a      	orrs	r2, r3
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	031b      	lsls	r3, r3, #12
 80039c2:	4313      	orrs	r3, r2
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d0:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80039d2:	e003      	b.n	80039dc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	60da      	str	r2, [r3, #12]
}
 80039dc:	bf00      	nop
 80039de:	372c      	adds	r7, #44	@ 0x2c
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	@ 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	e177      	b.n	8003cf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a04:	2201      	movs	r2, #1
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	f040 8166 	bne.w	8003cee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d005      	beq.n	8003a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d130      	bne.n	8003a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	2203      	movs	r2, #3
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a70:	2201      	movs	r2, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 0201 	and.w	r2, r3, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d017      	beq.n	8003ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d123      	bne.n	8003b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	08da      	lsrs	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3208      	adds	r2, #8
 8003aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	220f      	movs	r2, #15
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	08da      	lsrs	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3208      	adds	r2, #8
 8003b26:	69b9      	ldr	r1, [r7, #24]
 8003b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	2203      	movs	r2, #3
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0203 	and.w	r2, r3, #3
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80c0 	beq.w	8003cee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	4b66      	ldr	r3, [pc, #408]	@ (8003d0c <HAL_GPIO_Init+0x324>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	4a65      	ldr	r2, [pc, #404]	@ (8003d0c <HAL_GPIO_Init+0x324>)
 8003b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b7e:	4b63      	ldr	r3, [pc, #396]	@ (8003d0c <HAL_GPIO_Init+0x324>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8a:	4a61      	ldr	r2, [pc, #388]	@ (8003d10 <HAL_GPIO_Init+0x328>)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	089b      	lsrs	r3, r3, #2
 8003b90:	3302      	adds	r3, #2
 8003b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a58      	ldr	r2, [pc, #352]	@ (8003d14 <HAL_GPIO_Init+0x32c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d037      	beq.n	8003c26 <HAL_GPIO_Init+0x23e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a57      	ldr	r2, [pc, #348]	@ (8003d18 <HAL_GPIO_Init+0x330>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d031      	beq.n	8003c22 <HAL_GPIO_Init+0x23a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a56      	ldr	r2, [pc, #344]	@ (8003d1c <HAL_GPIO_Init+0x334>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d02b      	beq.n	8003c1e <HAL_GPIO_Init+0x236>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a55      	ldr	r2, [pc, #340]	@ (8003d20 <HAL_GPIO_Init+0x338>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d025      	beq.n	8003c1a <HAL_GPIO_Init+0x232>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a54      	ldr	r2, [pc, #336]	@ (8003d24 <HAL_GPIO_Init+0x33c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01f      	beq.n	8003c16 <HAL_GPIO_Init+0x22e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a53      	ldr	r2, [pc, #332]	@ (8003d28 <HAL_GPIO_Init+0x340>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d019      	beq.n	8003c12 <HAL_GPIO_Init+0x22a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a52      	ldr	r2, [pc, #328]	@ (8003d2c <HAL_GPIO_Init+0x344>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_GPIO_Init+0x226>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a51      	ldr	r2, [pc, #324]	@ (8003d30 <HAL_GPIO_Init+0x348>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00d      	beq.n	8003c0a <HAL_GPIO_Init+0x222>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a50      	ldr	r2, [pc, #320]	@ (8003d34 <HAL_GPIO_Init+0x34c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <HAL_GPIO_Init+0x21e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8003d38 <HAL_GPIO_Init+0x350>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_GPIO_Init+0x21a>
 8003bfe:	2309      	movs	r3, #9
 8003c00:	e012      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c02:	230a      	movs	r3, #10
 8003c04:	e010      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c06:	2308      	movs	r3, #8
 8003c08:	e00e      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	e00c      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c0e:	2306      	movs	r3, #6
 8003c10:	e00a      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c12:	2305      	movs	r3, #5
 8003c14:	e008      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c16:	2304      	movs	r3, #4
 8003c18:	e006      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e004      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e002      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c26:	2300      	movs	r3, #0
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	f002 0203 	and.w	r2, r2, #3
 8003c2e:	0092      	lsls	r2, r2, #2
 8003c30:	4093      	lsls	r3, r2
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c38:	4935      	ldr	r1, [pc, #212]	@ (8003d10 <HAL_GPIO_Init+0x328>)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	3302      	adds	r3, #2
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c46:	4b3d      	ldr	r3, [pc, #244]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c6a:	4a34      	ldr	r2, [pc, #208]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c70:	4b32      	ldr	r3, [pc, #200]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c94:	4a29      	ldr	r2, [pc, #164]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c9a:	4b28      	ldr	r3, [pc, #160]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ce8:	4a14      	ldr	r2, [pc, #80]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2b0f      	cmp	r3, #15
 8003cf8:	f67f ae84 	bls.w	8003a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	3724      	adds	r7, #36	@ 0x24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40013800 	.word	0x40013800
 8003d14:	40020000 	.word	0x40020000
 8003d18:	40020400 	.word	0x40020400
 8003d1c:	40020800 	.word	0x40020800
 8003d20:	40020c00 	.word	0x40020c00
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40021400 	.word	0x40021400
 8003d2c:	40021800 	.word	0x40021800
 8003d30:	40021c00 	.word	0x40021c00
 8003d34:	40022000 	.word	0x40022000
 8003d38:	40022400 	.word	0x40022400
 8003d3c:	40013c00 	.word	0x40013c00

08003d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	807b      	strh	r3, [r7, #2]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d50:	787b      	ldrb	r3, [r7, #1]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d56:	887a      	ldrh	r2, [r7, #2]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d5c:	e003      	b.n	8003d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d5e:	887b      	ldrh	r3, [r7, #2]
 8003d60:	041a      	lsls	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	619a      	str	r2, [r3, #24]
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e0bf      	b.n	8003f06 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f8ba 	bl	8003f14 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003db6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6999      	ldr	r1, [r3, #24]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003dcc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6899      	ldr	r1, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	4b4a      	ldr	r3, [pc, #296]	@ (8003f10 <HAL_LTDC_Init+0x19c>)
 8003de8:	400b      	ands	r3, r1
 8003dea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	041b      	lsls	r3, r3, #16
 8003df2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6899      	ldr	r1, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68d9      	ldr	r1, [r3, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4b3e      	ldr	r3, [pc, #248]	@ (8003f10 <HAL_LTDC_Init+0x19c>)
 8003e16:	400b      	ands	r3, r1
 8003e18:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	041b      	lsls	r3, r3, #16
 8003e20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68d9      	ldr	r1, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1a      	ldr	r2, [r3, #32]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6919      	ldr	r1, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b33      	ldr	r3, [pc, #204]	@ (8003f10 <HAL_LTDC_Init+0x19c>)
 8003e44:	400b      	ands	r3, r1
 8003e46:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6919      	ldr	r1, [r3, #16]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6959      	ldr	r1, [r3, #20]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b27      	ldr	r3, [pc, #156]	@ (8003f10 <HAL_LTDC_Init+0x19c>)
 8003e72:	400b      	ands	r3, r1
 8003e74:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	041b      	lsls	r3, r3, #16
 8003e7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6959      	ldr	r1, [r3, #20]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0206 	orr.w	r2, r2, #6
 8003ee2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	f000f800 	.word	0xf000f800

08003f14 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f28:	b5b0      	push	{r4, r5, r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_LTDC_ConfigLayer+0x1a>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e02c      	b.n	8003f9c <HAL_LTDC_ConfigLayer+0x74>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2134      	movs	r1, #52	@ 0x34
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4614      	mov	r4, r2
 8003f66:	461d      	mov	r5, r3
 8003f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f74:	682b      	ldr	r3, [r5, #0]
 8003f76:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f83b 	bl	8003ff8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2201      	movs	r2, #1
 8003f88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bdb0      	pop	{r4, r5, r7, pc}

08003fa4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_LTDC_EnableDither+0x16>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e016      	b.n	8003fe8 <HAL_LTDC_EnableDither+0x44>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003fca:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff4 <HAL_LTDC_EnableDither+0x50>)
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	4a09      	ldr	r2, [pc, #36]	@ (8003ff4 <HAL_LTDC_EnableDither+0x50>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40016800 	.word	0x40016800

08003ff8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	@ 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	0c1b      	lsrs	r3, r3, #16
 8004010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004014:	4413      	add	r3, r2
 8004016:	041b      	lsls	r3, r3, #16
 8004018:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	01db      	lsls	r3, r3, #7
 8004024:	4413      	add	r3, r2
 8004026:	3384      	adds	r3, #132	@ 0x84
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	4611      	mov	r1, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	01d2      	lsls	r2, r2, #7
 8004034:	440a      	add	r2, r1
 8004036:	3284      	adds	r2, #132	@ 0x84
 8004038:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800403c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	0c1b      	lsrs	r3, r3, #16
 800404a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800404e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004050:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4619      	mov	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	01db      	lsls	r3, r3, #7
 800405c:	440b      	add	r3, r1
 800405e:	3384      	adds	r3, #132	@ 0x84
 8004060:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004066:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004076:	4413      	add	r3, r2
 8004078:	041b      	lsls	r3, r3, #16
 800407a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	01db      	lsls	r3, r3, #7
 8004086:	4413      	add	r3, r2
 8004088:	3384      	adds	r3, #132	@ 0x84
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	4611      	mov	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	01d2      	lsls	r2, r2, #7
 8004096:	440a      	add	r2, r1
 8004098:	3284      	adds	r2, #132	@ 0x84
 800409a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800409e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040ae:	4413      	add	r3, r2
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4619      	mov	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	01db      	lsls	r3, r3, #7
 80040bc:	440b      	add	r3, r1
 80040be:	3384      	adds	r3, #132	@ 0x84
 80040c0:	4619      	mov	r1, r3
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	01db      	lsls	r3, r3, #7
 80040d2:	4413      	add	r3, r2
 80040d4:	3384      	adds	r3, #132	@ 0x84
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	4611      	mov	r1, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	01d2      	lsls	r2, r2, #7
 80040e2:	440a      	add	r2, r1
 80040e4:	3284      	adds	r2, #132	@ 0x84
 80040e6:	f023 0307 	bic.w	r3, r3, #7
 80040ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	01db      	lsls	r3, r3, #7
 80040f6:	4413      	add	r3, r2
 80040f8:	3384      	adds	r3, #132	@ 0x84
 80040fa:	461a      	mov	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004112:	041b      	lsls	r3, r3, #16
 8004114:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	061b      	lsls	r3, r3, #24
 800411c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	01db      	lsls	r3, r3, #7
 8004128:	4413      	add	r3, r2
 800412a:	3384      	adds	r3, #132	@ 0x84
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	01db      	lsls	r3, r3, #7
 8004138:	4413      	add	r3, r2
 800413a:	3384      	adds	r3, #132	@ 0x84
 800413c:	461a      	mov	r2, r3
 800413e:	2300      	movs	r3, #0
 8004140:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004148:	461a      	mov	r2, r3
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	431a      	orrs	r2, r3
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4619      	mov	r1, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	01db      	lsls	r3, r3, #7
 800415c:	440b      	add	r3, r1
 800415e:	3384      	adds	r3, #132	@ 0x84
 8004160:	4619      	mov	r1, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	01db      	lsls	r3, r3, #7
 8004172:	4413      	add	r3, r2
 8004174:	3384      	adds	r3, #132	@ 0x84
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	4611      	mov	r1, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	01d2      	lsls	r2, r2, #7
 8004182:	440a      	add	r2, r1
 8004184:	3284      	adds	r2, #132	@ 0x84
 8004186:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800418a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	01db      	lsls	r3, r3, #7
 8004196:	4413      	add	r3, r2
 8004198:	3384      	adds	r3, #132	@ 0x84
 800419a:	461a      	mov	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	01db      	lsls	r3, r3, #7
 80041ac:	4413      	add	r3, r2
 80041ae:	3384      	adds	r3, #132	@ 0x84
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	4611      	mov	r1, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	01d2      	lsls	r2, r2, #7
 80041bc:	440a      	add	r2, r1
 80041be:	3284      	adds	r2, #132	@ 0x84
 80041c0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80041c4:	f023 0307 	bic.w	r3, r3, #7
 80041c8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	68f9      	ldr	r1, [r7, #12]
 80041d4:	6809      	ldr	r1, [r1, #0]
 80041d6:	4608      	mov	r0, r1
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	01c9      	lsls	r1, r1, #7
 80041dc:	4401      	add	r1, r0
 80041de:	3184      	adds	r1, #132	@ 0x84
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	01db      	lsls	r3, r3, #7
 80041ee:	4413      	add	r3, r2
 80041f0:	3384      	adds	r3, #132	@ 0x84
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	01db      	lsls	r3, r3, #7
 80041fe:	4413      	add	r3, r2
 8004200:	3384      	adds	r3, #132	@ 0x84
 8004202:	461a      	mov	r2, r3
 8004204:	2300      	movs	r3, #0
 8004206:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	01db      	lsls	r3, r3, #7
 8004212:	4413      	add	r3, r2
 8004214:	3384      	adds	r3, #132	@ 0x84
 8004216:	461a      	mov	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004226:	2304      	movs	r3, #4
 8004228:	61fb      	str	r3, [r7, #28]
 800422a:	e01b      	b.n	8004264 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d102      	bne.n	800423a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004234:	2303      	movs	r3, #3
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	e014      	b.n	8004264 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b04      	cmp	r3, #4
 8004240:	d00b      	beq.n	800425a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004246:	2b02      	cmp	r3, #2
 8004248:	d007      	beq.n	800425a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800424e:	2b03      	cmp	r3, #3
 8004250:	d003      	beq.n	800425a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004256:	2b07      	cmp	r3, #7
 8004258:	d102      	bne.n	8004260 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800425a:	2302      	movs	r3, #2
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	e001      	b.n	8004264 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004260:	2301      	movs	r3, #1
 8004262:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	01db      	lsls	r3, r3, #7
 800426e:	4413      	add	r3, r2
 8004270:	3384      	adds	r3, #132	@ 0x84
 8004272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	4611      	mov	r1, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	01d2      	lsls	r2, r2, #7
 800427e:	440a      	add	r2, r1
 8004280:	3284      	adds	r2, #132	@ 0x84
 8004282:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004286:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	fb02 f303 	mul.w	r3, r2, r3
 8004292:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	6859      	ldr	r1, [r3, #4]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	1acb      	subs	r3, r1, r3
 800429e:	69f9      	ldr	r1, [r7, #28]
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80042a6:	68f9      	ldr	r1, [r7, #12]
 80042a8:	6809      	ldr	r1, [r1, #0]
 80042aa:	4608      	mov	r0, r1
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	01c9      	lsls	r1, r1, #7
 80042b0:	4401      	add	r1, r0
 80042b2:	3184      	adds	r1, #132	@ 0x84
 80042b4:	4313      	orrs	r3, r2
 80042b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	01db      	lsls	r3, r3, #7
 80042c2:	4413      	add	r3, r2
 80042c4:	3384      	adds	r3, #132	@ 0x84
 80042c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	4611      	mov	r1, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	01d2      	lsls	r2, r2, #7
 80042d2:	440a      	add	r2, r1
 80042d4:	3284      	adds	r2, #132	@ 0x84
 80042d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80042da:	f023 0307 	bic.w	r3, r3, #7
 80042de:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	01db      	lsls	r3, r3, #7
 80042ea:	4413      	add	r3, r2
 80042ec:	3384      	adds	r3, #132	@ 0x84
 80042ee:	461a      	mov	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	01db      	lsls	r3, r3, #7
 8004300:	4413      	add	r3, r2
 8004302:	3384      	adds	r3, #132	@ 0x84
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	4611      	mov	r1, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	01d2      	lsls	r2, r2, #7
 8004310:	440a      	add	r2, r1
 8004312:	3284      	adds	r2, #132	@ 0x84
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	6013      	str	r3, [r2, #0]
}
 800431a:	bf00      	nop
 800431c:	3724      	adds	r7, #36	@ 0x24
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af02      	add	r7, sp, #8
 800432c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e101      	b.n	800453c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f006 fd5a 	bl	800ae0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2203      	movs	r2, #3
 800435c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004366:	d102      	bne.n	800436e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f003 f941 	bl	80075fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	7c1a      	ldrb	r2, [r3, #16]
 8004380:	f88d 2000 	strb.w	r2, [sp]
 8004384:	3304      	adds	r3, #4
 8004386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004388:	f003 f820 	bl	80073cc <USB_CoreInit>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2202      	movs	r2, #2
 8004396:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e0ce      	b.n	800453c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f003 f939 	bl	800761c <USB_SetCurrentMode>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0bf      	b.n	800453c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043bc:	2300      	movs	r3, #0
 80043be:	73fb      	strb	r3, [r7, #15]
 80043c0:	e04a      	b.n	8004458 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	3315      	adds	r3, #21
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	3314      	adds	r3, #20
 80043e6:	7bfa      	ldrb	r2, [r7, #15]
 80043e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043ea:	7bfa      	ldrb	r2, [r7, #15]
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	b298      	uxth	r0, r3
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	332e      	adds	r3, #46	@ 0x2e
 80043fe:	4602      	mov	r2, r0
 8004400:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004402:	7bfa      	ldrb	r2, [r7, #15]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	3318      	adds	r3, #24
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004416:	7bfa      	ldrb	r2, [r7, #15]
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	331c      	adds	r3, #28
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800442a:	7bfa      	ldrb	r2, [r7, #15]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	3320      	adds	r3, #32
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800443e:	7bfa      	ldrb	r2, [r7, #15]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	3324      	adds	r3, #36	@ 0x24
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	3301      	adds	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	791b      	ldrb	r3, [r3, #4]
 800445c:	7bfa      	ldrb	r2, [r7, #15]
 800445e:	429a      	cmp	r2, r3
 8004460:	d3af      	bcc.n	80043c2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004462:	2300      	movs	r3, #0
 8004464:	73fb      	strb	r3, [r7, #15]
 8004466:	e044      	b.n	80044f2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004468:	7bfa      	ldrb	r2, [r7, #15]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800447a:	2200      	movs	r2, #0
 800447c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800447e:	7bfa      	ldrb	r2, [r7, #15]
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004490:	7bfa      	ldrb	r2, [r7, #15]
 8004492:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004494:	7bfa      	ldrb	r2, [r7, #15]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80044a6:	2200      	movs	r2, #0
 80044a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044aa:	7bfa      	ldrb	r2, [r7, #15]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044c0:	7bfa      	ldrb	r2, [r7, #15]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044d6:	7bfa      	ldrb	r2, [r7, #15]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	3301      	adds	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	791b      	ldrb	r3, [r3, #4]
 80044f6:	7bfa      	ldrb	r2, [r7, #15]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d3b5      	bcc.n	8004468 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	7c1a      	ldrb	r2, [r3, #16]
 8004504:	f88d 2000 	strb.w	r2, [sp]
 8004508:	3304      	adds	r3, #4
 800450a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800450c:	f003 f8d2 	bl	80076b4 <USB_DevInit>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e00c      	b.n	800453c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f004 f91c 	bl	8008772 <USB_DevDisconnect>

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_PCD_Start+0x1c>
 800455c:	2302      	movs	r3, #2
 800455e:	e022      	b.n	80045a6 <HAL_PCD_Start+0x62>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d009      	beq.n	8004588 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004578:	2b01      	cmp	r3, #1
 800457a:	d105      	bne.n	8004588 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f003 f823 	bl	80075d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f004 f8ca 	bl	8008730 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80045ae:	b590      	push	{r4, r7, lr}
 80045b0:	b08d      	sub	sp, #52	@ 0x34
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f004 f988 	bl	80088da <USB_GetMode>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f040 848c 	bne.w	8004eea <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f004 f8ec 	bl	80087b4 <USB_ReadInterrupts>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 8482 	beq.w	8004ee8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	0a1b      	lsrs	r3, r3, #8
 80045ee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f004 f8d9 	bl	80087b4 <USB_ReadInterrupts>
 8004602:	4603      	mov	r3, r0
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b02      	cmp	r3, #2
 800460a:	d107      	bne.n	800461c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695a      	ldr	r2, [r3, #20]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f002 0202 	and.w	r2, r2, #2
 800461a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f004 f8c7 	bl	80087b4 <USB_ReadInterrupts>
 8004626:	4603      	mov	r3, r0
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b10      	cmp	r3, #16
 800462e:	d161      	bne.n	80046f4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0210 	bic.w	r2, r2, #16
 800463e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	f003 020f 	and.w	r2, r3, #15
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	4413      	add	r3, r2
 800465c:	3304      	adds	r3, #4
 800465e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	0c5b      	lsrs	r3, r3, #17
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	2b02      	cmp	r3, #2
 800466a:	d124      	bne.n	80046b6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d035      	beq.n	80046e4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004686:	b29b      	uxth	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	6a38      	ldr	r0, [r7, #32]
 800468c:	f003 fefe 	bl	800848c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800469c:	441a      	add	r2, r3
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046ae:	441a      	add	r2, r3
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	615a      	str	r2, [r3, #20]
 80046b4:	e016      	b.n	80046e4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	0c5b      	lsrs	r3, r3, #17
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	2b06      	cmp	r3, #6
 80046c0:	d110      	bne.n	80046e4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046c8:	2208      	movs	r2, #8
 80046ca:	4619      	mov	r1, r3
 80046cc:	6a38      	ldr	r0, [r7, #32]
 80046ce:	f003 fedd 	bl	800848c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046de:	441a      	add	r2, r3
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0210 	orr.w	r2, r2, #16
 80046f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f004 f85b 	bl	80087b4 <USB_ReadInterrupts>
 80046fe:	4603      	mov	r3, r0
 8004700:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004704:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004708:	f040 80a7 	bne.w	800485a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f004 f860 	bl	80087da <USB_ReadDevAllOutEpInterrupt>
 800471a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800471c:	e099      	b.n	8004852 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 808e 	beq.w	8004846 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	4611      	mov	r1, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f004 f884 	bl	8008842 <USB_ReadDevOutEPInterrupt>
 800473a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00c      	beq.n	8004760 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004752:	461a      	mov	r2, r3
 8004754:	2301      	movs	r3, #1
 8004756:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004758:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fea4 	bl	80054a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00c      	beq.n	8004784 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004776:	461a      	mov	r2, r3
 8004778:	2308      	movs	r3, #8
 800477a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800477c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 ff7a 	bl	8005678 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800479a:	461a      	mov	r2, r3
 800479c:	2310      	movs	r3, #16
 800479e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d030      	beq.n	800480c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b2:	2b80      	cmp	r3, #128	@ 0x80
 80047b4:	d109      	bne.n	80047ca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047c8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80047ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047cc:	4613      	mov	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4413      	add	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	4413      	add	r3, r2
 80047dc:	3304      	adds	r3, #4
 80047de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	78db      	ldrb	r3, [r3, #3]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d108      	bne.n	80047fa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2200      	movs	r2, #0
 80047ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	4619      	mov	r1, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f006 fc0b 	bl	800b010 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004806:	461a      	mov	r2, r3
 8004808:	2302      	movs	r3, #2
 800480a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004822:	461a      	mov	r2, r3
 8004824:	2320      	movs	r3, #32
 8004826:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483e:	461a      	mov	r2, r3
 8004840:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004844:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	3301      	adds	r3, #1
 800484a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800484c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	f47f af62 	bne.w	800471e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f003 ffa8 	bl	80087b4 <USB_ReadInterrupts>
 8004864:	4603      	mov	r3, r0
 8004866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800486a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800486e:	f040 80db 	bne.w	8004a28 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f003 ffc9 	bl	800880e <USB_ReadDevAllInEpInterrupt>
 800487c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004882:	e0cd      	b.n	8004a20 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80c2 	beq.w	8004a14 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	4611      	mov	r1, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f003 ffef 	bl	800887e <USB_ReadDevInEPInterrupt>
 80048a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d057      	beq.n	800495c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	2201      	movs	r2, #1
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69f9      	ldr	r1, [r7, #28]
 80048c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048cc:	4013      	ands	r3, r2
 80048ce:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048dc:	461a      	mov	r2, r3
 80048de:	2301      	movs	r3, #1
 80048e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	799b      	ldrb	r3, [r3, #6]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d132      	bne.n	8004950 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	440b      	add	r3, r1
 80048f8:	3320      	adds	r3, #32
 80048fa:	6819      	ldr	r1, [r3, #0]
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004900:	4613      	mov	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4403      	add	r3, r0
 800490a:	331c      	adds	r3, #28
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4419      	add	r1, r3
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004914:	4613      	mov	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4403      	add	r3, r0
 800491e:	3320      	adds	r3, #32
 8004920:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004924:	2b00      	cmp	r3, #0
 8004926:	d113      	bne.n	8004950 <HAL_PCD_IRQHandler+0x3a2>
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800492c:	4613      	mov	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	3324      	adds	r3, #36	@ 0x24
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d108      	bne.n	8004950 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004948:	461a      	mov	r2, r3
 800494a:	2101      	movs	r1, #1
 800494c:	f003 fff6 	bl	800893c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	b2db      	uxtb	r3, r3
 8004954:	4619      	mov	r1, r3
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f006 fad5 	bl	800af06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004972:	461a      	mov	r2, r3
 8004974:	2308      	movs	r3, #8
 8004976:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	2b00      	cmp	r3, #0
 8004980:	d008      	beq.n	8004994 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800498e:	461a      	mov	r2, r3
 8004990:	2310      	movs	r3, #16
 8004992:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049aa:	461a      	mov	r2, r3
 80049ac:	2340      	movs	r3, #64	@ 0x40
 80049ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d023      	beq.n	8004a02 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80049ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049bc:	6a38      	ldr	r0, [r7, #32]
 80049be:	f002 ffdd 	bl	800797c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80049c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c4:	4613      	mov	r3, r2
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	3310      	adds	r3, #16
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	3304      	adds	r3, #4
 80049d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	78db      	ldrb	r3, [r3, #3]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d108      	bne.n	80049f0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2200      	movs	r2, #0
 80049e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80049e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f006 fb22 	bl	800b034 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80049f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049fc:	461a      	mov	r2, r3
 80049fe:	2302      	movs	r3, #2
 8004a00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004a0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fcbd 	bl	800538e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a16:	3301      	adds	r3, #1
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1c:	085b      	lsrs	r3, r3, #1
 8004a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f47f af2e 	bne.w	8004884 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f003 fec1 	bl	80087b4 <USB_ReadInterrupts>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a3c:	d122      	bne.n	8004a84 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a4c:	f023 0301 	bic.w	r3, r3, #1
 8004a50:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d108      	bne.n	8004a6e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004a64:	2100      	movs	r1, #0
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fea4 	bl	80057b4 <HAL_PCDEx_LPM_Callback>
 8004a6c:	e002      	b.n	8004a74 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f006 fac0 	bl	800aff4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695a      	ldr	r2, [r3, #20]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f003 fe93 	bl	80087b4 <USB_ReadInterrupts>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a98:	d112      	bne.n	8004ac0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d102      	bne.n	8004ab0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f006 fa7c 	bl	800afa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004abe:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f003 fe75 	bl	80087b4 <USB_ReadInterrupts>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad4:	f040 80b7 	bne.w	8004c46 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ae6:	f023 0301 	bic.w	r3, r3, #1
 8004aea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2110      	movs	r1, #16
 8004af2:	4618      	mov	r0, r3
 8004af4:	f002 ff42 	bl	800797c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af8:	2300      	movs	r3, #0
 8004afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004afc:	e046      	b.n	8004b8c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b22:	0151      	lsls	r1, r2, #5
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	440a      	add	r2, r1
 8004b28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b2c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b56:	0151      	lsls	r1, r2, #5
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	440a      	add	r2, r1
 8004b5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b76:	0151      	lsls	r1, r2, #5
 8004b78:	69fa      	ldr	r2, [r7, #28]
 8004b7a:	440a      	add	r2, r1
 8004b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b88:	3301      	adds	r3, #1
 8004b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	791b      	ldrb	r3, [r3, #4]
 8004b90:	461a      	mov	r2, r3
 8004b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d3b2      	bcc.n	8004afe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ba6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004baa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	7bdb      	ldrb	r3, [r3, #15]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d016      	beq.n	8004be2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bc4:	f043 030b 	orr.w	r3, r3, #11
 8004bc8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bda:	f043 030b 	orr.w	r3, r3, #11
 8004bde:	6453      	str	r3, [r2, #68]	@ 0x44
 8004be0:	e015      	b.n	8004c0e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bf0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004bf4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004bf8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c08:	f043 030b 	orr.w	r3, r3, #11
 8004c0c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c1c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004c20:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c30:	461a      	mov	r2, r3
 8004c32:	f003 fe83 	bl	800893c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695a      	ldr	r2, [r3, #20]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f003 fdb2 	bl	80087b4 <USB_ReadInterrupts>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c5a:	d123      	bne.n	8004ca4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f003 fe48 	bl	80088f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f002 feff 	bl	8007a6e <USB_GetDevSpeed>
 8004c70:	4603      	mov	r3, r0
 8004c72:	461a      	mov	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681c      	ldr	r4, [r3, #0]
 8004c7c:	f001 fa0a 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 8004c80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c86:	461a      	mov	r2, r3
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f002 fc03 	bl	8007494 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f006 f961 	bl	800af56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f003 fd83 	bl	80087b4 <USB_ReadInterrupts>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d10a      	bne.n	8004cce <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f006 f93e 	bl	800af3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695a      	ldr	r2, [r3, #20]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f002 0208 	and.w	r2, r2, #8
 8004ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f003 fd6e 	bl	80087b4 <USB_ReadInterrupts>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cde:	2b80      	cmp	r3, #128	@ 0x80
 8004ce0:	d123      	bne.n	8004d2a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cee:	2301      	movs	r3, #1
 8004cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf2:	e014      	b.n	8004d1e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d105      	bne.n	8004d18 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	4619      	mov	r1, r3
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fb0a 	bl	800532c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	791b      	ldrb	r3, [r3, #4]
 8004d22:	461a      	mov	r2, r3
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d3e4      	bcc.n	8004cf4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f003 fd40 	bl	80087b4 <USB_ReadInterrupts>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d3e:	d13c      	bne.n	8004dba <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d40:	2301      	movs	r3, #1
 8004d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d44:	e02b      	b.n	8004d9e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	3318      	adds	r3, #24
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d115      	bne.n	8004d98 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004d6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da12      	bge.n	8004d98 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d76:	4613      	mov	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	3317      	adds	r3, #23
 8004d82:	2201      	movs	r2, #1
 8004d84:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	4619      	mov	r1, r3
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 faca 	bl	800532c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	791b      	ldrb	r3, [r3, #4]
 8004da2:	461a      	mov	r2, r3
 8004da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d3cd      	bcc.n	8004d46 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f003 fcf8 	bl	80087b4 <USB_ReadInterrupts>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dce:	d156      	bne.n	8004e7e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dd4:	e045      	b.n	8004e62 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d12e      	bne.n	8004e5c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004dfe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	da2b      	bge.n	8004e5c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004e10:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d121      	bne.n	8004e5c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10a      	bne.n	8004e5c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e58:	6053      	str	r3, [r2, #4]
            break;
 8004e5a:	e008      	b.n	8004e6e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5e:	3301      	adds	r3, #1
 8004e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	791b      	ldrb	r3, [r3, #4]
 8004e66:	461a      	mov	r2, r3
 8004e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d3b3      	bcc.n	8004dd6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695a      	ldr	r2, [r3, #20]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004e7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f003 fc96 	bl	80087b4 <USB_ReadInterrupts>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e92:	d10a      	bne.n	8004eaa <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f006 f8df 	bl	800b058 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f003 fc80 	bl	80087b4 <USB_ReadInterrupts>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d115      	bne.n	8004eea <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f006 f8cf 	bl	800b074 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
 8004ee6:	e000      	b.n	8004eea <HAL_PCD_IRQHandler+0x93c>
      return;
 8004ee8:	bf00      	nop
    }
  }
}
 8004eea:	3734      	adds	r7, #52	@ 0x34
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd90      	pop	{r4, r7, pc}

08004ef0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_PCD_SetAddress+0x1a>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e012      	b.n	8004f30 <HAL_PCD_SetAddress+0x40>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	78fa      	ldrb	r2, [r7, #3]
 8004f16:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f003 fbdf 	bl	80086e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	4608      	mov	r0, r1
 8004f42:	4611      	mov	r1, r2
 8004f44:	461a      	mov	r2, r3
 8004f46:	4603      	mov	r3, r0
 8004f48:	70fb      	strb	r3, [r7, #3]
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	803b      	strh	r3, [r7, #0]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	da0f      	bge.n	8004f7e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	f003 020f 	and.w	r2, r3, #15
 8004f64:	4613      	mov	r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	3310      	adds	r3, #16
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	4413      	add	r3, r2
 8004f72:	3304      	adds	r3, #4
 8004f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	705a      	strb	r2, [r3, #1]
 8004f7c:	e00f      	b.n	8004f9e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	f003 020f 	and.w	r2, r3, #15
 8004f84:	4613      	mov	r3, r2
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	4413      	add	r3, r2
 8004f94:	3304      	adds	r3, #4
 8004f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004faa:	883b      	ldrh	r3, [r7, #0]
 8004fac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	78ba      	ldrb	r2, [r7, #2]
 8004fb8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	785b      	ldrb	r3, [r3, #1]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d004      	beq.n	8004fcc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004fcc:	78bb      	ldrb	r3, [r7, #2]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d102      	bne.n	8004fd8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_PCD_EP_Open+0xae>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e00e      	b.n	8005004 <HAL_PCD_EP_Open+0xcc>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68f9      	ldr	r1, [r7, #12]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f002 fd5f 	bl	8007ab8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005002:	7afb      	ldrb	r3, [r7, #11]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800501c:	2b00      	cmp	r3, #0
 800501e:	da0f      	bge.n	8005040 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	f003 020f 	and.w	r2, r3, #15
 8005026:	4613      	mov	r3, r2
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	3310      	adds	r3, #16
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	3304      	adds	r3, #4
 8005036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	705a      	strb	r2, [r3, #1]
 800503e:	e00f      	b.n	8005060 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	f003 020f 	and.w	r2, r3, #15
 8005046:	4613      	mov	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	4413      	add	r3, r2
 8005056:	3304      	adds	r3, #4
 8005058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	b2da      	uxtb	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_PCD_EP_Close+0x6e>
 8005076:	2302      	movs	r3, #2
 8005078:	e00e      	b.n	8005098 <HAL_PCD_EP_Close+0x8c>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68f9      	ldr	r1, [r7, #12]
 8005088:	4618      	mov	r0, r3
 800508a:	f002 fd9d 	bl	8007bc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	607a      	str	r2, [r7, #4]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	460b      	mov	r3, r1
 80050ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050b0:	7afb      	ldrb	r3, [r7, #11]
 80050b2:	f003 020f 	and.w	r2, r3, #15
 80050b6:	4613      	mov	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4413      	add	r3, r2
 80050c6:	3304      	adds	r3, #4
 80050c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2200      	movs	r2, #0
 80050e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050e2:	7afb      	ldrb	r3, [r7, #11]
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	799b      	ldrb	r3, [r3, #6]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d102      	bne.n	80050fc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6818      	ldr	r0, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	799b      	ldrb	r3, [r3, #6]
 8005104:	461a      	mov	r2, r3
 8005106:	6979      	ldr	r1, [r7, #20]
 8005108:	f002 fe3a 	bl	8007d80 <USB_EPStartXfer>

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	460b      	mov	r3, r1
 8005120:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	f003 020f 	and.w	r2, r3, #15
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005138:	681b      	ldr	r3, [r3, #0]
}
 800513a:	4618      	mov	r0, r3
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b086      	sub	sp, #24
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
 8005152:	460b      	mov	r3, r1
 8005154:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005156:	7afb      	ldrb	r3, [r7, #11]
 8005158:	f003 020f 	and.w	r2, r3, #15
 800515c:	4613      	mov	r3, r2
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4413      	add	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	3310      	adds	r3, #16
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	3304      	adds	r3, #4
 800516c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2200      	movs	r2, #0
 800517e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2201      	movs	r2, #1
 8005184:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005186:	7afb      	ldrb	r3, [r7, #11]
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	b2da      	uxtb	r2, r3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	799b      	ldrb	r3, [r3, #6]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d102      	bne.n	80051a0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	799b      	ldrb	r3, [r3, #6]
 80051a8:	461a      	mov	r2, r3
 80051aa:	6979      	ldr	r1, [r7, #20]
 80051ac:	f002 fde8 	bl	8007d80 <USB_EPStartXfer>

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	460b      	mov	r3, r1
 80051c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80051c6:	78fb      	ldrb	r3, [r7, #3]
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	7912      	ldrb	r2, [r2, #4]
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d901      	bls.n	80051d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e04f      	b.n	8005278 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	da0f      	bge.n	8005200 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	f003 020f 	and.w	r2, r3, #15
 80051e6:	4613      	mov	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	3310      	adds	r3, #16
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	4413      	add	r3, r2
 80051f4:	3304      	adds	r3, #4
 80051f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	705a      	strb	r2, [r3, #1]
 80051fe:	e00d      	b.n	800521c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005200:	78fa      	ldrb	r2, [r7, #3]
 8005202:	4613      	mov	r3, r2
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	4413      	add	r3, r2
 8005212:	3304      	adds	r3, #4
 8005214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2201      	movs	r2, #1
 8005220:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005222:	78fb      	ldrb	r3, [r7, #3]
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	b2da      	uxtb	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_PCD_EP_SetStall+0x82>
 8005238:	2302      	movs	r3, #2
 800523a:	e01d      	b.n	8005278 <HAL_PCD_EP_SetStall+0xbe>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68f9      	ldr	r1, [r7, #12]
 800524a:	4618      	mov	r0, r3
 800524c:	f003 f976 	bl	800853c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	7999      	ldrb	r1, [r3, #6]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005268:	461a      	mov	r2, r3
 800526a:	f003 fb67 	bl	800893c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800528c:	78fb      	ldrb	r3, [r7, #3]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	7912      	ldrb	r2, [r2, #4]
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e042      	b.n	8005324 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800529e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	da0f      	bge.n	80052c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052a6:	78fb      	ldrb	r3, [r7, #3]
 80052a8:	f003 020f 	and.w	r2, r3, #15
 80052ac:	4613      	mov	r3, r2
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	3310      	adds	r3, #16
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	3304      	adds	r3, #4
 80052bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	705a      	strb	r2, [r3, #1]
 80052c4:	e00f      	b.n	80052e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	f003 020f 	and.w	r2, r3, #15
 80052cc:	4613      	mov	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	4413      	add	r3, r2
 80052dc:	3304      	adds	r3, #4
 80052de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_PCD_EP_ClrStall+0x86>
 8005302:	2302      	movs	r3, #2
 8005304:	e00e      	b.n	8005324 <HAL_PCD_EP_ClrStall+0xa4>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68f9      	ldr	r1, [r7, #12]
 8005314:	4618      	mov	r0, r3
 8005316:	f003 f97f 	bl	8008618 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800533c:	2b00      	cmp	r3, #0
 800533e:	da0c      	bge.n	800535a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	f003 020f 	and.w	r2, r3, #15
 8005346:	4613      	mov	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	3310      	adds	r3, #16
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	4413      	add	r3, r2
 8005354:	3304      	adds	r3, #4
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e00c      	b.n	8005374 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	4613      	mov	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	4413      	add	r3, r2
 8005370:	3304      	adds	r3, #4
 8005372:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68f9      	ldr	r1, [r7, #12]
 800537a:	4618      	mov	r0, r3
 800537c:	f002 ff9e 	bl	80082bc <USB_EPStopXfer>
 8005380:	4603      	mov	r3, r0
 8005382:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005384:	7afb      	ldrb	r3, [r7, #11]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b08a      	sub	sp, #40	@ 0x28
 8005392:	af02      	add	r7, sp, #8
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	4613      	mov	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4413      	add	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	3310      	adds	r3, #16
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	4413      	add	r3, r2
 80053b2:	3304      	adds	r3, #4
 80053b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	695a      	ldr	r2, [r3, #20]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d901      	bls.n	80053c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e06b      	b.n	800549e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d902      	bls.n	80053e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	3303      	adds	r3, #3
 80053e6:	089b      	lsrs	r3, r3, #2
 80053e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053ea:	e02a      	b.n	8005442 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d902      	bls.n	8005408 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	3303      	adds	r3, #3
 800540c:	089b      	lsrs	r3, r3, #2
 800540e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68d9      	ldr	r1, [r3, #12]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	b2da      	uxtb	r2, r3
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	4603      	mov	r3, r0
 8005424:	6978      	ldr	r0, [r7, #20]
 8005426:	f002 fff3 	bl	8008410 <USB_WritePacket>

    ep->xfer_buff  += len;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	441a      	add	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	695a      	ldr	r2, [r3, #20]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	441a      	add	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	429a      	cmp	r2, r3
 8005456:	d809      	bhi.n	800546c <PCD_WriteEmptyTxFifo+0xde>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005460:	429a      	cmp	r2, r3
 8005462:	d203      	bcs.n	800546c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1bf      	bne.n	80053ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	429a      	cmp	r2, r3
 8005476:	d811      	bhi.n	800549c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	2201      	movs	r2, #1
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800548c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	43db      	mvns	r3, r3
 8005492:	6939      	ldr	r1, [r7, #16]
 8005494:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005498:	4013      	ands	r3, r2
 800549a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3720      	adds	r7, #32
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	333c      	adds	r3, #60	@ 0x3c
 80054c0:	3304      	adds	r3, #4
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	799b      	ldrb	r3, [r3, #6]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d17b      	bne.n	80055d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d015      	beq.n	8005514 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4a61      	ldr	r2, [pc, #388]	@ (8005670 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	f240 80b9 	bls.w	8005664 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 80b3 	beq.w	8005664 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550a:	461a      	mov	r2, r3
 800550c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005510:	6093      	str	r3, [r2, #8]
 8005512:	e0a7      	b.n	8005664 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552a:	461a      	mov	r2, r3
 800552c:	2320      	movs	r3, #32
 800552e:	6093      	str	r3, [r2, #8]
 8005530:	e098      	b.n	8005664 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	f040 8093 	bne.w	8005664 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	4a4b      	ldr	r2, [pc, #300]	@ (8005670 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d90f      	bls.n	8005566 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800555c:	461a      	mov	r2, r3
 800555e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005562:	6093      	str	r3, [r2, #8]
 8005564:	e07e      	b.n	8005664 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	4413      	add	r3, r2
 8005578:	3304      	adds	r3, #4
 800557a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1a      	ldr	r2, [r3, #32]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	0159      	lsls	r1, r3, #5
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	440b      	add	r3, r1
 8005588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005592:	1ad2      	subs	r2, r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d114      	bne.n	80055c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80055b0:	461a      	mov	r2, r3
 80055b2:	2101      	movs	r1, #1
 80055b4:	f003 f9c2 	bl	800893c <USB_EP0_OutStart>
 80055b8:	e006      	b.n	80055c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	441a      	add	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f005 fc7e 	bl	800aed0 <HAL_PCD_DataOutStageCallback>
 80055d4:	e046      	b.n	8005664 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	4a26      	ldr	r2, [pc, #152]	@ (8005674 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d124      	bne.n	8005628 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f4:	461a      	mov	r2, r3
 80055f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055fa:	6093      	str	r3, [r2, #8]
 80055fc:	e032      	b.n	8005664 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d008      	beq.n	800561a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005614:	461a      	mov	r2, r3
 8005616:	2320      	movs	r3, #32
 8005618:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f005 fc55 	bl	800aed0 <HAL_PCD_DataOutStageCallback>
 8005626:	e01d      	b.n	8005664 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d114      	bne.n	8005658 <PCD_EP_OutXfrComplete_int+0x1b0>
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	4613      	mov	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d108      	bne.n	8005658 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005650:	461a      	mov	r2, r3
 8005652:	2100      	movs	r1, #0
 8005654:	f003 f972 	bl	800893c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	b2db      	uxtb	r3, r3
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f005 fc36 	bl	800aed0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3720      	adds	r7, #32
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	4f54300a 	.word	0x4f54300a
 8005674:	4f54310a 	.word	0x4f54310a

08005678 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	333c      	adds	r3, #60	@ 0x3c
 8005690:	3304      	adds	r3, #4
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4a15      	ldr	r2, [pc, #84]	@ (8005700 <PCD_EP_OutSetupPacket_int+0x88>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d90e      	bls.n	80056cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d009      	beq.n	80056cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c4:	461a      	mov	r2, r3
 80056c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f005 fbed 	bl	800aeac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005700 <PCD_EP_OutSetupPacket_int+0x88>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d90c      	bls.n	80056f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	799b      	ldrb	r3, [r3, #6]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d108      	bne.n	80056f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80056ec:	461a      	mov	r2, r3
 80056ee:	2101      	movs	r1, #1
 80056f0:	f003 f924 	bl	800893c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	4f54300a 	.word	0x4f54300a

08005704 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	70fb      	strb	r3, [r7, #3]
 8005710:	4613      	mov	r3, r2
 8005712:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d107      	bne.n	8005732 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005722:	883b      	ldrh	r3, [r7, #0]
 8005724:	0419      	lsls	r1, r3, #16
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	430a      	orrs	r2, r1
 800572e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005730:	e028      	b.n	8005784 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005738:	0c1b      	lsrs	r3, r3, #16
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4413      	add	r3, r2
 800573e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005740:	2300      	movs	r3, #0
 8005742:	73fb      	strb	r3, [r7, #15]
 8005744:	e00d      	b.n	8005762 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	3340      	adds	r3, #64	@ 0x40
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	0c1b      	lsrs	r3, r3, #16
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	4413      	add	r3, r2
 800575a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	3301      	adds	r3, #1
 8005760:	73fb      	strb	r3, [r7, #15]
 8005762:	7bfa      	ldrb	r2, [r7, #15]
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	3b01      	subs	r3, #1
 8005768:	429a      	cmp	r2, r3
 800576a:	d3ec      	bcc.n	8005746 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800576c:	883b      	ldrh	r3, [r7, #0]
 800576e:	0418      	lsls	r0, r3, #16
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6819      	ldr	r1, [r3, #0]
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	3b01      	subs	r3, #1
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	4302      	orrs	r2, r0
 800577c:	3340      	adds	r3, #64	@ 0x40
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	460b      	mov	r3, r1
 800579c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	887a      	ldrh	r2, [r7, #2]
 80057a4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e267      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d075      	beq.n	80058d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057ea:	4b88      	ldr	r3, [pc, #544]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 030c 	and.w	r3, r3, #12
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d00c      	beq.n	8005810 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057f6:	4b85      	ldr	r3, [pc, #532]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d112      	bne.n	8005828 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005802:	4b82      	ldr	r3, [pc, #520]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800580a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800580e:	d10b      	bne.n	8005828 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005810:	4b7e      	ldr	r3, [pc, #504]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d05b      	beq.n	80058d4 <HAL_RCC_OscConfig+0x108>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d157      	bne.n	80058d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e242      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005830:	d106      	bne.n	8005840 <HAL_RCC_OscConfig+0x74>
 8005832:	4b76      	ldr	r3, [pc, #472]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a75      	ldr	r2, [pc, #468]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	e01d      	b.n	800587c <HAL_RCC_OscConfig+0xb0>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005848:	d10c      	bne.n	8005864 <HAL_RCC_OscConfig+0x98>
 800584a:	4b70      	ldr	r3, [pc, #448]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a6f      	ldr	r2, [pc, #444]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005850:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	4b6d      	ldr	r3, [pc, #436]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a6c      	ldr	r2, [pc, #432]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 800585c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	e00b      	b.n	800587c <HAL_RCC_OscConfig+0xb0>
 8005864:	4b69      	ldr	r3, [pc, #420]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a68      	ldr	r2, [pc, #416]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 800586a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	4b66      	ldr	r3, [pc, #408]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a65      	ldr	r2, [pc, #404]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800587a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d013      	beq.n	80058ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005884:	f7fd fb1a 	bl	8002ebc <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800588c:	f7fd fb16 	bl	8002ebc <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b64      	cmp	r3, #100	@ 0x64
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e207      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800589e:	4b5b      	ldr	r3, [pc, #364]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <HAL_RCC_OscConfig+0xc0>
 80058aa:	e014      	b.n	80058d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ac:	f7fd fb06 	bl	8002ebc <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058b4:	f7fd fb02 	bl	8002ebc <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b64      	cmp	r3, #100	@ 0x64
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e1f3      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058c6:	4b51      	ldr	r3, [pc, #324]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCC_OscConfig+0xe8>
 80058d2:	e000      	b.n	80058d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d063      	beq.n	80059aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058e2:	4b4a      	ldr	r3, [pc, #296]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 030c 	and.w	r3, r3, #12
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ee:	4b47      	ldr	r3, [pc, #284]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d11c      	bne.n	8005934 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058fa:	4b44      	ldr	r3, [pc, #272]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d116      	bne.n	8005934 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005906:	4b41      	ldr	r3, [pc, #260]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d005      	beq.n	800591e <HAL_RCC_OscConfig+0x152>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d001      	beq.n	800591e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e1c7      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591e:	4b3b      	ldr	r3, [pc, #236]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	4937      	ldr	r1, [pc, #220]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 800592e:	4313      	orrs	r3, r2
 8005930:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005932:	e03a      	b.n	80059aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d020      	beq.n	800597e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800593c:	4b34      	ldr	r3, [pc, #208]	@ (8005a10 <HAL_RCC_OscConfig+0x244>)
 800593e:	2201      	movs	r2, #1
 8005940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005942:	f7fd fabb 	bl	8002ebc <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005948:	e008      	b.n	800595c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800594a:	f7fd fab7 	bl	8002ebc <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d901      	bls.n	800595c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e1a8      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800595c:	4b2b      	ldr	r3, [pc, #172]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0f0      	beq.n	800594a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005968:	4b28      	ldr	r3, [pc, #160]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	4925      	ldr	r1, [pc, #148]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005978:	4313      	orrs	r3, r2
 800597a:	600b      	str	r3, [r1, #0]
 800597c:	e015      	b.n	80059aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800597e:	4b24      	ldr	r3, [pc, #144]	@ (8005a10 <HAL_RCC_OscConfig+0x244>)
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fd fa9a 	bl	8002ebc <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800598c:	f7fd fa96 	bl	8002ebc <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e187      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800599e:	4b1b      	ldr	r3, [pc, #108]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d036      	beq.n	8005a24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d016      	beq.n	80059ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059be:	4b15      	ldr	r3, [pc, #84]	@ (8005a14 <HAL_RCC_OscConfig+0x248>)
 80059c0:	2201      	movs	r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c4:	f7fd fa7a 	bl	8002ebc <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059cc:	f7fd fa76 	bl	8002ebc <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e167      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059de:	4b0b      	ldr	r3, [pc, #44]	@ (8005a0c <HAL_RCC_OscConfig+0x240>)
 80059e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <HAL_RCC_OscConfig+0x200>
 80059ea:	e01b      	b.n	8005a24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ec:	4b09      	ldr	r3, [pc, #36]	@ (8005a14 <HAL_RCC_OscConfig+0x248>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059f2:	f7fd fa63 	bl	8002ebc <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059f8:	e00e      	b.n	8005a18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059fa:	f7fd fa5f 	bl	8002ebc <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d907      	bls.n	8005a18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e150      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	42470000 	.word	0x42470000
 8005a14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a18:	4b88      	ldr	r3, [pc, #544]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1ea      	bne.n	80059fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8097 	beq.w	8005b60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a32:	2300      	movs	r3, #0
 8005a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a36:	4b81      	ldr	r3, [pc, #516]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10f      	bne.n	8005a62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a42:	2300      	movs	r3, #0
 8005a44:	60bb      	str	r3, [r7, #8]
 8005a46:	4b7d      	ldr	r3, [pc, #500]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4a:	4a7c      	ldr	r2, [pc, #496]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a52:	4b7a      	ldr	r3, [pc, #488]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a5a:	60bb      	str	r3, [r7, #8]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a62:	4b77      	ldr	r3, [pc, #476]	@ (8005c40 <HAL_RCC_OscConfig+0x474>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d118      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a6e:	4b74      	ldr	r3, [pc, #464]	@ (8005c40 <HAL_RCC_OscConfig+0x474>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a73      	ldr	r2, [pc, #460]	@ (8005c40 <HAL_RCC_OscConfig+0x474>)
 8005a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a7a:	f7fd fa1f 	bl	8002ebc <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a82:	f7fd fa1b 	bl	8002ebc <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e10c      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a94:	4b6a      	ldr	r3, [pc, #424]	@ (8005c40 <HAL_RCC_OscConfig+0x474>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d106      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x2ea>
 8005aa8:	4b64      	ldr	r3, [pc, #400]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aac:	4a63      	ldr	r2, [pc, #396]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ab4:	e01c      	b.n	8005af0 <HAL_RCC_OscConfig+0x324>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b05      	cmp	r3, #5
 8005abc:	d10c      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x30c>
 8005abe:	4b5f      	ldr	r3, [pc, #380]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac2:	4a5e      	ldr	r2, [pc, #376]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005ac4:	f043 0304 	orr.w	r3, r3, #4
 8005ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aca:	4b5c      	ldr	r3, [pc, #368]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ace:	4a5b      	ldr	r2, [pc, #364]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ad6:	e00b      	b.n	8005af0 <HAL_RCC_OscConfig+0x324>
 8005ad8:	4b58      	ldr	r3, [pc, #352]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005adc:	4a57      	ldr	r2, [pc, #348]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ae4:	4b55      	ldr	r3, [pc, #340]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae8:	4a54      	ldr	r2, [pc, #336]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005aea:	f023 0304 	bic.w	r3, r3, #4
 8005aee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d015      	beq.n	8005b24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af8:	f7fd f9e0 	bl	8002ebc <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b00:	f7fd f9dc 	bl	8002ebc <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e0cb      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b16:	4b49      	ldr	r3, [pc, #292]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0ee      	beq.n	8005b00 <HAL_RCC_OscConfig+0x334>
 8005b22:	e014      	b.n	8005b4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b24:	f7fd f9ca 	bl	8002ebc <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b2a:	e00a      	b.n	8005b42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b2c:	f7fd f9c6 	bl	8002ebc <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e0b5      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b42:	4b3e      	ldr	r3, [pc, #248]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1ee      	bne.n	8005b2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b4e:	7dfb      	ldrb	r3, [r7, #23]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d105      	bne.n	8005b60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b54:	4b39      	ldr	r3, [pc, #228]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b58:	4a38      	ldr	r2, [pc, #224]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 80a1 	beq.w	8005cac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b6a:	4b34      	ldr	r3, [pc, #208]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 030c 	and.w	r3, r3, #12
 8005b72:	2b08      	cmp	r3, #8
 8005b74:	d05c      	beq.n	8005c30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d141      	bne.n	8005c02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b7e:	4b31      	ldr	r3, [pc, #196]	@ (8005c44 <HAL_RCC_OscConfig+0x478>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b84:	f7fd f99a 	bl	8002ebc <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b8c:	f7fd f996 	bl	8002ebc <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e087      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9e:	4b27      	ldr	r3, [pc, #156]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f0      	bne.n	8005b8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69da      	ldr	r2, [r3, #28]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb8:	019b      	lsls	r3, r3, #6
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc0:	085b      	lsrs	r3, r3, #1
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	041b      	lsls	r3, r3, #16
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bcc:	061b      	lsls	r3, r3, #24
 8005bce:	491b      	ldr	r1, [pc, #108]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c44 <HAL_RCC_OscConfig+0x478>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bda:	f7fd f96f 	bl	8002ebc <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be2:	f7fd f96b 	bl	8002ebc <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e05c      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bf4:	4b11      	ldr	r3, [pc, #68]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0f0      	beq.n	8005be2 <HAL_RCC_OscConfig+0x416>
 8005c00:	e054      	b.n	8005cac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c02:	4b10      	ldr	r3, [pc, #64]	@ (8005c44 <HAL_RCC_OscConfig+0x478>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c08:	f7fd f958 	bl	8002ebc <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c10:	f7fd f954 	bl	8002ebc <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e045      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c22:	4b06      	ldr	r3, [pc, #24]	@ (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f0      	bne.n	8005c10 <HAL_RCC_OscConfig+0x444>
 8005c2e:	e03d      	b.n	8005cac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d107      	bne.n	8005c48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e038      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	40007000 	.word	0x40007000
 8005c44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c48:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb8 <HAL_RCC_OscConfig+0x4ec>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d028      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d121      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d11a      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c78:	4013      	ands	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d111      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	3b01      	subs	r3, #1
 8005c92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d107      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40023800 	.word	0x40023800

08005cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0cc      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cd0:	4b68      	ldr	r3, [pc, #416]	@ (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d90c      	bls.n	8005cf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cde:	4b65      	ldr	r3, [pc, #404]	@ (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce6:	4b63      	ldr	r3, [pc, #396]	@ (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d001      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e0b8      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d020      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d10:	4b59      	ldr	r3, [pc, #356]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4a58      	ldr	r2, [pc, #352]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d28:	4b53      	ldr	r3, [pc, #332]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	4a52      	ldr	r2, [pc, #328]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d34:	4b50      	ldr	r3, [pc, #320]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	494d      	ldr	r1, [pc, #308]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d044      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d107      	bne.n	8005d6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d5a:	4b47      	ldr	r3, [pc, #284]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d119      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e07f      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d003      	beq.n	8005d7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d107      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7a:	4b3f      	ldr	r3, [pc, #252]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d109      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e06f      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e067      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d9a:	4b37      	ldr	r3, [pc, #220]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f023 0203 	bic.w	r2, r3, #3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	4934      	ldr	r1, [pc, #208]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dac:	f7fd f886 	bl	8002ebc <HAL_GetTick>
 8005db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db2:	e00a      	b.n	8005dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db4:	f7fd f882 	bl	8002ebc <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e04f      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dca:	4b2b      	ldr	r3, [pc, #172]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 020c 	and.w	r2, r3, #12
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d1eb      	bne.n	8005db4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ddc:	4b25      	ldr	r3, [pc, #148]	@ (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d20c      	bcs.n	8005e04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dea:	4b22      	ldr	r3, [pc, #136]	@ (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005df2:	4b20      	ldr	r3, [pc, #128]	@ (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d001      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e032      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d008      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e10:	4b19      	ldr	r3, [pc, #100]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	4916      	ldr	r1, [pc, #88]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d009      	beq.n	8005e42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e2e:	4b12      	ldr	r3, [pc, #72]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	490e      	ldr	r1, [pc, #56]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e42:	f000 f821 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8005e46:	4602      	mov	r2, r0
 8005e48:	4b0b      	ldr	r3, [pc, #44]	@ (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	091b      	lsrs	r3, r3, #4
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	490a      	ldr	r1, [pc, #40]	@ (8005e7c <HAL_RCC_ClockConfig+0x1c0>)
 8005e54:	5ccb      	ldrb	r3, [r1, r3]
 8005e56:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5a:	4a09      	ldr	r2, [pc, #36]	@ (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e5e:	4b09      	ldr	r3, [pc, #36]	@ (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fc ffe6 	bl	8002e34 <HAL_InitTick>

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	40023c00 	.word	0x40023c00
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	0800e154 	.word	0x0800e154
 8005e80:	20000000 	.word	0x20000000
 8005e84:	20000080 	.word	0x20000080

08005e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e8c:	b094      	sub	sp, #80	@ 0x50
 8005e8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ea0:	4b79      	ldr	r3, [pc, #484]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 030c 	and.w	r3, r3, #12
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d00d      	beq.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	f200 80e1 	bhi.w	8006074 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_RCC_GetSysClockFreq+0x34>
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005eba:	e0db      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ebc:	4b73      	ldr	r3, [pc, #460]	@ (800608c <HAL_RCC_GetSysClockFreq+0x204>)
 8005ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ec0:	e0db      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ec2:	4b73      	ldr	r3, [pc, #460]	@ (8006090 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ec6:	e0d8      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ed0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ed2:	4b6d      	ldr	r3, [pc, #436]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d063      	beq.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ede:	4b6a      	ldr	r3, [pc, #424]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	099b      	lsrs	r3, r3, #6
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ee8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005efa:	4622      	mov	r2, r4
 8005efc:	462b      	mov	r3, r5
 8005efe:	f04f 0000 	mov.w	r0, #0
 8005f02:	f04f 0100 	mov.w	r1, #0
 8005f06:	0159      	lsls	r1, r3, #5
 8005f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f0c:	0150      	lsls	r0, r2, #5
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4621      	mov	r1, r4
 8005f14:	1a51      	subs	r1, r2, r1
 8005f16:	6139      	str	r1, [r7, #16]
 8005f18:	4629      	mov	r1, r5
 8005f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f2c:	4659      	mov	r1, fp
 8005f2e:	018b      	lsls	r3, r1, #6
 8005f30:	4651      	mov	r1, sl
 8005f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f36:	4651      	mov	r1, sl
 8005f38:	018a      	lsls	r2, r1, #6
 8005f3a:	4651      	mov	r1, sl
 8005f3c:	ebb2 0801 	subs.w	r8, r2, r1
 8005f40:	4659      	mov	r1, fp
 8005f42:	eb63 0901 	sbc.w	r9, r3, r1
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f5a:	4690      	mov	r8, r2
 8005f5c:	4699      	mov	r9, r3
 8005f5e:	4623      	mov	r3, r4
 8005f60:	eb18 0303 	adds.w	r3, r8, r3
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	462b      	mov	r3, r5
 8005f68:	eb49 0303 	adc.w	r3, r9, r3
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	024b      	lsls	r3, r1, #9
 8005f7e:	4621      	mov	r1, r4
 8005f80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f84:	4621      	mov	r1, r4
 8005f86:	024a      	lsls	r2, r1, #9
 8005f88:	4610      	mov	r0, r2
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f8e:	2200      	movs	r2, #0
 8005f90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f98:	f7fa fe16 	bl	8000bc8 <__aeabi_uldivmod>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fa4:	e058      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa6:	4b38      	ldr	r3, [pc, #224]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	099b      	lsrs	r3, r3, #6
 8005fac:	2200      	movs	r2, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fb6:	623b      	str	r3, [r7, #32]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fc0:	4642      	mov	r2, r8
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	f04f 0000 	mov.w	r0, #0
 8005fc8:	f04f 0100 	mov.w	r1, #0
 8005fcc:	0159      	lsls	r1, r3, #5
 8005fce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fd2:	0150      	lsls	r0, r2, #5
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4641      	mov	r1, r8
 8005fda:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fde:	4649      	mov	r1, r9
 8005fe0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ff0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ff4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ff8:	ebb2 040a 	subs.w	r4, r2, sl
 8005ffc:	eb63 050b 	sbc.w	r5, r3, fp
 8006000:	f04f 0200 	mov.w	r2, #0
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	00eb      	lsls	r3, r5, #3
 800600a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800600e:	00e2      	lsls	r2, r4, #3
 8006010:	4614      	mov	r4, r2
 8006012:	461d      	mov	r5, r3
 8006014:	4643      	mov	r3, r8
 8006016:	18e3      	adds	r3, r4, r3
 8006018:	603b      	str	r3, [r7, #0]
 800601a:	464b      	mov	r3, r9
 800601c:	eb45 0303 	adc.w	r3, r5, r3
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800602e:	4629      	mov	r1, r5
 8006030:	028b      	lsls	r3, r1, #10
 8006032:	4621      	mov	r1, r4
 8006034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006038:	4621      	mov	r1, r4
 800603a:	028a      	lsls	r2, r1, #10
 800603c:	4610      	mov	r0, r2
 800603e:	4619      	mov	r1, r3
 8006040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006042:	2200      	movs	r2, #0
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	61fa      	str	r2, [r7, #28]
 8006048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800604c:	f7fa fdbc 	bl	8000bc8 <__aeabi_uldivmod>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4613      	mov	r3, r2
 8006056:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006058:	4b0b      	ldr	r3, [pc, #44]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	0c1b      	lsrs	r3, r3, #16
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	3301      	adds	r3, #1
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006068:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800606a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800606c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006070:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006072:	e002      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006074:	4b05      	ldr	r3, [pc, #20]	@ (800608c <HAL_RCC_GetSysClockFreq+0x204>)
 8006076:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800607a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800607c:	4618      	mov	r0, r3
 800607e:	3750      	adds	r7, #80	@ 0x50
 8006080:	46bd      	mov	sp, r7
 8006082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006086:	bf00      	nop
 8006088:	40023800 	.word	0x40023800
 800608c:	00f42400 	.word	0x00f42400
 8006090:	007a1200 	.word	0x007a1200

08006094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006098:	4b03      	ldr	r3, [pc, #12]	@ (80060a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800609a:	681b      	ldr	r3, [r3, #0]
}
 800609c:	4618      	mov	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	20000000 	.word	0x20000000

080060ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10b      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d105      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d075      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060e0:	4b91      	ldr	r3, [pc, #580]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060e6:	f7fc fee9 	bl	8002ebc <HAL_GetTick>
 80060ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060ec:	e008      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060ee:	f7fc fee5 	bl	8002ebc <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d901      	bls.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e189      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006100:	4b8a      	ldr	r3, [pc, #552]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1f0      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d009      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	019a      	lsls	r2, r3, #6
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	071b      	lsls	r3, r3, #28
 8006124:	4981      	ldr	r1, [pc, #516]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01f      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006138:	4b7c      	ldr	r3, [pc, #496]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800613a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800613e:	0f1b      	lsrs	r3, r3, #28
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	019a      	lsls	r2, r3, #6
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	061b      	lsls	r3, r3, #24
 8006152:	431a      	orrs	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	071b      	lsls	r3, r3, #28
 8006158:	4974      	ldr	r1, [pc, #464]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006160:	4b72      	ldr	r3, [pc, #456]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006162:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006166:	f023 021f 	bic.w	r2, r3, #31
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	3b01      	subs	r3, #1
 8006170:	496e      	ldr	r1, [pc, #440]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006172:	4313      	orrs	r3, r2
 8006174:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00d      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	019a      	lsls	r2, r3, #6
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	061b      	lsls	r3, r3, #24
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	071b      	lsls	r3, r3, #28
 8006198:	4964      	ldr	r1, [pc, #400]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061a0:	4b61      	ldr	r3, [pc, #388]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80061a2:	2201      	movs	r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061a6:	f7fc fe89 	bl	8002ebc <HAL_GetTick>
 80061aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061ac:	e008      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061ae:	f7fc fe85 	bl	8002ebc <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e129      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061c0:	4b5a      	ldr	r3, [pc, #360]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0f0      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d079      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80061e4:	4b52      	ldr	r3, [pc, #328]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061ea:	f7fc fe67 	bl	8002ebc <HAL_GetTick>
 80061ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80061f0:	e008      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80061f2:	f7fc fe63 	bl	8002ebc <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d901      	bls.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e107      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006204:	4b49      	ldr	r3, [pc, #292]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800620c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006210:	d0ef      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	d020      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800621e:	4b43      	ldr	r3, [pc, #268]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006224:	0f1b      	lsrs	r3, r3, #28
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	019a      	lsls	r2, r3, #6
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	061b      	lsls	r3, r3, #24
 8006238:	431a      	orrs	r2, r3
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	071b      	lsls	r3, r3, #28
 800623e:	493b      	ldr	r1, [pc, #236]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006246:	4b39      	ldr	r3, [pc, #228]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006248:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800624c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	3b01      	subs	r3, #1
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	4934      	ldr	r1, [pc, #208]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01e      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800626c:	4b2f      	ldr	r3, [pc, #188]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006272:	0e1b      	lsrs	r3, r3, #24
 8006274:	f003 030f 	and.w	r3, r3, #15
 8006278:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	019a      	lsls	r2, r3, #6
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	061b      	lsls	r3, r3, #24
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	071b      	lsls	r3, r3, #28
 800628c:	4927      	ldr	r1, [pc, #156]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006294:	4b25      	ldr	r3, [pc, #148]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800629a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a2:	4922      	ldr	r1, [pc, #136]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80062aa:	4b21      	ldr	r3, [pc, #132]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80062ac:	2201      	movs	r2, #1
 80062ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062b0:	f7fc fe04 	bl	8002ebc <HAL_GetTick>
 80062b4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062b6:	e008      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062b8:	f7fc fe00 	bl	8002ebc <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e0a4      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062ca:	4b18      	ldr	r3, [pc, #96]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062d6:	d1ef      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 808b 	beq.w	80063fc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	4b10      	ldr	r3, [pc, #64]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ee:	4a0f      	ldr	r2, [pc, #60]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80062f6:	4b0d      	ldr	r3, [pc, #52]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006302:	4b0c      	ldr	r3, [pc, #48]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a0b      	ldr	r2, [pc, #44]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800630c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800630e:	f7fc fdd5 	bl	8002ebc <HAL_GetTick>
 8006312:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006314:	e010      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006316:	f7fc fdd1 	bl	8002ebc <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d909      	bls.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e075      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006328:	42470068 	.word	0x42470068
 800632c:	40023800 	.word	0x40023800
 8006330:	42470070 	.word	0x42470070
 8006334:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006338:	4b38      	ldr	r3, [pc, #224]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0e8      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006344:	4b36      	ldr	r3, [pc, #216]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006348:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800634c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d02f      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006358:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	429a      	cmp	r2, r3
 8006360:	d028      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006362:	4b2f      	ldr	r3, [pc, #188]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800636a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800636c:	4b2d      	ldr	r3, [pc, #180]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800636e:	2201      	movs	r2, #1
 8006370:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006372:	4b2c      	ldr	r3, [pc, #176]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006378:	4a29      	ldr	r2, [pc, #164]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800637e:	4b28      	ldr	r3, [pc, #160]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b01      	cmp	r3, #1
 8006388:	d114      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800638a:	f7fc fd97 	bl	8002ebc <HAL_GetTick>
 800638e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006390:	e00a      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006392:	f7fc fd93 	bl	8002ebc <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d901      	bls.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e035      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0ee      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063c0:	d10d      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x332>
 80063c2:	4b17      	ldr	r3, [pc, #92]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80063d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d6:	4912      	ldr	r1, [pc, #72]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	608b      	str	r3, [r1, #8]
 80063dc:	e005      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80063de:	4b10      	ldr	r3, [pc, #64]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	4a0f      	ldr	r2, [pc, #60]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063e4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80063e8:	6093      	str	r3, [r2, #8]
 80063ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063f6:	490a      	ldr	r1, [pc, #40]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	2b00      	cmp	r3, #0
 8006406:	d004      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800640e:	4b06      	ldr	r3, [pc, #24]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006410:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40007000 	.word	0x40007000
 8006420:	40023800 	.word	0x40023800
 8006424:	42470e40 	.word	0x42470e40
 8006428:	424711e0 	.word	0x424711e0

0800642c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e025      	b.n	800648c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d106      	bne.n	800645a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f81d 	bl	8006494 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2202      	movs	r2, #2
 800645e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3304      	adds	r3, #4
 800646a:	4619      	mov	r1, r3
 800646c:	4610      	mov	r0, r2
 800646e:	f000 fe93 	bl	8007198 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6818      	ldr	r0, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	461a      	mov	r2, r3
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	f000 fee8 	bl	8007252 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80064ba:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d101      	bne.n	80064c6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80064c2:	2302      	movs	r3, #2
 80064c4:	e021      	b.n	800650a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d002      	beq.n	80064d2 <HAL_SDRAM_SendCommand+0x2a>
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
 80064ce:	2b05      	cmp	r3, #5
 80064d0:	d118      	bne.n	8006504 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2202      	movs	r2, #2
 80064d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 ff1e 	bl	8007324 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d104      	bne.n	80064fa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2205      	movs	r2, #5
 80064f4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80064f8:	e006      	b.n	8006508 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006502:	e001      	b.n	8006508 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d101      	bne.n	800652c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006528:	2302      	movs	r3, #2
 800652a:	e016      	b.n	800655a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b01      	cmp	r3, #1
 8006536:	d10f      	bne.n	8006558 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f000 ff29 	bl	800739e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e000      	b.n	800655a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e07b      	b.n	800666c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006578:	2b00      	cmp	r3, #0
 800657a:	d108      	bne.n	800658e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006584:	d009      	beq.n	800659a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	61da      	str	r2, [r3, #28]
 800658c:	e005      	b.n	800659a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f885 	bl	80066c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80065e2:	431a      	orrs	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	431a      	orrs	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	431a      	orrs	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800661e:	ea42 0103 	orr.w	r1, r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006626:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	0c1b      	lsrs	r3, r3, #16
 8006638:	f003 0104 	and.w	r1, r3, #4
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006640:	f003 0210 	and.w	r2, r3, #16
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	69da      	ldr	r2, [r3, #28]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800665a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e01a      	b.n	80066bc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800669c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f81a 	bl	80066d8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	4613      	mov	r3, r2
 80066fa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066fc:	f7fc fbde 	bl	8002ebc <HAL_GetTick>
 8006700:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b01      	cmp	r3, #1
 8006710:	d001      	beq.n	8006716 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006712:	2302      	movs	r3, #2
 8006714:	e12a      	b.n	800696c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_SPI_Transmit+0x36>
 800671c:	88fb      	ldrh	r3, [r7, #6]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e122      	b.n	800696c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_SPI_Transmit+0x48>
 8006730:	2302      	movs	r3, #2
 8006732:	e11b      	b.n	800696c <HAL_SPI_Transmit+0x280>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2203      	movs	r2, #3
 8006740:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	88fa      	ldrh	r2, [r7, #6]
 8006754:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	88fa      	ldrh	r2, [r7, #6]
 800675a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006782:	d10f      	bne.n	80067a4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006792:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ae:	2b40      	cmp	r3, #64	@ 0x40
 80067b0:	d007      	beq.n	80067c2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067ca:	d152      	bne.n	8006872 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <HAL_SPI_Transmit+0xee>
 80067d4:	8b7b      	ldrh	r3, [r7, #26]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d145      	bne.n	8006866 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067de:	881a      	ldrh	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ea:	1c9a      	adds	r2, r3, #2
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067fe:	e032      	b.n	8006866 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b02      	cmp	r3, #2
 800680c:	d112      	bne.n	8006834 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006812:	881a      	ldrh	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681e:	1c9a      	adds	r2, r3, #2
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006828:	b29b      	uxth	r3, r3
 800682a:	3b01      	subs	r3, #1
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006832:	e018      	b.n	8006866 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006834:	f7fc fb42 	bl	8002ebc <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	429a      	cmp	r2, r3
 8006842:	d803      	bhi.n	800684c <HAL_SPI_Transmit+0x160>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684a:	d102      	bne.n	8006852 <HAL_SPI_Transmit+0x166>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e082      	b.n	800696c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800686a:	b29b      	uxth	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1c7      	bne.n	8006800 <HAL_SPI_Transmit+0x114>
 8006870:	e053      	b.n	800691a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_SPI_Transmit+0x194>
 800687a:	8b7b      	ldrh	r3, [r7, #26]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d147      	bne.n	8006910 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	330c      	adds	r3, #12
 800688a:	7812      	ldrb	r2, [r2, #0]
 800688c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80068a6:	e033      	b.n	8006910 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d113      	bne.n	80068de <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	330c      	adds	r3, #12
 80068c0:	7812      	ldrb	r2, [r2, #0]
 80068c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068dc:	e018      	b.n	8006910 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068de:	f7fc faed 	bl	8002ebc <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d803      	bhi.n	80068f6 <HAL_SPI_Transmit+0x20a>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f4:	d102      	bne.n	80068fc <HAL_SPI_Transmit+0x210>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d109      	bne.n	8006910 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e02d      	b.n	800696c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1c6      	bne.n	80068a8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 fbe6 	bl	80070f0 <SPI_EndRxTxTransaction>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2220      	movs	r2, #32
 800692e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800696a:	2300      	movs	r3, #0
  }
}
 800696c:	4618      	mov	r0, r3
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af02      	add	r7, sp, #8
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	4613      	mov	r3, r2
 8006982:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b01      	cmp	r3, #1
 800698e:	d001      	beq.n	8006994 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006990:	2302      	movs	r3, #2
 8006992:	e104      	b.n	8006b9e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800699c:	d112      	bne.n	80069c4 <HAL_SPI_Receive+0x50>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10e      	bne.n	80069c4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2204      	movs	r2, #4
 80069aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80069ae:	88fa      	ldrh	r2, [r7, #6]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	4613      	mov	r3, r2
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f8f3 	bl	8006ba6 <HAL_SPI_TransmitReceive>
 80069c0:	4603      	mov	r3, r0
 80069c2:	e0ec      	b.n	8006b9e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069c4:	f7fc fa7a 	bl	8002ebc <HAL_GetTick>
 80069c8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <HAL_SPI_Receive+0x62>
 80069d0:	88fb      	ldrh	r3, [r7, #6]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e0e1      	b.n	8006b9e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d101      	bne.n	80069e8 <HAL_SPI_Receive+0x74>
 80069e4:	2302      	movs	r3, #2
 80069e6:	e0da      	b.n	8006b9e <HAL_SPI_Receive+0x22a>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2204      	movs	r2, #4
 80069f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	88fa      	ldrh	r2, [r7, #6]
 8006a08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	88fa      	ldrh	r2, [r7, #6]
 8006a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a36:	d10f      	bne.n	8006a58 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a62:	2b40      	cmp	r3, #64	@ 0x40
 8006a64:	d007      	beq.n	8006a76 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d170      	bne.n	8006b60 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006a7e:	e035      	b.n	8006aec <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d115      	bne.n	8006aba <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f103 020c 	add.w	r2, r3, #12
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9a:	7812      	ldrb	r2, [r2, #0]
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ab8:	e018      	b.n	8006aec <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aba:	f7fc f9ff 	bl	8002ebc <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d803      	bhi.n	8006ad2 <HAL_SPI_Receive+0x15e>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad0:	d102      	bne.n	8006ad8 <HAL_SPI_Receive+0x164>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d109      	bne.n	8006aec <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e058      	b.n	8006b9e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1c4      	bne.n	8006a80 <HAL_SPI_Receive+0x10c>
 8006af6:	e038      	b.n	8006b6a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d113      	bne.n	8006b2e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b10:	b292      	uxth	r2, r2
 8006b12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b18:	1c9a      	adds	r2, r3, #2
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b2c:	e018      	b.n	8006b60 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b2e:	f7fc f9c5 	bl	8002ebc <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d803      	bhi.n	8006b46 <HAL_SPI_Receive+0x1d2>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d102      	bne.n	8006b4c <HAL_SPI_Receive+0x1d8>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d109      	bne.n	8006b60 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e01e      	b.n	8006b9e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1c6      	bne.n	8006af8 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 fa58 	bl	8007024 <SPI_EndRxTransaction>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
  }
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b08a      	sub	sp, #40	@ 0x28
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	607a      	str	r2, [r7, #4]
 8006bb2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bb8:	f7fc f980 	bl	8002ebc <HAL_GetTick>
 8006bbc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bc4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006bcc:	887b      	ldrh	r3, [r7, #2]
 8006bce:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006bd0:	7ffb      	ldrb	r3, [r7, #31]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d00c      	beq.n	8006bf0 <HAL_SPI_TransmitReceive+0x4a>
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bdc:	d106      	bne.n	8006bec <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d102      	bne.n	8006bec <HAL_SPI_TransmitReceive+0x46>
 8006be6:	7ffb      	ldrb	r3, [r7, #31]
 8006be8:	2b04      	cmp	r3, #4
 8006bea:	d001      	beq.n	8006bf0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006bec:	2302      	movs	r3, #2
 8006bee:	e17f      	b.n	8006ef0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d005      	beq.n	8006c02 <HAL_SPI_TransmitReceive+0x5c>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <HAL_SPI_TransmitReceive+0x5c>
 8006bfc:	887b      	ldrh	r3, [r7, #2]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e174      	b.n	8006ef0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d101      	bne.n	8006c14 <HAL_SPI_TransmitReceive+0x6e>
 8006c10:	2302      	movs	r3, #2
 8006c12:	e16d      	b.n	8006ef0 <HAL_SPI_TransmitReceive+0x34a>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d003      	beq.n	8006c30 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2205      	movs	r2, #5
 8006c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	887a      	ldrh	r2, [r7, #2]
 8006c40:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	887a      	ldrh	r2, [r7, #2]
 8006c46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	887a      	ldrh	r2, [r7, #2]
 8006c52:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	887a      	ldrh	r2, [r7, #2]
 8006c58:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c70:	2b40      	cmp	r3, #64	@ 0x40
 8006c72:	d007      	beq.n	8006c84 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c8c:	d17e      	bne.n	8006d8c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <HAL_SPI_TransmitReceive+0xf6>
 8006c96:	8afb      	ldrh	r3, [r7, #22]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d16c      	bne.n	8006d76 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca0:	881a      	ldrh	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cac:	1c9a      	adds	r2, r3, #2
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cc0:	e059      	b.n	8006d76 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d11b      	bne.n	8006d08 <HAL_SPI_TransmitReceive+0x162>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d016      	beq.n	8006d08 <HAL_SPI_TransmitReceive+0x162>
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d113      	bne.n	8006d08 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce4:	881a      	ldrh	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf0:	1c9a      	adds	r2, r3, #2
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d119      	bne.n	8006d4a <HAL_SPI_TransmitReceive+0x1a4>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d014      	beq.n	8006d4a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2a:	b292      	uxth	r2, r2
 8006d2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d32:	1c9a      	adds	r2, r3, #2
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d46:	2301      	movs	r3, #1
 8006d48:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d4a:	f7fc f8b7 	bl	8002ebc <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d80d      	bhi.n	8006d76 <HAL_SPI_TransmitReceive+0x1d0>
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d009      	beq.n	8006d76 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e0bc      	b.n	8006ef0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1a0      	bne.n	8006cc2 <HAL_SPI_TransmitReceive+0x11c>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d19b      	bne.n	8006cc2 <HAL_SPI_TransmitReceive+0x11c>
 8006d8a:	e082      	b.n	8006e92 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <HAL_SPI_TransmitReceive+0x1f4>
 8006d94:	8afb      	ldrh	r3, [r7, #22]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d171      	bne.n	8006e7e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	7812      	ldrb	r2, [r2, #0]
 8006da6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dc0:	e05d      	b.n	8006e7e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d11c      	bne.n	8006e0a <HAL_SPI_TransmitReceive+0x264>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d017      	beq.n	8006e0a <HAL_SPI_TransmitReceive+0x264>
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d114      	bne.n	8006e0a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	330c      	adds	r3, #12
 8006dea:	7812      	ldrb	r2, [r2, #0]
 8006dec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d119      	bne.n	8006e4c <HAL_SPI_TransmitReceive+0x2a6>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d014      	beq.n	8006e4c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2c:	b2d2      	uxtb	r2, r2
 8006e2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e4c:	f7fc f836 	bl	8002ebc <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d803      	bhi.n	8006e64 <HAL_SPI_TransmitReceive+0x2be>
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e62:	d102      	bne.n	8006e6a <HAL_SPI_TransmitReceive+0x2c4>
 8006e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d109      	bne.n	8006e7e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e038      	b.n	8006ef0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d19c      	bne.n	8006dc2 <HAL_SPI_TransmitReceive+0x21c>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d197      	bne.n	8006dc2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e92:	6a3a      	ldr	r2, [r7, #32]
 8006e94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f92a 	bl	80070f0 <SPI_EndRxTxTransaction>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d008      	beq.n	8006eb4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e01d      	b.n	8006ef0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	613b      	str	r3, [r7, #16]
 8006ed0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006eee:	2300      	movs	r3, #0
  }
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3728      	adds	r7, #40	@ 0x28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f06:	b2db      	uxtb	r3, r3
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b088      	sub	sp, #32
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	603b      	str	r3, [r7, #0]
 8006f20:	4613      	mov	r3, r2
 8006f22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f24:	f7fb ffca 	bl	8002ebc <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2c:	1a9b      	subs	r3, r3, r2
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	4413      	add	r3, r2
 8006f32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f34:	f7fb ffc2 	bl	8002ebc <HAL_GetTick>
 8006f38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f3a:	4b39      	ldr	r3, [pc, #228]	@ (8007020 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	015b      	lsls	r3, r3, #5
 8006f40:	0d1b      	lsrs	r3, r3, #20
 8006f42:	69fa      	ldr	r2, [r7, #28]
 8006f44:	fb02 f303 	mul.w	r3, r2, r3
 8006f48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f4a:	e054      	b.n	8006ff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d050      	beq.n	8006ff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f54:	f7fb ffb2 	bl	8002ebc <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d902      	bls.n	8006f6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d13d      	bne.n	8006fe6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f82:	d111      	bne.n	8006fa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f8c:	d004      	beq.n	8006f98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f96:	d107      	bne.n	8006fa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fb0:	d10f      	bne.n	8006fd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e017      	b.n	8007016 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4013      	ands	r3, r2
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	429a      	cmp	r2, r3
 8007004:	bf0c      	ite	eq
 8007006:	2301      	moveq	r3, #1
 8007008:	2300      	movne	r3, #0
 800700a:	b2db      	uxtb	r3, r3
 800700c:	461a      	mov	r2, r3
 800700e:	79fb      	ldrb	r3, [r7, #7]
 8007010:	429a      	cmp	r2, r3
 8007012:	d19b      	bne.n	8006f4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3720      	adds	r7, #32
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000000 	.word	0x20000000

08007024 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af02      	add	r7, sp, #8
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007038:	d111      	bne.n	800705e <SPI_EndRxTransaction+0x3a>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007042:	d004      	beq.n	800704e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800704c:	d107      	bne.n	800705e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800705c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007066:	d12a      	bne.n	80070be <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007070:	d012      	beq.n	8007098 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2200      	movs	r2, #0
 800707a:	2180      	movs	r1, #128	@ 0x80
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f7ff ff49 	bl	8006f14 <SPI_WaitFlagStateUntilTimeout>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d02d      	beq.n	80070e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800708c:	f043 0220 	orr.w	r2, r3, #32
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e026      	b.n	80070e6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2200      	movs	r2, #0
 80070a0:	2101      	movs	r1, #1
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f7ff ff36 	bl	8006f14 <SPI_WaitFlagStateUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d01a      	beq.n	80070e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070b2:	f043 0220 	orr.w	r2, r3, #32
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e013      	b.n	80070e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2200      	movs	r2, #0
 80070c6:	2101      	movs	r1, #1
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7ff ff23 	bl	8006f14 <SPI_WaitFlagStateUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d007      	beq.n	80070e4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070d8:	f043 0220 	orr.w	r2, r3, #32
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e000      	b.n	80070e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2201      	movs	r2, #1
 8007104:	2102      	movs	r1, #2
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f7ff ff04 	bl	8006f14 <SPI_WaitFlagStateUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d007      	beq.n	8007122 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007116:	f043 0220 	orr.w	r2, r3, #32
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e032      	b.n	8007188 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007122:	4b1b      	ldr	r3, [pc, #108]	@ (8007190 <SPI_EndRxTxTransaction+0xa0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a1b      	ldr	r2, [pc, #108]	@ (8007194 <SPI_EndRxTxTransaction+0xa4>)
 8007128:	fba2 2303 	umull	r2, r3, r2, r3
 800712c:	0d5b      	lsrs	r3, r3, #21
 800712e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007132:	fb02 f303 	mul.w	r3, r2, r3
 8007136:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007140:	d112      	bne.n	8007168 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2200      	movs	r2, #0
 800714a:	2180      	movs	r1, #128	@ 0x80
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7ff fee1 	bl	8006f14 <SPI_WaitFlagStateUntilTimeout>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d016      	beq.n	8007186 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800715c:	f043 0220 	orr.w	r2, r3, #32
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e00f      	b.n	8007188 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	3b01      	subs	r3, #1
 8007172:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800717e:	2b80      	cmp	r3, #128	@ 0x80
 8007180:	d0f2      	beq.n	8007168 <SPI_EndRxTxTransaction+0x78>
 8007182:	e000      	b.n	8007186 <SPI_EndRxTxTransaction+0x96>
        break;
 8007184:	bf00      	nop
  }

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20000000 	.word	0x20000000
 8007194:	165e9f81 	.word	0x165e9f81

08007198 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d123      	bne.n	80071f2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80071b2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	6851      	ldr	r1, [r2, #4]
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	6892      	ldr	r2, [r2, #8]
 80071be:	4311      	orrs	r1, r2
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	68d2      	ldr	r2, [r2, #12]
 80071c4:	4311      	orrs	r1, r2
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	6912      	ldr	r2, [r2, #16]
 80071ca:	4311      	orrs	r1, r2
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	6952      	ldr	r2, [r2, #20]
 80071d0:	4311      	orrs	r1, r2
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	6992      	ldr	r2, [r2, #24]
 80071d6:	4311      	orrs	r1, r2
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	69d2      	ldr	r2, [r2, #28]
 80071dc:	4311      	orrs	r1, r2
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	6a12      	ldr	r2, [r2, #32]
 80071e2:	4311      	orrs	r1, r2
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071e8:	430a      	orrs	r2, r1
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	e028      	b.n	8007244 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	69d9      	ldr	r1, [r3, #28]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	4319      	orrs	r1, r3
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007208:	430b      	orrs	r3, r1
 800720a:	431a      	orrs	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007218:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	6851      	ldr	r1, [r2, #4]
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	6892      	ldr	r2, [r2, #8]
 8007224:	4311      	orrs	r1, r2
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	68d2      	ldr	r2, [r2, #12]
 800722a:	4311      	orrs	r1, r2
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	6912      	ldr	r2, [r2, #16]
 8007230:	4311      	orrs	r1, r2
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	6952      	ldr	r2, [r2, #20]
 8007236:	4311      	orrs	r1, r2
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	6992      	ldr	r2, [r2, #24]
 800723c:	430a      	orrs	r2, r1
 800723e:	431a      	orrs	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007252:	b480      	push	{r7}
 8007254:	b085      	sub	sp, #20
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d128      	bne.n	80072b6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	1e59      	subs	r1, r3, #1
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	3b01      	subs	r3, #1
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	4319      	orrs	r1, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	3b01      	subs	r3, #1
 8007282:	021b      	lsls	r3, r3, #8
 8007284:	4319      	orrs	r1, r3
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	3b01      	subs	r3, #1
 800728c:	031b      	lsls	r3, r3, #12
 800728e:	4319      	orrs	r1, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	3b01      	subs	r3, #1
 8007296:	041b      	lsls	r3, r3, #16
 8007298:	4319      	orrs	r1, r3
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	3b01      	subs	r3, #1
 80072a0:	051b      	lsls	r3, r3, #20
 80072a2:	4319      	orrs	r1, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	3b01      	subs	r3, #1
 80072aa:	061b      	lsls	r3, r3, #24
 80072ac:	430b      	orrs	r3, r1
 80072ae:	431a      	orrs	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	609a      	str	r2, [r3, #8]
 80072b4:	e02f      	b.n	8007316 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80072be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	68d2      	ldr	r2, [r2, #12]
 80072c6:	3a01      	subs	r2, #1
 80072c8:	0311      	lsls	r1, r2, #12
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	6952      	ldr	r2, [r2, #20]
 80072ce:	3a01      	subs	r2, #1
 80072d0:	0512      	lsls	r2, r2, #20
 80072d2:	430a      	orrs	r2, r1
 80072d4:	431a      	orrs	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	1e59      	subs	r1, r3, #1
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	4319      	orrs	r1, r3
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	021b      	lsls	r3, r3, #8
 80072fa:	4319      	orrs	r1, r3
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	3b01      	subs	r3, #1
 8007302:	041b      	lsls	r3, r3, #16
 8007304:	4319      	orrs	r1, r3
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	3b01      	subs	r3, #1
 800730c:	061b      	lsls	r3, r3, #24
 800730e:	430b      	orrs	r3, r1
 8007310:	431a      	orrs	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	0d9b      	lsrs	r3, r3, #22
 800733a:	059b      	lsls	r3, r3, #22
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	6811      	ldr	r1, [r2, #0]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	6852      	ldr	r2, [r2, #4]
 8007344:	4311      	orrs	r1, r2
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	6892      	ldr	r2, [r2, #8]
 800734a:	3a01      	subs	r2, #1
 800734c:	0152      	lsls	r2, r2, #5
 800734e:	4311      	orrs	r1, r2
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	68d2      	ldr	r2, [r2, #12]
 8007354:	0252      	lsls	r2, r2, #9
 8007356:	430a      	orrs	r2, r1
 8007358:	431a      	orrs	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800735e:	f7fb fdad 	bl	8002ebc <HAL_GetTick>
 8007362:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007364:	e010      	b.n	8007388 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736c:	d00c      	beq.n	8007388 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d007      	beq.n	8007384 <FMC_SDRAM_SendCommand+0x60>
 8007374:	f7fb fda2 	bl	8002ebc <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	d201      	bcs.n	8007388 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e006      	b.n	8007396 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	f003 0320 	and.w	r3, r3, #32
 8007390:	2b20      	cmp	r3, #32
 8007392:	d0e8      	beq.n	8007366 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80073b0:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	0052      	lsls	r2, r2, #1
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073cc:	b084      	sub	sp, #16
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	f107 001c 	add.w	r0, r7, #28
 80073da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d123      	bne.n	800742e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80073fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800740e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007412:	2b01      	cmp	r3, #1
 8007414:	d105      	bne.n	8007422 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 fae8 	bl	80089f8 <USB_CoreReset>
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]
 800742c:	e01b      	b.n	8007466 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 fadc 	bl	80089f8 <USB_CoreReset>
 8007440:	4603      	mov	r3, r0
 8007442:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007444:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007448:	2b00      	cmp	r3, #0
 800744a:	d106      	bne.n	800745a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007450:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	639a      	str	r2, [r3, #56]	@ 0x38
 8007458:	e005      	b.n	8007466 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007466:	7fbb      	ldrb	r3, [r7, #30]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d10b      	bne.n	8007484 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f043 0206 	orr.w	r2, r3, #6
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f043 0220 	orr.w	r2, r3, #32
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007490:	b004      	add	sp, #16
 8007492:	4770      	bx	lr

08007494 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	4613      	mov	r3, r2
 80074a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80074a2:	79fb      	ldrb	r3, [r7, #7]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d165      	bne.n	8007574 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4a41      	ldr	r2, [pc, #260]	@ (80075b0 <USB_SetTurnaroundTime+0x11c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d906      	bls.n	80074be <USB_SetTurnaroundTime+0x2a>
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4a40      	ldr	r2, [pc, #256]	@ (80075b4 <USB_SetTurnaroundTime+0x120>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d202      	bcs.n	80074be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80074b8:	230f      	movs	r3, #15
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	e062      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	4a3c      	ldr	r2, [pc, #240]	@ (80075b4 <USB_SetTurnaroundTime+0x120>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d306      	bcc.n	80074d4 <USB_SetTurnaroundTime+0x40>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	4a3b      	ldr	r2, [pc, #236]	@ (80075b8 <USB_SetTurnaroundTime+0x124>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d202      	bcs.n	80074d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80074ce:	230e      	movs	r3, #14
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	e057      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4a38      	ldr	r2, [pc, #224]	@ (80075b8 <USB_SetTurnaroundTime+0x124>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d306      	bcc.n	80074ea <USB_SetTurnaroundTime+0x56>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4a37      	ldr	r2, [pc, #220]	@ (80075bc <USB_SetTurnaroundTime+0x128>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d202      	bcs.n	80074ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80074e4:	230d      	movs	r3, #13
 80074e6:	617b      	str	r3, [r7, #20]
 80074e8:	e04c      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	4a33      	ldr	r2, [pc, #204]	@ (80075bc <USB_SetTurnaroundTime+0x128>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d306      	bcc.n	8007500 <USB_SetTurnaroundTime+0x6c>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	4a32      	ldr	r2, [pc, #200]	@ (80075c0 <USB_SetTurnaroundTime+0x12c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d802      	bhi.n	8007500 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80074fa:	230c      	movs	r3, #12
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	e041      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	4a2f      	ldr	r2, [pc, #188]	@ (80075c0 <USB_SetTurnaroundTime+0x12c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d906      	bls.n	8007516 <USB_SetTurnaroundTime+0x82>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4a2e      	ldr	r2, [pc, #184]	@ (80075c4 <USB_SetTurnaroundTime+0x130>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d802      	bhi.n	8007516 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007510:	230b      	movs	r3, #11
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	e036      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	4a2a      	ldr	r2, [pc, #168]	@ (80075c4 <USB_SetTurnaroundTime+0x130>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d906      	bls.n	800752c <USB_SetTurnaroundTime+0x98>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	4a29      	ldr	r2, [pc, #164]	@ (80075c8 <USB_SetTurnaroundTime+0x134>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d802      	bhi.n	800752c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007526:	230a      	movs	r3, #10
 8007528:	617b      	str	r3, [r7, #20]
 800752a:	e02b      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4a26      	ldr	r2, [pc, #152]	@ (80075c8 <USB_SetTurnaroundTime+0x134>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d906      	bls.n	8007542 <USB_SetTurnaroundTime+0xae>
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	4a25      	ldr	r2, [pc, #148]	@ (80075cc <USB_SetTurnaroundTime+0x138>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d202      	bcs.n	8007542 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800753c:	2309      	movs	r3, #9
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	e020      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4a21      	ldr	r2, [pc, #132]	@ (80075cc <USB_SetTurnaroundTime+0x138>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d306      	bcc.n	8007558 <USB_SetTurnaroundTime+0xc4>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	4a20      	ldr	r2, [pc, #128]	@ (80075d0 <USB_SetTurnaroundTime+0x13c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d802      	bhi.n	8007558 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007552:	2308      	movs	r3, #8
 8007554:	617b      	str	r3, [r7, #20]
 8007556:	e015      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4a1d      	ldr	r2, [pc, #116]	@ (80075d0 <USB_SetTurnaroundTime+0x13c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d906      	bls.n	800756e <USB_SetTurnaroundTime+0xda>
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4a1c      	ldr	r2, [pc, #112]	@ (80075d4 <USB_SetTurnaroundTime+0x140>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d202      	bcs.n	800756e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007568:	2307      	movs	r3, #7
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	e00a      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800756e:	2306      	movs	r3, #6
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	e007      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007574:	79fb      	ldrb	r3, [r7, #7]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800757a:	2309      	movs	r3, #9
 800757c:	617b      	str	r3, [r7, #20]
 800757e:	e001      	b.n	8007584 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007580:	2309      	movs	r3, #9
 8007582:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	029b      	lsls	r3, r3, #10
 8007598:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800759c:	431a      	orrs	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	00d8acbf 	.word	0x00d8acbf
 80075b4:	00e4e1c0 	.word	0x00e4e1c0
 80075b8:	00f42400 	.word	0x00f42400
 80075bc:	01067380 	.word	0x01067380
 80075c0:	011a499f 	.word	0x011a499f
 80075c4:	01312cff 	.word	0x01312cff
 80075c8:	014ca43f 	.word	0x014ca43f
 80075cc:	016e3600 	.word	0x016e3600
 80075d0:	01a6ab1f 	.word	0x01a6ab1f
 80075d4:	01e84800 	.word	0x01e84800

080075d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f043 0201 	orr.w	r2, r3, #1
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f023 0201 	bic.w	r2, r3, #1
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d115      	bne.n	800766a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800764a:	200a      	movs	r0, #10
 800764c:	f7fb fc42 	bl	8002ed4 <HAL_Delay>
      ms += 10U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	330a      	adds	r3, #10
 8007654:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 f93f 	bl	80088da <USB_GetMode>
 800765c:	4603      	mov	r3, r0
 800765e:	2b01      	cmp	r3, #1
 8007660:	d01e      	beq.n	80076a0 <USB_SetCurrentMode+0x84>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2bc7      	cmp	r3, #199	@ 0xc7
 8007666:	d9f0      	bls.n	800764a <USB_SetCurrentMode+0x2e>
 8007668:	e01a      	b.n	80076a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800766a:	78fb      	ldrb	r3, [r7, #3]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d115      	bne.n	800769c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800767c:	200a      	movs	r0, #10
 800767e:	f7fb fc29 	bl	8002ed4 <HAL_Delay>
      ms += 10U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	330a      	adds	r3, #10
 8007686:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 f926 	bl	80088da <USB_GetMode>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d005      	beq.n	80076a0 <USB_SetCurrentMode+0x84>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2bc7      	cmp	r3, #199	@ 0xc7
 8007698:	d9f0      	bls.n	800767c <USB_SetCurrentMode+0x60>
 800769a:	e001      	b.n	80076a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e005      	b.n	80076ac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2bc8      	cmp	r3, #200	@ 0xc8
 80076a4:	d101      	bne.n	80076aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e000      	b.n	80076ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076b4:	b084      	sub	sp, #16
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b086      	sub	sp, #24
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80076c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076ce:	2300      	movs	r3, #0
 80076d0:	613b      	str	r3, [r7, #16]
 80076d2:	e009      	b.n	80076e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	3340      	adds	r3, #64	@ 0x40
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	2200      	movs	r2, #0
 80076e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	3301      	adds	r3, #1
 80076e6:	613b      	str	r3, [r7, #16]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	2b0e      	cmp	r3, #14
 80076ec:	d9f2      	bls.n	80076d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d11c      	bne.n	8007730 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007704:	f043 0302 	orr.w	r3, r3, #2
 8007708:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007726:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	639a      	str	r2, [r3, #56]	@ 0x38
 800772e:	e00b      	b.n	8007748 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007734:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007740:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800774e:	461a      	mov	r2, r3
 8007750:	2300      	movs	r3, #0
 8007752:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007754:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007758:	2b01      	cmp	r3, #1
 800775a:	d10d      	bne.n	8007778 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800775c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007760:	2b00      	cmp	r3, #0
 8007762:	d104      	bne.n	800776e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007764:	2100      	movs	r1, #0
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f968 	bl	8007a3c <USB_SetDevSpeed>
 800776c:	e008      	b.n	8007780 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800776e:	2101      	movs	r1, #1
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f963 	bl	8007a3c <USB_SetDevSpeed>
 8007776:	e003      	b.n	8007780 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007778:	2103      	movs	r1, #3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f95e 	bl	8007a3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007780:	2110      	movs	r1, #16
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f8fa 	bl	800797c <USB_FlushTxFifo>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f924 	bl	80079e0 <USB_FlushRxFifo>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077a8:	461a      	mov	r2, r3
 80077aa:	2300      	movs	r3, #0
 80077ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077b4:	461a      	mov	r2, r3
 80077b6:	2300      	movs	r3, #0
 80077b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c0:	461a      	mov	r2, r3
 80077c2:	2300      	movs	r3, #0
 80077c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077c6:	2300      	movs	r3, #0
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	e043      	b.n	8007854 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077e2:	d118      	bne.n	8007816 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10a      	bne.n	8007800 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f6:	461a      	mov	r2, r3
 80077f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	e013      	b.n	8007828 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800780c:	461a      	mov	r2, r3
 800780e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	e008      	b.n	8007828 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007822:	461a      	mov	r2, r3
 8007824:	2300      	movs	r3, #0
 8007826:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007834:	461a      	mov	r2, r3
 8007836:	2300      	movs	r3, #0
 8007838:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007846:	461a      	mov	r2, r3
 8007848:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800784c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	3301      	adds	r3, #1
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007858:	461a      	mov	r2, r3
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	4293      	cmp	r3, r2
 800785e:	d3b5      	bcc.n	80077cc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007860:	2300      	movs	r3, #0
 8007862:	613b      	str	r3, [r7, #16]
 8007864:	e043      	b.n	80078ee <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800787c:	d118      	bne.n	80078b0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007890:	461a      	mov	r2, r3
 8007892:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007896:	6013      	str	r3, [r2, #0]
 8007898:	e013      	b.n	80078c2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a6:	461a      	mov	r2, r3
 80078a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	e008      	b.n	80078c2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078bc:	461a      	mov	r2, r3
 80078be:	2300      	movs	r3, #0
 80078c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ce:	461a      	mov	r2, r3
 80078d0:	2300      	movs	r3, #0
 80078d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e0:	461a      	mov	r2, r3
 80078e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80078e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	3301      	adds	r3, #1
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80078f2:	461a      	mov	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d3b5      	bcc.n	8007866 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800790c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800791a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800791c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007920:	2b00      	cmp	r3, #0
 8007922:	d105      	bne.n	8007930 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	f043 0210 	orr.w	r2, r3, #16
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	699a      	ldr	r2, [r3, #24]
 8007934:	4b10      	ldr	r3, [pc, #64]	@ (8007978 <USB_DevInit+0x2c4>)
 8007936:	4313      	orrs	r3, r2
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800793c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007940:	2b00      	cmp	r3, #0
 8007942:	d005      	beq.n	8007950 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	f043 0208 	orr.w	r2, r3, #8
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007950:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007954:	2b01      	cmp	r3, #1
 8007956:	d107      	bne.n	8007968 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007960:	f043 0304 	orr.w	r3, r3, #4
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007968:	7dfb      	ldrb	r3, [r7, #23]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007974:	b004      	add	sp, #16
 8007976:	4770      	bx	lr
 8007978:	803c3800 	.word	0x803c3800

0800797c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	3301      	adds	r3, #1
 800798e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007996:	d901      	bls.n	800799c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e01b      	b.n	80079d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	daf2      	bge.n	800798a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	019b      	lsls	r3, r3, #6
 80079ac:	f043 0220 	orr.w	r2, r3, #32
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3301      	adds	r3, #1
 80079b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079c0:	d901      	bls.n	80079c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e006      	b.n	80079d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	d0f0      	beq.n	80079b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3301      	adds	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079f8:	d901      	bls.n	80079fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e018      	b.n	8007a30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	daf2      	bge.n	80079ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2210      	movs	r2, #16
 8007a0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	3301      	adds	r3, #1
 8007a14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a1c:	d901      	bls.n	8007a22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e006      	b.n	8007a30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f003 0310 	and.w	r3, r3, #16
 8007a2a:	2b10      	cmp	r3, #16
 8007a2c:	d0f0      	beq.n	8007a10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	68f9      	ldr	r1, [r7, #12]
 8007a58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b087      	sub	sp, #28
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f003 0306 	and.w	r3, r3, #6
 8007a86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d102      	bne.n	8007a94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	75fb      	strb	r3, [r7, #23]
 8007a92:	e00a      	b.n	8007aaa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d002      	beq.n	8007aa0 <USB_GetDevSpeed+0x32>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b06      	cmp	r3, #6
 8007a9e:	d102      	bne.n	8007aa6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	75fb      	strb	r3, [r7, #23]
 8007aa4:	e001      	b.n	8007aaa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007aa6:	230f      	movs	r3, #15
 8007aa8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	371c      	adds	r7, #28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	785b      	ldrb	r3, [r3, #1]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d13a      	bne.n	8007b4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ada:	69da      	ldr	r2, [r3, #28]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	f003 030f 	and.w	r3, r3, #15
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	68f9      	ldr	r1, [r7, #12]
 8007aee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007af2:	4313      	orrs	r3, r2
 8007af4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d155      	bne.n	8007bb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	791b      	ldrb	r3, [r3, #4]
 8007b26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	059b      	lsls	r3, r3, #22
 8007b2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b30:	4313      	orrs	r3, r2
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	0151      	lsls	r1, r2, #5
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	440a      	add	r2, r1
 8007b3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	e036      	b.n	8007bb8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b50:	69da      	ldr	r2, [r3, #28]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	f003 030f 	and.w	r3, r3, #15
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b60:	041b      	lsls	r3, r3, #16
 8007b62:	68f9      	ldr	r1, [r7, #12]
 8007b64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d11a      	bne.n	8007bb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	791b      	ldrb	r3, [r3, #4]
 8007b9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	0151      	lsls	r1, r2, #5
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	440a      	add	r2, r1
 8007baa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bb6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
	...

08007bc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d161      	bne.n	8007ca8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bfa:	d11f      	bne.n	8007c3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	0151      	lsls	r1, r2, #5
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	440a      	add	r2, r1
 8007c12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	0151      	lsls	r1, r2, #5
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	440a      	add	r2, r1
 8007c32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	f003 030f 	and.w	r3, r3, #15
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	43db      	mvns	r3, r3
 8007c56:	68f9      	ldr	r1, [r7, #12]
 8007c58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c66:	69da      	ldr	r2, [r3, #28]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	2101      	movs	r1, #1
 8007c72:	fa01 f303 	lsl.w	r3, r1, r3
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	43db      	mvns	r3, r3
 8007c7a:	68f9      	ldr	r1, [r7, #12]
 8007c7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c80:	4013      	ands	r3, r2
 8007c82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	0159      	lsls	r1, r3, #5
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	440b      	add	r3, r1
 8007c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4b35      	ldr	r3, [pc, #212]	@ (8007d78 <USB_DeactivateEndpoint+0x1b0>)
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	600b      	str	r3, [r1, #0]
 8007ca6:	e060      	b.n	8007d6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cbe:	d11f      	bne.n	8007d00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	0151      	lsls	r1, r2, #5
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	440a      	add	r2, r1
 8007cd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007cde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	0151      	lsls	r1, r2, #5
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	440a      	add	r2, r1
 8007cf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007cfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	f003 030f 	and.w	r3, r3, #15
 8007d10:	2101      	movs	r1, #1
 8007d12:	fa01 f303 	lsl.w	r3, r1, r3
 8007d16:	041b      	lsls	r3, r3, #16
 8007d18:	43db      	mvns	r3, r3
 8007d1a:	68f9      	ldr	r1, [r7, #12]
 8007d1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d20:	4013      	ands	r3, r2
 8007d22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d2a:	69da      	ldr	r2, [r3, #28]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	f003 030f 	and.w	r3, r3, #15
 8007d34:	2101      	movs	r1, #1
 8007d36:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3a:	041b      	lsls	r3, r3, #16
 8007d3c:	43db      	mvns	r3, r3
 8007d3e:	68f9      	ldr	r1, [r7, #12]
 8007d40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d44:	4013      	ands	r3, r2
 8007d46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	0159      	lsls	r1, r3, #5
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	440b      	add	r3, r1
 8007d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d62:	4619      	mov	r1, r3
 8007d64:	4b05      	ldr	r3, [pc, #20]	@ (8007d7c <USB_DeactivateEndpoint+0x1b4>)
 8007d66:	4013      	ands	r3, r2
 8007d68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	ec337800 	.word	0xec337800
 8007d7c:	eff37800 	.word	0xeff37800

08007d80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b08a      	sub	sp, #40	@ 0x28
 8007d84:	af02      	add	r7, sp, #8
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	785b      	ldrb	r3, [r3, #1]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	f040 817f 	bne.w	80080a0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d132      	bne.n	8007e10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	0151      	lsls	r1, r2, #5
 8007dbc:	69fa      	ldr	r2, [r7, #28]
 8007dbe:	440a      	add	r2, r1
 8007dc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dc4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007dc8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007dcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	0151      	lsls	r1, r2, #5
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	440a      	add	r2, r1
 8007de4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007de8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007dec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	0151      	lsls	r1, r2, #5
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	440a      	add	r2, r1
 8007e04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e08:	0cdb      	lsrs	r3, r3, #19
 8007e0a:	04db      	lsls	r3, r3, #19
 8007e0c:	6113      	str	r3, [r2, #16]
 8007e0e:	e097      	b.n	8007f40 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	0151      	lsls	r1, r2, #5
 8007e22:	69fa      	ldr	r2, [r7, #28]
 8007e24:	440a      	add	r2, r1
 8007e26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e2a:	0cdb      	lsrs	r3, r3, #19
 8007e2c:	04db      	lsls	r3, r3, #19
 8007e2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	0151      	lsls	r1, r2, #5
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	440a      	add	r2, r1
 8007e46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007e4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007e52:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d11a      	bne.n	8007e90 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	691a      	ldr	r2, [r3, #16]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d903      	bls.n	8007e6e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e8c:	6113      	str	r3, [r2, #16]
 8007e8e:	e044      	b.n	8007f1a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	4413      	add	r3, r2
 8007e9a:	1e5a      	subs	r2, r3, #1
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	4413      	add	r3, r2
 8007eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb2:	691a      	ldr	r2, [r3, #16]
 8007eb4:	8afb      	ldrh	r3, [r7, #22]
 8007eb6:	04d9      	lsls	r1, r3, #19
 8007eb8:	4ba4      	ldr	r3, [pc, #656]	@ (800814c <USB_EPStartXfer+0x3cc>)
 8007eba:	400b      	ands	r3, r1
 8007ebc:	69b9      	ldr	r1, [r7, #24]
 8007ebe:	0148      	lsls	r0, r1, #5
 8007ec0:	69f9      	ldr	r1, [r7, #28]
 8007ec2:	4401      	add	r1, r0
 8007ec4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	791b      	ldrb	r3, [r3, #4]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d122      	bne.n	8007f1a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	0151      	lsls	r1, r2, #5
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	440a      	add	r2, r1
 8007eea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eee:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007ef2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f00:	691a      	ldr	r2, [r3, #16]
 8007f02:	8afb      	ldrh	r3, [r7, #22]
 8007f04:	075b      	lsls	r3, r3, #29
 8007f06:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007f0a:	69b9      	ldr	r1, [r7, #24]
 8007f0c:	0148      	lsls	r0, r1, #5
 8007f0e:	69f9      	ldr	r1, [r7, #28]
 8007f10:	4401      	add	r1, r0
 8007f12:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007f16:	4313      	orrs	r3, r2
 8007f18:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f26:	691a      	ldr	r2, [r3, #16]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f30:	69b9      	ldr	r1, [r7, #24]
 8007f32:	0148      	lsls	r0, r1, #5
 8007f34:	69f9      	ldr	r1, [r7, #28]
 8007f36:	4401      	add	r1, r0
 8007f38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d14b      	bne.n	8007fde <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d009      	beq.n	8007f62 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	791b      	ldrb	r3, [r3, #4]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d128      	bne.n	8007fbc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d110      	bne.n	8007f9c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	0151      	lsls	r1, r2, #5
 8007f8c:	69fa      	ldr	r2, [r7, #28]
 8007f8e:	440a      	add	r2, r1
 8007f90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f98:	6013      	str	r3, [r2, #0]
 8007f9a:	e00f      	b.n	8007fbc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	0151      	lsls	r1, r2, #5
 8007fae:	69fa      	ldr	r2, [r7, #28]
 8007fb0:	440a      	add	r2, r1
 8007fb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fba:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	0151      	lsls	r1, r2, #5
 8007fce:	69fa      	ldr	r2, [r7, #28]
 8007fd0:	440a      	add	r2, r1
 8007fd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fd6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	e166      	b.n	80082ac <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	0151      	lsls	r1, r2, #5
 8007ff0:	69fa      	ldr	r2, [r7, #28]
 8007ff2:	440a      	add	r2, r1
 8007ff4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ff8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007ffc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	791b      	ldrb	r3, [r3, #4]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d015      	beq.n	8008032 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 814e 	beq.w	80082ac <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008016:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	2101      	movs	r1, #1
 8008022:	fa01 f303 	lsl.w	r3, r1, r3
 8008026:	69f9      	ldr	r1, [r7, #28]
 8008028:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800802c:	4313      	orrs	r3, r2
 800802e:	634b      	str	r3, [r1, #52]	@ 0x34
 8008030:	e13c      	b.n	80082ac <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800803e:	2b00      	cmp	r3, #0
 8008040:	d110      	bne.n	8008064 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	4413      	add	r3, r2
 800804a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	0151      	lsls	r1, r2, #5
 8008054:	69fa      	ldr	r2, [r7, #28]
 8008056:	440a      	add	r2, r1
 8008058:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800805c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008060:	6013      	str	r3, [r2, #0]
 8008062:	e00f      	b.n	8008084 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	0151      	lsls	r1, r2, #5
 8008076:	69fa      	ldr	r2, [r7, #28]
 8008078:	440a      	add	r2, r1
 800807a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800807e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008082:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	68d9      	ldr	r1, [r3, #12]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	781a      	ldrb	r2, [r3, #0]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	b298      	uxth	r0, r3
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	4603      	mov	r3, r0
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f000 f9b9 	bl	8008410 <USB_WritePacket>
 800809e:	e105      	b.n	80082ac <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	0151      	lsls	r1, r2, #5
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	440a      	add	r2, r1
 80080b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080ba:	0cdb      	lsrs	r3, r3, #19
 80080bc:	04db      	lsls	r3, r3, #19
 80080be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	0151      	lsls	r1, r2, #5
 80080d2:	69fa      	ldr	r2, [r7, #28]
 80080d4:	440a      	add	r2, r1
 80080d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080da:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80080de:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80080e2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d132      	bne.n	8008150 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	689a      	ldr	r2, [r3, #8]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008118:	69b9      	ldr	r1, [r7, #24]
 800811a:	0148      	lsls	r0, r1, #5
 800811c:	69f9      	ldr	r1, [r7, #28]
 800811e:	4401      	add	r1, r0
 8008120:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008124:	4313      	orrs	r3, r2
 8008126:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	4413      	add	r3, r2
 8008130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	0151      	lsls	r1, r2, #5
 800813a:	69fa      	ldr	r2, [r7, #28]
 800813c:	440a      	add	r2, r1
 800813e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008142:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008146:	6113      	str	r3, [r2, #16]
 8008148:	e062      	b.n	8008210 <USB_EPStartXfer+0x490>
 800814a:	bf00      	nop
 800814c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d123      	bne.n	80081a0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008164:	691a      	ldr	r2, [r3, #16]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800816e:	69b9      	ldr	r1, [r7, #24]
 8008170:	0148      	lsls	r0, r1, #5
 8008172:	69f9      	ldr	r1, [r7, #28]
 8008174:	4401      	add	r1, r0
 8008176:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800817a:	4313      	orrs	r3, r2
 800817c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	0151      	lsls	r1, r2, #5
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	440a      	add	r2, r1
 8008194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008198:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800819c:	6113      	str	r3, [r2, #16]
 800819e:	e037      	b.n	8008210 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	691a      	ldr	r2, [r3, #16]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	4413      	add	r3, r2
 80081aa:	1e5a      	subs	r2, r3, #1
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	8afa      	ldrh	r2, [r7, #22]
 80081bc:	fb03 f202 	mul.w	r2, r3, r2
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d0:	691a      	ldr	r2, [r3, #16]
 80081d2:	8afb      	ldrh	r3, [r7, #22]
 80081d4:	04d9      	lsls	r1, r3, #19
 80081d6:	4b38      	ldr	r3, [pc, #224]	@ (80082b8 <USB_EPStartXfer+0x538>)
 80081d8:	400b      	ands	r3, r1
 80081da:	69b9      	ldr	r1, [r7, #24]
 80081dc:	0148      	lsls	r0, r1, #5
 80081de:	69f9      	ldr	r1, [r7, #28]
 80081e0:	4401      	add	r1, r0
 80081e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80081e6:	4313      	orrs	r3, r2
 80081e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	015a      	lsls	r2, r3, #5
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081f6:	691a      	ldr	r2, [r3, #16]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008200:	69b9      	ldr	r1, [r7, #24]
 8008202:	0148      	lsls	r0, r1, #5
 8008204:	69f9      	ldr	r1, [r7, #28]
 8008206:	4401      	add	r1, r0
 8008208:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800820c:	4313      	orrs	r3, r2
 800820e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d10d      	bne.n	8008232 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d009      	beq.n	8008232 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	68d9      	ldr	r1, [r3, #12]
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	4413      	add	r3, r2
 800822a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800822e:	460a      	mov	r2, r1
 8008230:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	791b      	ldrb	r3, [r3, #4]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d128      	bne.n	800828c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008246:	2b00      	cmp	r3, #0
 8008248:	d110      	bne.n	800826c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	4413      	add	r3, r2
 8008252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	0151      	lsls	r1, r2, #5
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	440a      	add	r2, r1
 8008260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008264:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	e00f      	b.n	800828c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	0151      	lsls	r1, r2, #5
 800827e:	69fa      	ldr	r2, [r7, #28]
 8008280:	440a      	add	r2, r1
 8008282:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800828a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	0151      	lsls	r1, r2, #5
 800829e:	69fa      	ldr	r2, [r7, #28]
 80082a0:	440a      	add	r2, r1
 80082a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80082aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3720      	adds	r7, #32
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	1ff80000 	.word	0x1ff80000

080082bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	785b      	ldrb	r3, [r3, #1]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d14a      	bne.n	8008370 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082f2:	f040 8086 	bne.w	8008402 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	7812      	ldrb	r2, [r2, #0]
 800830a:	0151      	lsls	r1, r2, #5
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	440a      	add	r2, r1
 8008310:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008314:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008318:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	7812      	ldrb	r2, [r2, #0]
 800832e:	0151      	lsls	r1, r2, #5
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	440a      	add	r2, r1
 8008334:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008338:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800833c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3301      	adds	r3, #1
 8008342:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f242 7210 	movw	r2, #10000	@ 0x2710
 800834a:	4293      	cmp	r3, r2
 800834c:	d902      	bls.n	8008354 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	75fb      	strb	r3, [r7, #23]
          break;
 8008352:	e056      	b.n	8008402 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008368:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800836c:	d0e7      	beq.n	800833e <USB_EPStopXfer+0x82>
 800836e:	e048      	b.n	8008402 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008384:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008388:	d13b      	bne.n	8008402 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	7812      	ldrb	r2, [r2, #0]
 800839e:	0151      	lsls	r1, r2, #5
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	440a      	add	r2, r1
 80083a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80083ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	7812      	ldrb	r2, [r2, #0]
 80083c2:	0151      	lsls	r1, r2, #5
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	440a      	add	r2, r1
 80083c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3301      	adds	r3, #1
 80083d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80083de:	4293      	cmp	r3, r2
 80083e0:	d902      	bls.n	80083e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	75fb      	strb	r3, [r7, #23]
          break;
 80083e6:	e00c      	b.n	8008402 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008400:	d0e7      	beq.n	80083d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
}
 8008404:	4618      	mov	r0, r3
 8008406:	371c      	adds	r7, #28
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008410:	b480      	push	{r7}
 8008412:	b089      	sub	sp, #36	@ 0x24
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	4611      	mov	r1, r2
 800841c:	461a      	mov	r2, r3
 800841e:	460b      	mov	r3, r1
 8008420:	71fb      	strb	r3, [r7, #7]
 8008422:	4613      	mov	r3, r2
 8008424:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800842e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008432:	2b00      	cmp	r3, #0
 8008434:	d123      	bne.n	800847e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008436:	88bb      	ldrh	r3, [r7, #4]
 8008438:	3303      	adds	r3, #3
 800843a:	089b      	lsrs	r3, r3, #2
 800843c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800843e:	2300      	movs	r3, #0
 8008440:	61bb      	str	r3, [r7, #24]
 8008442:	e018      	b.n	8008476 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	031a      	lsls	r2, r3, #12
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	4413      	add	r3, r2
 800844c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008450:	461a      	mov	r2, r3
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	3301      	adds	r3, #1
 800845c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	3301      	adds	r3, #1
 8008462:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	3301      	adds	r3, #1
 8008468:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	3301      	adds	r3, #1
 800846e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	3301      	adds	r3, #1
 8008474:	61bb      	str	r3, [r7, #24]
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	429a      	cmp	r2, r3
 800847c:	d3e2      	bcc.n	8008444 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3724      	adds	r7, #36	@ 0x24
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800848c:	b480      	push	{r7}
 800848e:	b08b      	sub	sp, #44	@ 0x2c
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	4613      	mov	r3, r2
 8008498:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80084a2:	88fb      	ldrh	r3, [r7, #6]
 80084a4:	089b      	lsrs	r3, r3, #2
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80084aa:	88fb      	ldrh	r3, [r7, #6]
 80084ac:	f003 0303 	and.w	r3, r3, #3
 80084b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80084b2:	2300      	movs	r3, #0
 80084b4:	623b      	str	r3, [r7, #32]
 80084b6:	e014      	b.n	80084e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80084c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c6:	3301      	adds	r3, #1
 80084c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	3301      	adds	r3, #1
 80084ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d2:	3301      	adds	r3, #1
 80084d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	3301      	adds	r3, #1
 80084da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	3301      	adds	r3, #1
 80084e0:	623b      	str	r3, [r7, #32]
 80084e2:	6a3a      	ldr	r2, [r7, #32]
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d3e6      	bcc.n	80084b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80084ea:	8bfb      	ldrh	r3, [r7, #30]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d01e      	beq.n	800852e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084fa:	461a      	mov	r2, r3
 80084fc:	f107 0310 	add.w	r3, r7, #16
 8008500:	6812      	ldr	r2, [r2, #0]
 8008502:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	b2db      	uxtb	r3, r3
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	fa22 f303 	lsr.w	r3, r2, r3
 8008510:	b2da      	uxtb	r2, r3
 8008512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008514:	701a      	strb	r2, [r3, #0]
      i++;
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	3301      	adds	r3, #1
 800851a:	623b      	str	r3, [r7, #32]
      pDest++;
 800851c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851e:	3301      	adds	r3, #1
 8008520:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008522:	8bfb      	ldrh	r3, [r7, #30]
 8008524:	3b01      	subs	r3, #1
 8008526:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008528:	8bfb      	ldrh	r3, [r7, #30]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1ea      	bne.n	8008504 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800852e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008530:	4618      	mov	r0, r3
 8008532:	372c      	adds	r7, #44	@ 0x2c
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	785b      	ldrb	r3, [r3, #1]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d12c      	bne.n	80085b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	db12      	blt.n	8008590 <USB_EPSetStall+0x54>
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00f      	beq.n	8008590 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4413      	add	r3, r2
 8008578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	0151      	lsls	r1, r2, #5
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	440a      	add	r2, r1
 8008586:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800858a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800858e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	e02b      	b.n	800860a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	db12      	blt.n	80085ea <USB_EPSetStall+0xae>
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00f      	beq.n	80085ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	0151      	lsls	r1, r2, #5
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	440a      	add	r2, r1
 80085e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80085e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	0151      	lsls	r1, r2, #5
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	440a      	add	r2, r1
 8008600:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008604:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008608:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	785b      	ldrb	r3, [r3, #1]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d128      	bne.n	8008686 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	0151      	lsls	r1, r2, #5
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	440a      	add	r2, r1
 800864a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800864e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008652:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	791b      	ldrb	r3, [r3, #4]
 8008658:	2b03      	cmp	r3, #3
 800865a:	d003      	beq.n	8008664 <USB_EPClearStall+0x4c>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	791b      	ldrb	r3, [r3, #4]
 8008660:	2b02      	cmp	r3, #2
 8008662:	d138      	bne.n	80086d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	0151      	lsls	r1, r2, #5
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	440a      	add	r2, r1
 800867a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800867e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	e027      	b.n	80086d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4413      	add	r3, r2
 800868e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	0151      	lsls	r1, r2, #5
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	440a      	add	r2, r1
 800869c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80086a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	791b      	ldrb	r3, [r3, #4]
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d003      	beq.n	80086b6 <USB_EPClearStall+0x9e>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	791b      	ldrb	r3, [r3, #4]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d10f      	bne.n	80086d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	0151      	lsls	r1, r2, #5
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	440a      	add	r2, r1
 80086cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008702:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008706:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008718:	68f9      	ldr	r1, [r7, #12]
 800871a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800871e:	4313      	orrs	r3, r2
 8008720:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800874a:	f023 0303 	bic.w	r3, r3, #3
 800874e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800875e:	f023 0302 	bic.w	r3, r3, #2
 8008762:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008772:	b480      	push	{r7}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800878c:	f023 0303 	bic.w	r3, r3, #3
 8008790:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087a0:	f043 0302 	orr.w	r3, r3, #2
 80087a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4013      	ands	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80087cc:	68fb      	ldr	r3, [r7, #12]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80087da:	b480      	push	{r7}
 80087dc:	b085      	sub	sp, #20
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	4013      	ands	r3, r2
 80087fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	0c1b      	lsrs	r3, r3, #16
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800880e:	b480      	push	{r7}
 8008810:	b085      	sub	sp, #20
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800882a:	69db      	ldr	r3, [r3, #28]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	4013      	ands	r3, r2
 8008830:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	b29b      	uxth	r3, r3
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008842:	b480      	push	{r7}
 8008844:	b085      	sub	sp, #20
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008852:	78fb      	ldrb	r3, [r7, #3]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	4013      	ands	r3, r2
 800886e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008870:	68bb      	ldr	r3, [r7, #8]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800887e:	b480      	push	{r7}
 8008880:	b087      	sub	sp, #28
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	460b      	mov	r3, r1
 8008888:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800889e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80088a2:	78fb      	ldrb	r3, [r7, #3]
 80088a4:	f003 030f 	and.w	r3, r3, #15
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	fa22 f303 	lsr.w	r3, r2, r3
 80088ae:	01db      	lsls	r3, r3, #7
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	4013      	ands	r3, r2
 80088ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088cc:	68bb      	ldr	r3, [r7, #8]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80088da:	b480      	push	{r7}
 80088dc:	b083      	sub	sp, #12
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	f003 0301 	and.w	r3, r3, #1
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b085      	sub	sp, #20
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008910:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008914:	f023 0307 	bic.w	r3, r3, #7
 8008918:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800892c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800893c:	b480      	push	{r7}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	460b      	mov	r3, r1
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	333c      	adds	r3, #60	@ 0x3c
 8008952:	3304      	adds	r3, #4
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	4a26      	ldr	r2, [pc, #152]	@ (80089f4 <USB_EP0_OutStart+0xb8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d90a      	bls.n	8008976 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800896c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008970:	d101      	bne.n	8008976 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	e037      	b.n	80089e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800897c:	461a      	mov	r2, r3
 800897e:	2300      	movs	r3, #0
 8008980:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008990:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008994:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089a4:	f043 0318 	orr.w	r3, r3, #24
 80089a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089b8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80089bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80089be:	7afb      	ldrb	r3, [r7, #11]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d10f      	bne.n	80089e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ca:	461a      	mov	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089de:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80089e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	4f54300a 	.word	0x4f54300a

080089f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3301      	adds	r3, #1
 8008a08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a10:	d901      	bls.n	8008a16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e01b      	b.n	8008a4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	daf2      	bge.n	8008a04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	f043 0201 	orr.w	r2, r3, #1
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3301      	adds	r3, #1
 8008a32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a3a:	d901      	bls.n	8008a40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e006      	b.n	8008a4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d0f0      	beq.n	8008a2e <USB_CoreReset+0x36>

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
	...

08008a5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a68:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008a6c:	f002 fca0 	bl	800b3b0 <USBD_static_malloc>
 8008a70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d109      	bne.n	8008a8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	32b0      	adds	r2, #176	@ 0xb0
 8008a82:	2100      	movs	r1, #0
 8008a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008a88:	2302      	movs	r3, #2
 8008a8a:	e0d4      	b.n	8008c36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008a8c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008a90:	2100      	movs	r1, #0
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f003 fa4d 	bl	800bf32 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	32b0      	adds	r2, #176	@ 0xb0
 8008aa2:	68f9      	ldr	r1, [r7, #12]
 8008aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	32b0      	adds	r2, #176	@ 0xb0
 8008ab2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	7c1b      	ldrb	r3, [r3, #16]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d138      	bne.n	8008b36 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008ac4:	4b5e      	ldr	r3, [pc, #376]	@ (8008c40 <USBD_CDC_Init+0x1e4>)
 8008ac6:	7819      	ldrb	r1, [r3, #0]
 8008ac8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008acc:	2202      	movs	r2, #2
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f002 fb4b 	bl	800b16a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008ad4:	4b5a      	ldr	r3, [pc, #360]	@ (8008c40 <USBD_CDC_Init+0x1e4>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	f003 020f 	and.w	r2, r3, #15
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	440b      	add	r3, r1
 8008ae8:	3324      	adds	r3, #36	@ 0x24
 8008aea:	2201      	movs	r2, #1
 8008aec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008aee:	4b55      	ldr	r3, [pc, #340]	@ (8008c44 <USBD_CDC_Init+0x1e8>)
 8008af0:	7819      	ldrb	r1, [r3, #0]
 8008af2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008af6:	2202      	movs	r2, #2
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f002 fb36 	bl	800b16a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008afe:	4b51      	ldr	r3, [pc, #324]	@ (8008c44 <USBD_CDC_Init+0x1e8>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	f003 020f 	and.w	r2, r3, #15
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	440b      	add	r3, r1
 8008b12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b16:	2201      	movs	r2, #1
 8008b18:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8008c48 <USBD_CDC_Init+0x1ec>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	f003 020f 	and.w	r2, r3, #15
 8008b22:	6879      	ldr	r1, [r7, #4]
 8008b24:	4613      	mov	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	440b      	add	r3, r1
 8008b2e:	3326      	adds	r3, #38	@ 0x26
 8008b30:	2210      	movs	r2, #16
 8008b32:	801a      	strh	r2, [r3, #0]
 8008b34:	e035      	b.n	8008ba2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008b36:	4b42      	ldr	r3, [pc, #264]	@ (8008c40 <USBD_CDC_Init+0x1e4>)
 8008b38:	7819      	ldrb	r1, [r3, #0]
 8008b3a:	2340      	movs	r3, #64	@ 0x40
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f002 fb13 	bl	800b16a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008b44:	4b3e      	ldr	r3, [pc, #248]	@ (8008c40 <USBD_CDC_Init+0x1e4>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	f003 020f 	and.w	r2, r3, #15
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	440b      	add	r3, r1
 8008b58:	3324      	adds	r3, #36	@ 0x24
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008b5e:	4b39      	ldr	r3, [pc, #228]	@ (8008c44 <USBD_CDC_Init+0x1e8>)
 8008b60:	7819      	ldrb	r1, [r3, #0]
 8008b62:	2340      	movs	r3, #64	@ 0x40
 8008b64:	2202      	movs	r2, #2
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f002 faff 	bl	800b16a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008b6c:	4b35      	ldr	r3, [pc, #212]	@ (8008c44 <USBD_CDC_Init+0x1e8>)
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	f003 020f 	and.w	r2, r3, #15
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	4613      	mov	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	440b      	add	r3, r1
 8008b80:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b84:	2201      	movs	r2, #1
 8008b86:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008b88:	4b2f      	ldr	r3, [pc, #188]	@ (8008c48 <USBD_CDC_Init+0x1ec>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	f003 020f 	and.w	r2, r3, #15
 8008b90:	6879      	ldr	r1, [r7, #4]
 8008b92:	4613      	mov	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	440b      	add	r3, r1
 8008b9c:	3326      	adds	r3, #38	@ 0x26
 8008b9e:	2210      	movs	r2, #16
 8008ba0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ba2:	4b29      	ldr	r3, [pc, #164]	@ (8008c48 <USBD_CDC_Init+0x1ec>)
 8008ba4:	7819      	ldrb	r1, [r3, #0]
 8008ba6:	2308      	movs	r3, #8
 8008ba8:	2203      	movs	r2, #3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f002 fadd 	bl	800b16a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008bb0:	4b25      	ldr	r3, [pc, #148]	@ (8008c48 <USBD_CDC_Init+0x1ec>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	f003 020f 	and.w	r2, r3, #15
 8008bb8:	6879      	ldr	r1, [r7, #4]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	440b      	add	r3, r1
 8008bc4:	3324      	adds	r3, #36	@ 0x24
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	33b0      	adds	r3, #176	@ 0xb0
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008c00:	2302      	movs	r3, #2
 8008c02:	e018      	b.n	8008c36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	7c1b      	ldrb	r3, [r3, #16]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10a      	bne.n	8008c22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008c44 <USBD_CDC_Init+0x1e8>)
 8008c0e:	7819      	ldrb	r1, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f002 fb94 	bl	800b348 <USBD_LL_PrepareReceive>
 8008c20:	e008      	b.n	8008c34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c22:	4b08      	ldr	r3, [pc, #32]	@ (8008c44 <USBD_CDC_Init+0x1e8>)
 8008c24:	7819      	ldrb	r1, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c2c:	2340      	movs	r3, #64	@ 0x40
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f002 fb8a 	bl	800b348 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	2000010f 	.word	0x2000010f
 8008c44:	20000110 	.word	0x20000110
 8008c48:	20000111 	.word	0x20000111

08008c4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008c58:	4b3a      	ldr	r3, [pc, #232]	@ (8008d44 <USBD_CDC_DeInit+0xf8>)
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f002 faa9 	bl	800b1b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008c64:	4b37      	ldr	r3, [pc, #220]	@ (8008d44 <USBD_CDC_DeInit+0xf8>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	f003 020f 	and.w	r2, r3, #15
 8008c6c:	6879      	ldr	r1, [r7, #4]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	440b      	add	r3, r1
 8008c78:	3324      	adds	r3, #36	@ 0x24
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008c7e:	4b32      	ldr	r3, [pc, #200]	@ (8008d48 <USBD_CDC_DeInit+0xfc>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f002 fa96 	bl	800b1b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8008d48 <USBD_CDC_DeInit+0xfc>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	f003 020f 	and.w	r2, r3, #15
 8008c92:	6879      	ldr	r1, [r7, #4]
 8008c94:	4613      	mov	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	440b      	add	r3, r1
 8008c9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008ca6:	4b29      	ldr	r3, [pc, #164]	@ (8008d4c <USBD_CDC_DeInit+0x100>)
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f002 fa82 	bl	800b1b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008cb2:	4b26      	ldr	r3, [pc, #152]	@ (8008d4c <USBD_CDC_DeInit+0x100>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	f003 020f 	and.w	r2, r3, #15
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	440b      	add	r3, r1
 8008cc6:	3324      	adds	r3, #36	@ 0x24
 8008cc8:	2200      	movs	r2, #0
 8008cca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8008d4c <USBD_CDC_DeInit+0x100>)
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	f003 020f 	and.w	r2, r3, #15
 8008cd4:	6879      	ldr	r1, [r7, #4]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	440b      	add	r3, r1
 8008ce0:	3326      	adds	r3, #38	@ 0x26
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	32b0      	adds	r2, #176	@ 0xb0
 8008cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d01f      	beq.n	8008d38 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	33b0      	adds	r3, #176	@ 0xb0
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	32b0      	adds	r2, #176	@ 0xb0
 8008d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f002 fb56 	bl	800b3cc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	32b0      	adds	r2, #176	@ 0xb0
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	2000010f 	.word	0x2000010f
 8008d48:	20000110 	.word	0x20000110
 8008d4c:	20000111 	.word	0x20000111

08008d50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	32b0      	adds	r2, #176	@ 0xb0
 8008d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e0bf      	b.n	8008f00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d050      	beq.n	8008e2e <USBD_CDC_Setup+0xde>
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	f040 80af 	bne.w	8008ef0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	88db      	ldrh	r3, [r3, #6]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d03a      	beq.n	8008e10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	b25b      	sxtb	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	da1b      	bge.n	8008ddc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	33b0      	adds	r3, #176	@ 0xb0
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4413      	add	r3, r2
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008dba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	88d2      	ldrh	r2, [r2, #6]
 8008dc0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	88db      	ldrh	r3, [r3, #6]
 8008dc6:	2b07      	cmp	r3, #7
 8008dc8:	bf28      	it	cs
 8008dca:	2307      	movcs	r3, #7
 8008dcc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	89fa      	ldrh	r2, [r7, #14]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f001 fd93 	bl	800a900 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008dda:	e090      	b.n	8008efe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	785a      	ldrb	r2, [r3, #1]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	88db      	ldrh	r3, [r3, #6]
 8008dea:	2b3f      	cmp	r3, #63	@ 0x3f
 8008dec:	d803      	bhi.n	8008df6 <USBD_CDC_Setup+0xa6>
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	88db      	ldrh	r3, [r3, #6]
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	e000      	b.n	8008df8 <USBD_CDC_Setup+0xa8>
 8008df6:	2240      	movs	r2, #64	@ 0x40
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008dfe:	6939      	ldr	r1, [r7, #16]
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008e06:	461a      	mov	r2, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 fda5 	bl	800a958 <USBD_CtlPrepareRx>
      break;
 8008e0e:	e076      	b.n	8008efe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	33b0      	adds	r3, #176	@ 0xb0
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	7850      	ldrb	r0, [r2, #1]
 8008e26:	2200      	movs	r2, #0
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	4798      	blx	r3
      break;
 8008e2c:	e067      	b.n	8008efe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	785b      	ldrb	r3, [r3, #1]
 8008e32:	2b0b      	cmp	r3, #11
 8008e34:	d851      	bhi.n	8008eda <USBD_CDC_Setup+0x18a>
 8008e36:	a201      	add	r2, pc, #4	@ (adr r2, 8008e3c <USBD_CDC_Setup+0xec>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008e6d 	.word	0x08008e6d
 8008e40:	08008ee9 	.word	0x08008ee9
 8008e44:	08008edb 	.word	0x08008edb
 8008e48:	08008edb 	.word	0x08008edb
 8008e4c:	08008edb 	.word	0x08008edb
 8008e50:	08008edb 	.word	0x08008edb
 8008e54:	08008edb 	.word	0x08008edb
 8008e58:	08008edb 	.word	0x08008edb
 8008e5c:	08008edb 	.word	0x08008edb
 8008e60:	08008edb 	.word	0x08008edb
 8008e64:	08008e97 	.word	0x08008e97
 8008e68:	08008ec1 	.word	0x08008ec1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	d107      	bne.n	8008e88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008e78:	f107 030a 	add.w	r3, r7, #10
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 fd3d 	bl	800a900 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e86:	e032      	b.n	8008eee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f001 fcbb 	bl	800a806 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e90:	2303      	movs	r3, #3
 8008e92:	75fb      	strb	r3, [r7, #23]
          break;
 8008e94:	e02b      	b.n	8008eee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d107      	bne.n	8008eb2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ea2:	f107 030d 	add.w	r3, r7, #13
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f001 fd28 	bl	800a900 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008eb0:	e01d      	b.n	8008eee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f001 fca6 	bl	800a806 <USBD_CtlError>
            ret = USBD_FAIL;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8008ebe:	e016      	b.n	8008eee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b03      	cmp	r3, #3
 8008eca:	d00f      	beq.n	8008eec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f001 fc99 	bl	800a806 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ed8:	e008      	b.n	8008eec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f001 fc92 	bl	800a806 <USBD_CtlError>
          ret = USBD_FAIL;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ee6:	e002      	b.n	8008eee <USBD_CDC_Setup+0x19e>
          break;
 8008ee8:	bf00      	nop
 8008eea:	e008      	b.n	8008efe <USBD_CDC_Setup+0x1ae>
          break;
 8008eec:	bf00      	nop
      }
      break;
 8008eee:	e006      	b.n	8008efe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008ef0:	6839      	ldr	r1, [r7, #0]
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f001 fc87 	bl	800a806 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	75fb      	strb	r3, [r7, #23]
      break;
 8008efc:	bf00      	nop
  }

  return (uint8_t)ret;
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	32b0      	adds	r2, #176	@ 0xb0
 8008f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e065      	b.n	8008ffe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	32b0      	adds	r2, #176	@ 0xb0
 8008f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008f42:	78fb      	ldrb	r3, [r7, #3]
 8008f44:	f003 020f 	and.w	r2, r3, #15
 8008f48:	6879      	ldr	r1, [r7, #4]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4413      	add	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	440b      	add	r3, r1
 8008f54:	3318      	adds	r3, #24
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d02f      	beq.n	8008fbc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	f003 020f 	and.w	r2, r3, #15
 8008f62:	6879      	ldr	r1, [r7, #4]
 8008f64:	4613      	mov	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	440b      	add	r3, r1
 8008f6e:	3318      	adds	r3, #24
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	78fb      	ldrb	r3, [r7, #3]
 8008f74:	f003 010f 	and.w	r1, r3, #15
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	440b      	add	r3, r1
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4403      	add	r3, r0
 8008f84:	331c      	adds	r3, #28
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f8c:	fb01 f303 	mul.w	r3, r1, r3
 8008f90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d112      	bne.n	8008fbc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	f003 020f 	and.w	r2, r3, #15
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	440b      	add	r3, r1
 8008fa8:	3318      	adds	r3, #24
 8008faa:	2200      	movs	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fae:	78f9      	ldrb	r1, [r7, #3]
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f002 f9a6 	bl	800b306 <USBD_LL_Transmit>
 8008fba:	e01f      	b.n	8008ffc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	33b0      	adds	r3, #176	@ 0xb0
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d010      	beq.n	8008ffc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	33b0      	adds	r3, #176	@ 0xb0
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008ff8:	78fa      	ldrb	r2, [r7, #3]
 8008ffa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	32b0      	adds	r2, #176	@ 0xb0
 800901c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009020:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	32b0      	adds	r2, #176	@ 0xb0
 800902c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d101      	bne.n	8009038 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009034:	2303      	movs	r3, #3
 8009036:	e01a      	b.n	800906e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	4619      	mov	r1, r3
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f002 f9a4 	bl	800b38a <USBD_LL_GetRxDataSize>
 8009042:	4602      	mov	r2, r0
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	33b0      	adds	r3, #176	@ 0xb0
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009068:	4611      	mov	r1, r2
 800906a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	32b0      	adds	r2, #176	@ 0xb0
 8009088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800908c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009094:	2303      	movs	r3, #3
 8009096:	e024      	b.n	80090e2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	33b0      	adds	r3, #176	@ 0xb0
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d019      	beq.n	80090e0 <USBD_CDC_EP0_RxReady+0x6a>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80090b2:	2bff      	cmp	r3, #255	@ 0xff
 80090b4:	d014      	beq.n	80090e0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	33b0      	adds	r3, #176	@ 0xb0
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80090ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80090d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	22ff      	movs	r2, #255	@ 0xff
 80090dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80090f4:	2182      	movs	r1, #130	@ 0x82
 80090f6:	4818      	ldr	r0, [pc, #96]	@ (8009158 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80090f8:	f000 fd4f 	bl	8009b9a <USBD_GetEpDesc>
 80090fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80090fe:	2101      	movs	r1, #1
 8009100:	4815      	ldr	r0, [pc, #84]	@ (8009158 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009102:	f000 fd4a 	bl	8009b9a <USBD_GetEpDesc>
 8009106:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009108:	2181      	movs	r1, #129	@ 0x81
 800910a:	4813      	ldr	r0, [pc, #76]	@ (8009158 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800910c:	f000 fd45 	bl	8009b9a <USBD_GetEpDesc>
 8009110:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	2210      	movs	r2, #16
 800911c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d006      	beq.n	8009132 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	2200      	movs	r2, #0
 8009128:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800912c:	711a      	strb	r2, [r3, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d006      	beq.n	8009146 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009140:	711a      	strb	r2, [r3, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2243      	movs	r2, #67	@ 0x43
 800914a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800914c:	4b02      	ldr	r3, [pc, #8]	@ (8009158 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800914e:	4618      	mov	r0, r3
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	200000cc 	.word	0x200000cc

0800915c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009164:	2182      	movs	r1, #130	@ 0x82
 8009166:	4818      	ldr	r0, [pc, #96]	@ (80091c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009168:	f000 fd17 	bl	8009b9a <USBD_GetEpDesc>
 800916c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800916e:	2101      	movs	r1, #1
 8009170:	4815      	ldr	r0, [pc, #84]	@ (80091c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009172:	f000 fd12 	bl	8009b9a <USBD_GetEpDesc>
 8009176:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009178:	2181      	movs	r1, #129	@ 0x81
 800917a:	4813      	ldr	r0, [pc, #76]	@ (80091c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800917c:	f000 fd0d 	bl	8009b9a <USBD_GetEpDesc>
 8009180:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d002      	beq.n	800918e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	2210      	movs	r2, #16
 800918c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d006      	beq.n	80091a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	2200      	movs	r2, #0
 8009198:	711a      	strb	r2, [r3, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f042 0202 	orr.w	r2, r2, #2
 80091a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d006      	beq.n	80091b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	711a      	strb	r2, [r3, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f042 0202 	orr.w	r2, r2, #2
 80091b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2243      	movs	r2, #67	@ 0x43
 80091ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80091bc:	4b02      	ldr	r3, [pc, #8]	@ (80091c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	200000cc 	.word	0x200000cc

080091cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80091d4:	2182      	movs	r1, #130	@ 0x82
 80091d6:	4818      	ldr	r0, [pc, #96]	@ (8009238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80091d8:	f000 fcdf 	bl	8009b9a <USBD_GetEpDesc>
 80091dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80091de:	2101      	movs	r1, #1
 80091e0:	4815      	ldr	r0, [pc, #84]	@ (8009238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80091e2:	f000 fcda 	bl	8009b9a <USBD_GetEpDesc>
 80091e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80091e8:	2181      	movs	r1, #129	@ 0x81
 80091ea:	4813      	ldr	r0, [pc, #76]	@ (8009238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80091ec:	f000 fcd5 	bl	8009b9a <USBD_GetEpDesc>
 80091f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2210      	movs	r2, #16
 80091fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d006      	beq.n	8009212 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	2200      	movs	r2, #0
 8009208:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800920c:	711a      	strb	r2, [r3, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d006      	beq.n	8009226 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009220:	711a      	strb	r2, [r3, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2243      	movs	r2, #67	@ 0x43
 800922a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800922c:	4b02      	ldr	r3, [pc, #8]	@ (8009238 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800922e:	4618      	mov	r0, r3
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	200000cc 	.word	0x200000cc

0800923c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	220a      	movs	r2, #10
 8009248:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800924a:	4b03      	ldr	r3, [pc, #12]	@ (8009258 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	20000088 	.word	0x20000088

0800925c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800926c:	2303      	movs	r3, #3
 800926e:	e009      	b.n	8009284 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	33b0      	adds	r3, #176	@ 0xb0
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009290:	b480      	push	{r7}
 8009292:	b087      	sub	sp, #28
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	32b0      	adds	r2, #176	@ 0xb0
 80092a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e008      	b.n	80092c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	371c      	adds	r7, #28
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	32b0      	adds	r2, #176	@ 0xb0
 80092e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e004      	b.n	8009302 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
	...

08009310 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	32b0      	adds	r2, #176	@ 0xb0
 8009322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009326:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009328:	2301      	movs	r3, #1
 800932a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009332:	2303      	movs	r3, #3
 8009334:	e025      	b.n	8009382 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800933c:	2b00      	cmp	r3, #0
 800933e:	d11f      	bne.n	8009380 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	2201      	movs	r2, #1
 8009344:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009348:	4b10      	ldr	r3, [pc, #64]	@ (800938c <USBD_CDC_TransmitPacket+0x7c>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	f003 020f 	and.w	r2, r3, #15
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	4613      	mov	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4403      	add	r3, r0
 8009362:	3318      	adds	r3, #24
 8009364:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009366:	4b09      	ldr	r3, [pc, #36]	@ (800938c <USBD_CDC_TransmitPacket+0x7c>)
 8009368:	7819      	ldrb	r1, [r3, #0]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f001 ffc5 	bl	800b306 <USBD_LL_Transmit>

    ret = USBD_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009380:	7bfb      	ldrb	r3, [r7, #15]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	2000010f 	.word	0x2000010f

08009390 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	32b0      	adds	r2, #176	@ 0xb0
 80093a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	32b0      	adds	r2, #176	@ 0xb0
 80093b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e018      	b.n	80093f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	7c1b      	ldrb	r3, [r3, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10a      	bne.n	80093dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093c6:	4b0c      	ldr	r3, [pc, #48]	@ (80093f8 <USBD_CDC_ReceivePacket+0x68>)
 80093c8:	7819      	ldrb	r1, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80093d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 ffb7 	bl	800b348 <USBD_LL_PrepareReceive>
 80093da:	e008      	b.n	80093ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093dc:	4b06      	ldr	r3, [pc, #24]	@ (80093f8 <USBD_CDC_ReceivePacket+0x68>)
 80093de:	7819      	ldrb	r1, [r3, #0]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80093e6:	2340      	movs	r3, #64	@ 0x40
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 ffad 	bl	800b348 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20000110 	.word	0x20000110

080093fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	4613      	mov	r3, r2
 8009408:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009410:	2303      	movs	r3, #3
 8009412:	e01f      	b.n	8009454 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	79fa      	ldrb	r2, [r7, #7]
 8009446:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f001 fe21 	bl	800b090 <USBD_LL_Init>
 800944e:	4603      	mov	r3, r0
 8009450:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009452:	7dfb      	ldrb	r3, [r7, #23]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d101      	bne.n	8009474 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009470:	2303      	movs	r3, #3
 8009472:	e025      	b.n	80094c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	32ae      	adds	r2, #174	@ 0xae
 8009486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800948a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00f      	beq.n	80094b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	32ae      	adds	r2, #174	@ 0xae
 800949a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800949e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a0:	f107 020e 	add.w	r2, r7, #14
 80094a4:	4610      	mov	r0, r2
 80094a6:	4798      	blx	r3
 80094a8:	4602      	mov	r2, r0
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80094b6:	1c5a      	adds	r2, r3, #1
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 fe2f 	bl	800b134 <USBD_LL_Start>
 80094d6:	4603      	mov	r3, r0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	460b      	mov	r3, r1
 8009500:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800950c:	2b00      	cmp	r3, #0
 800950e:	d009      	beq.n	8009524 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	78fa      	ldrb	r2, [r7, #3]
 800951a:	4611      	mov	r1, r2
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	4798      	blx	r3
 8009520:	4603      	mov	r3, r0
 8009522:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009524:	7bfb      	ldrb	r3, [r7, #15]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	460b      	mov	r3, r1
 8009538:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	78fa      	ldrb	r2, [r7, #3]
 8009548:	4611      	mov	r1, r2
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	4798      	blx	r3
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009554:	2303      	movs	r3, #3
 8009556:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009558:	7bfb      	ldrb	r3, [r7, #15]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	4618      	mov	r0, r3
 8009576:	f001 f90c 	bl	800a792 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009588:	461a      	mov	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009596:	f003 031f 	and.w	r3, r3, #31
 800959a:	2b02      	cmp	r3, #2
 800959c:	d01a      	beq.n	80095d4 <USBD_LL_SetupStage+0x72>
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d822      	bhi.n	80095e8 <USBD_LL_SetupStage+0x86>
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d002      	beq.n	80095ac <USBD_LL_SetupStage+0x4a>
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d00a      	beq.n	80095c0 <USBD_LL_SetupStage+0x5e>
 80095aa:	e01d      	b.n	80095e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fb63 	bl	8009c80 <USBD_StdDevReq>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73fb      	strb	r3, [r7, #15]
      break;
 80095be:	e020      	b.n	8009602 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095c6:	4619      	mov	r1, r3
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fbcb 	bl	8009d64 <USBD_StdItfReq>
 80095ce:	4603      	mov	r3, r0
 80095d0:	73fb      	strb	r3, [r7, #15]
      break;
 80095d2:	e016      	b.n	8009602 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fc2d 	bl	8009e3c <USBD_StdEPReq>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73fb      	strb	r3, [r7, #15]
      break;
 80095e6:	e00c      	b.n	8009602 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80095ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f001 fdfc 	bl	800b1f4 <USBD_LL_StallEP>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009600:	bf00      	nop
  }

  return ret;
 8009602:	7bfb      	ldrb	r3, [r7, #15]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	460b      	mov	r3, r1
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d16e      	bne.n	8009702 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800962a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009632:	2b03      	cmp	r3, #3
 8009634:	f040 8098 	bne.w	8009768 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	429a      	cmp	r2, r3
 8009642:	d913      	bls.n	800966c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	689a      	ldr	r2, [r3, #8]
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	1ad2      	subs	r2, r2, r3
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	68da      	ldr	r2, [r3, #12]
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	4293      	cmp	r3, r2
 800965c:	bf28      	it	cs
 800965e:	4613      	movcs	r3, r2
 8009660:	461a      	mov	r2, r3
 8009662:	6879      	ldr	r1, [r7, #4]
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f001 f994 	bl	800a992 <USBD_CtlContinueRx>
 800966a:	e07d      	b.n	8009768 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009672:	f003 031f 	and.w	r3, r3, #31
 8009676:	2b02      	cmp	r3, #2
 8009678:	d014      	beq.n	80096a4 <USBD_LL_DataOutStage+0x98>
 800967a:	2b02      	cmp	r3, #2
 800967c:	d81d      	bhi.n	80096ba <USBD_LL_DataOutStage+0xae>
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <USBD_LL_DataOutStage+0x7c>
 8009682:	2b01      	cmp	r3, #1
 8009684:	d003      	beq.n	800968e <USBD_LL_DataOutStage+0x82>
 8009686:	e018      	b.n	80096ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009688:	2300      	movs	r3, #0
 800968a:	75bb      	strb	r3, [r7, #22]
            break;
 800968c:	e018      	b.n	80096c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009694:	b2db      	uxtb	r3, r3
 8009696:	4619      	mov	r1, r3
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 fa64 	bl	8009b66 <USBD_CoreFindIF>
 800969e:	4603      	mov	r3, r0
 80096a0:	75bb      	strb	r3, [r7, #22]
            break;
 80096a2:	e00d      	b.n	80096c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	4619      	mov	r1, r3
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f000 fa66 	bl	8009b80 <USBD_CoreFindEP>
 80096b4:	4603      	mov	r3, r0
 80096b6:	75bb      	strb	r3, [r7, #22]
            break;
 80096b8:	e002      	b.n	80096c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	75bb      	strb	r3, [r7, #22]
            break;
 80096be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80096c0:	7dbb      	ldrb	r3, [r7, #22]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d119      	bne.n	80096fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d113      	bne.n	80096fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80096d2:	7dba      	ldrb	r2, [r7, #22]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	32ae      	adds	r2, #174	@ 0xae
 80096d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00b      	beq.n	80096fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80096e2:	7dba      	ldrb	r2, [r7, #22]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80096ea:	7dba      	ldrb	r2, [r7, #22]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	32ae      	adds	r2, #174	@ 0xae
 80096f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f001 f95a 	bl	800a9b4 <USBD_CtlSendStatus>
 8009700:	e032      	b.n	8009768 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009702:	7afb      	ldrb	r3, [r7, #11]
 8009704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009708:	b2db      	uxtb	r3, r3
 800970a:	4619      	mov	r1, r3
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 fa37 	bl	8009b80 <USBD_CoreFindEP>
 8009712:	4603      	mov	r3, r0
 8009714:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009716:	7dbb      	ldrb	r3, [r7, #22]
 8009718:	2bff      	cmp	r3, #255	@ 0xff
 800971a:	d025      	beq.n	8009768 <USBD_LL_DataOutStage+0x15c>
 800971c:	7dbb      	ldrb	r3, [r7, #22]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d122      	bne.n	8009768 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b03      	cmp	r3, #3
 800972c:	d117      	bne.n	800975e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800972e:	7dba      	ldrb	r2, [r7, #22]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	32ae      	adds	r2, #174	@ 0xae
 8009734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00f      	beq.n	800975e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800973e:	7dba      	ldrb	r2, [r7, #22]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009746:	7dba      	ldrb	r2, [r7, #22]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	32ae      	adds	r2, #174	@ 0xae
 800974c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	7afa      	ldrb	r2, [r7, #11]
 8009754:	4611      	mov	r1, r2
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	4798      	blx	r3
 800975a:	4603      	mov	r3, r0
 800975c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800975e:	7dfb      	ldrb	r3, [r7, #23]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009764:	7dfb      	ldrb	r3, [r7, #23]
 8009766:	e000      	b.n	800976a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b086      	sub	sp, #24
 8009776:	af00      	add	r7, sp, #0
 8009778:	60f8      	str	r0, [r7, #12]
 800977a:	460b      	mov	r3, r1
 800977c:	607a      	str	r2, [r7, #4]
 800977e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009780:	7afb      	ldrb	r3, [r7, #11]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d16f      	bne.n	8009866 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	3314      	adds	r3, #20
 800978a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009792:	2b02      	cmp	r3, #2
 8009794:	d15a      	bne.n	800984c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	689a      	ldr	r2, [r3, #8]
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d914      	bls.n	80097cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	689a      	ldr	r2, [r3, #8]
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	1ad2      	subs	r2, r2, r3
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	461a      	mov	r2, r3
 80097b6:	6879      	ldr	r1, [r7, #4]
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f001 f8bc 	bl	800a936 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097be:	2300      	movs	r3, #0
 80097c0:	2200      	movs	r2, #0
 80097c2:	2100      	movs	r1, #0
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f001 fdbf 	bl	800b348 <USBD_LL_PrepareReceive>
 80097ca:	e03f      	b.n	800984c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	68da      	ldr	r2, [r3, #12]
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d11c      	bne.n	8009812 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d316      	bcc.n	8009812 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d20f      	bcs.n	8009812 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80097f2:	2200      	movs	r2, #0
 80097f4:	2100      	movs	r1, #0
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f001 f89d 	bl	800a936 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009804:	2300      	movs	r3, #0
 8009806:	2200      	movs	r2, #0
 8009808:	2100      	movs	r1, #0
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f001 fd9c 	bl	800b348 <USBD_LL_PrepareReceive>
 8009810:	e01c      	b.n	800984c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b03      	cmp	r3, #3
 800981c:	d10f      	bne.n	800983e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d009      	beq.n	800983e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800983e:	2180      	movs	r1, #128	@ 0x80
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f001 fcd7 	bl	800b1f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f001 f8c7 	bl	800a9da <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d03a      	beq.n	80098cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f7ff fe42 	bl	80094e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009864:	e032      	b.n	80098cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009866:	7afb      	ldrb	r3, [r7, #11]
 8009868:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800986c:	b2db      	uxtb	r3, r3
 800986e:	4619      	mov	r1, r3
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f000 f985 	bl	8009b80 <USBD_CoreFindEP>
 8009876:	4603      	mov	r3, r0
 8009878:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800987a:	7dfb      	ldrb	r3, [r7, #23]
 800987c:	2bff      	cmp	r3, #255	@ 0xff
 800987e:	d025      	beq.n	80098cc <USBD_LL_DataInStage+0x15a>
 8009880:	7dfb      	ldrb	r3, [r7, #23]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d122      	bne.n	80098cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b03      	cmp	r3, #3
 8009890:	d11c      	bne.n	80098cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009892:	7dfa      	ldrb	r2, [r7, #23]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	32ae      	adds	r2, #174	@ 0xae
 8009898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d014      	beq.n	80098cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80098a2:	7dfa      	ldrb	r2, [r7, #23]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80098aa:	7dfa      	ldrb	r2, [r7, #23]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	32ae      	adds	r2, #174	@ 0xae
 80098b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	7afa      	ldrb	r2, [r7, #11]
 80098b8:	4611      	mov	r1, r2
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	4798      	blx	r3
 80098be:	4603      	mov	r3, r0
 80098c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80098c2:	7dbb      	ldrb	r3, [r7, #22]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80098c8:	7dbb      	ldrb	r3, [r7, #22]
 80098ca:	e000      	b.n	80098ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3718      	adds	r7, #24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800990e:	2b00      	cmp	r3, #0
 8009910:	d014      	beq.n	800993c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00e      	beq.n	800993c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	6852      	ldr	r2, [r2, #4]
 800992a:	b2d2      	uxtb	r2, r2
 800992c:	4611      	mov	r1, r2
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	4798      	blx	r3
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009938:	2303      	movs	r3, #3
 800993a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800993c:	2340      	movs	r3, #64	@ 0x40
 800993e:	2200      	movs	r2, #0
 8009940:	2100      	movs	r1, #0
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f001 fc11 	bl	800b16a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2240      	movs	r2, #64	@ 0x40
 8009954:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009958:	2340      	movs	r3, #64	@ 0x40
 800995a:	2200      	movs	r2, #0
 800995c:	2180      	movs	r1, #128	@ 0x80
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f001 fc03 	bl	800b16a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2240      	movs	r2, #64	@ 0x40
 800996e:	621a      	str	r2, [r3, #32]

  return ret;
 8009970:	7bfb      	ldrb	r3, [r7, #15]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800997a:	b480      	push	{r7}
 800997c:	b083      	sub	sp, #12
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	78fa      	ldrb	r2, [r7, #3]
 800998a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	370c      	adds	r7, #12
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800999a:	b480      	push	{r7}
 800999c:	b083      	sub	sp, #12
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b04      	cmp	r3, #4
 80099ac:	d006      	beq.n	80099bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2204      	movs	r2, #4
 80099c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	2b04      	cmp	r3, #4
 80099e4:	d106      	bne.n	80099f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b082      	sub	sp, #8
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d110      	bne.n	8009a38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00b      	beq.n	8009a38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d005      	beq.n	8009a38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a32:	69db      	ldr	r3, [r3, #28]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b082      	sub	sp, #8
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	32ae      	adds	r2, #174	@ 0xae
 8009a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d101      	bne.n	8009a64 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e01c      	b.n	8009a9e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b03      	cmp	r3, #3
 8009a6e:	d115      	bne.n	8009a9c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	32ae      	adds	r2, #174	@ 0xae
 8009a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a7e:	6a1b      	ldr	r3, [r3, #32]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00b      	beq.n	8009a9c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	32ae      	adds	r2, #174	@ 0xae
 8009a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a92:	6a1b      	ldr	r3, [r3, #32]
 8009a94:	78fa      	ldrb	r2, [r7, #3]
 8009a96:	4611      	mov	r1, r2
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b082      	sub	sp, #8
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	460b      	mov	r3, r1
 8009ab0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	32ae      	adds	r2, #174	@ 0xae
 8009abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d101      	bne.n	8009ac8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e01c      	b.n	8009b02 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b03      	cmp	r3, #3
 8009ad2:	d115      	bne.n	8009b00 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	32ae      	adds	r2, #174	@ 0xae
 8009ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	32ae      	adds	r2, #174	@ 0xae
 8009af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af8:	78fa      	ldrb	r2, [r7, #3]
 8009afa:	4611      	mov	r1, r2
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b083      	sub	sp, #12
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00e      	beq.n	8009b5c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	6852      	ldr	r2, [r2, #4]
 8009b4a:	b2d2      	uxtb	r2, r2
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	4798      	blx	r3
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009b66:	b480      	push	{r7}
 8009b68:	b083      	sub	sp, #12
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
 8009b6e:	460b      	mov	r3, r1
 8009b70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009b72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009b8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b086      	sub	sp, #24
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	885b      	ldrh	r3, [r3, #2]
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	7812      	ldrb	r2, [r2, #0]
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d91f      	bls.n	8009c00 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009bc6:	e013      	b.n	8009bf0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009bc8:	f107 030a 	add.w	r3, r7, #10
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6978      	ldr	r0, [r7, #20]
 8009bd0:	f000 f81b 	bl	8009c0a <USBD_GetNextDesc>
 8009bd4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	785b      	ldrb	r3, [r3, #1]
 8009bda:	2b05      	cmp	r3, #5
 8009bdc:	d108      	bne.n	8009bf0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	789b      	ldrb	r3, [r3, #2]
 8009be6:	78fa      	ldrb	r2, [r7, #3]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d008      	beq.n	8009bfe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009bec:	2300      	movs	r3, #0
 8009bee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	885b      	ldrh	r3, [r3, #2]
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	897b      	ldrh	r3, [r7, #10]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d8e5      	bhi.n	8009bc8 <USBD_GetEpDesc+0x2e>
 8009bfc:	e000      	b.n	8009c00 <USBD_GetEpDesc+0x66>
          break;
 8009bfe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009c00:	693b      	ldr	r3, [r7, #16]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b085      	sub	sp, #20
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	7812      	ldrb	r2, [r2, #0]
 8009c20:	4413      	add	r3, r2
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4413      	add	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c34:	68fb      	ldr	r3, [r7, #12]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b087      	sub	sp, #28
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	3301      	adds	r3, #1
 8009c58:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c60:	8a3b      	ldrh	r3, [r7, #16]
 8009c62:	021b      	lsls	r3, r3, #8
 8009c64:	b21a      	sxth	r2, r3
 8009c66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	b21b      	sxth	r3, r3
 8009c6e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009c70:	89fb      	ldrh	r3, [r7, #14]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	371c      	adds	r7, #28
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
	...

08009c80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c96:	2b40      	cmp	r3, #64	@ 0x40
 8009c98:	d005      	beq.n	8009ca6 <USBD_StdDevReq+0x26>
 8009c9a:	2b40      	cmp	r3, #64	@ 0x40
 8009c9c:	d857      	bhi.n	8009d4e <USBD_StdDevReq+0xce>
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00f      	beq.n	8009cc2 <USBD_StdDevReq+0x42>
 8009ca2:	2b20      	cmp	r3, #32
 8009ca4:	d153      	bne.n	8009d4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	32ae      	adds	r2, #174	@ 0xae
 8009cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	4798      	blx	r3
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8009cc0:	e04a      	b.n	8009d58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	785b      	ldrb	r3, [r3, #1]
 8009cc6:	2b09      	cmp	r3, #9
 8009cc8:	d83b      	bhi.n	8009d42 <USBD_StdDevReq+0xc2>
 8009cca:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd0 <USBD_StdDevReq+0x50>)
 8009ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd0:	08009d25 	.word	0x08009d25
 8009cd4:	08009d39 	.word	0x08009d39
 8009cd8:	08009d43 	.word	0x08009d43
 8009cdc:	08009d2f 	.word	0x08009d2f
 8009ce0:	08009d43 	.word	0x08009d43
 8009ce4:	08009d03 	.word	0x08009d03
 8009ce8:	08009cf9 	.word	0x08009cf9
 8009cec:	08009d43 	.word	0x08009d43
 8009cf0:	08009d1b 	.word	0x08009d1b
 8009cf4:	08009d0d 	.word	0x08009d0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fa3c 	bl	800a178 <USBD_GetDescriptor>
          break;
 8009d00:	e024      	b.n	8009d4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d02:	6839      	ldr	r1, [r7, #0]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fba1 	bl	800a44c <USBD_SetAddress>
          break;
 8009d0a:	e01f      	b.n	8009d4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d0c:	6839      	ldr	r1, [r7, #0]
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fbe0 	bl	800a4d4 <USBD_SetConfig>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73fb      	strb	r3, [r7, #15]
          break;
 8009d18:	e018      	b.n	8009d4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fc83 	bl	800a628 <USBD_GetConfig>
          break;
 8009d22:	e013      	b.n	8009d4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fcb4 	bl	800a694 <USBD_GetStatus>
          break;
 8009d2c:	e00e      	b.n	8009d4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fce3 	bl	800a6fc <USBD_SetFeature>
          break;
 8009d36:	e009      	b.n	8009d4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fd07 	bl	800a74e <USBD_ClrFeature>
          break;
 8009d40:	e004      	b.n	8009d4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009d42:	6839      	ldr	r1, [r7, #0]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fd5e 	bl	800a806 <USBD_CtlError>
          break;
 8009d4a:	bf00      	nop
      }
      break;
 8009d4c:	e004      	b.n	8009d58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fd58 	bl	800a806 <USBD_CtlError>
      break;
 8009d56:	bf00      	nop
  }

  return ret;
 8009d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop

08009d64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d7a:	2b40      	cmp	r3, #64	@ 0x40
 8009d7c:	d005      	beq.n	8009d8a <USBD_StdItfReq+0x26>
 8009d7e:	2b40      	cmp	r3, #64	@ 0x40
 8009d80:	d852      	bhi.n	8009e28 <USBD_StdItfReq+0xc4>
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <USBD_StdItfReq+0x26>
 8009d86:	2b20      	cmp	r3, #32
 8009d88:	d14e      	bne.n	8009e28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	3b01      	subs	r3, #1
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d840      	bhi.n	8009e1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	889b      	ldrh	r3, [r3, #4]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d836      	bhi.n	8009e10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	889b      	ldrh	r3, [r3, #4]
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff fedb 	bl	8009b66 <USBD_CoreFindIF>
 8009db0:	4603      	mov	r3, r0
 8009db2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009db4:	7bbb      	ldrb	r3, [r7, #14]
 8009db6:	2bff      	cmp	r3, #255	@ 0xff
 8009db8:	d01d      	beq.n	8009df6 <USBD_StdItfReq+0x92>
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d11a      	bne.n	8009df6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009dc0:	7bba      	ldrb	r2, [r7, #14]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	32ae      	adds	r2, #174	@ 0xae
 8009dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00f      	beq.n	8009df0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009dd0:	7bba      	ldrb	r2, [r7, #14]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009dd8:	7bba      	ldrb	r2, [r7, #14]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	32ae      	adds	r2, #174	@ 0xae
 8009dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	4798      	blx	r3
 8009dea:	4603      	mov	r3, r0
 8009dec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009dee:	e004      	b.n	8009dfa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009df0:	2303      	movs	r3, #3
 8009df2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009df4:	e001      	b.n	8009dfa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009df6:	2303      	movs	r3, #3
 8009df8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	88db      	ldrh	r3, [r3, #6]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d110      	bne.n	8009e24 <USBD_StdItfReq+0xc0>
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10d      	bne.n	8009e24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fdd3 	bl	800a9b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e0e:	e009      	b.n	8009e24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fcf7 	bl	800a806 <USBD_CtlError>
          break;
 8009e18:	e004      	b.n	8009e24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fcf2 	bl	800a806 <USBD_CtlError>
          break;
 8009e22:	e000      	b.n	8009e26 <USBD_StdItfReq+0xc2>
          break;
 8009e24:	bf00      	nop
      }
      break;
 8009e26:	e004      	b.n	8009e32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fceb 	bl	800a806 <USBD_CtlError>
      break;
 8009e30:	bf00      	nop
  }

  return ret;
 8009e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	889b      	ldrh	r3, [r3, #4]
 8009e4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e58:	2b40      	cmp	r3, #64	@ 0x40
 8009e5a:	d007      	beq.n	8009e6c <USBD_StdEPReq+0x30>
 8009e5c:	2b40      	cmp	r3, #64	@ 0x40
 8009e5e:	f200 817f 	bhi.w	800a160 <USBD_StdEPReq+0x324>
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d02a      	beq.n	8009ebc <USBD_StdEPReq+0x80>
 8009e66:	2b20      	cmp	r3, #32
 8009e68:	f040 817a 	bne.w	800a160 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e6c:	7bbb      	ldrb	r3, [r7, #14]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7ff fe85 	bl	8009b80 <USBD_CoreFindEP>
 8009e76:	4603      	mov	r3, r0
 8009e78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e7a:	7b7b      	ldrb	r3, [r7, #13]
 8009e7c:	2bff      	cmp	r3, #255	@ 0xff
 8009e7e:	f000 8174 	beq.w	800a16a <USBD_StdEPReq+0x32e>
 8009e82:	7b7b      	ldrb	r3, [r7, #13]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f040 8170 	bne.w	800a16a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009e8a:	7b7a      	ldrb	r2, [r7, #13]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009e92:	7b7a      	ldrb	r2, [r7, #13]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	32ae      	adds	r2, #174	@ 0xae
 8009e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f000 8163 	beq.w	800a16a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009ea4:	7b7a      	ldrb	r2, [r7, #13]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	32ae      	adds	r2, #174	@ 0xae
 8009eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	4798      	blx	r3
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009eba:	e156      	b.n	800a16a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	785b      	ldrb	r3, [r3, #1]
 8009ec0:	2b03      	cmp	r3, #3
 8009ec2:	d008      	beq.n	8009ed6 <USBD_StdEPReq+0x9a>
 8009ec4:	2b03      	cmp	r3, #3
 8009ec6:	f300 8145 	bgt.w	800a154 <USBD_StdEPReq+0x318>
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 809b 	beq.w	800a006 <USBD_StdEPReq+0x1ca>
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d03c      	beq.n	8009f4e <USBD_StdEPReq+0x112>
 8009ed4:	e13e      	b.n	800a154 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d002      	beq.n	8009ee8 <USBD_StdEPReq+0xac>
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d016      	beq.n	8009f14 <USBD_StdEPReq+0xd8>
 8009ee6:	e02c      	b.n	8009f42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00d      	beq.n	8009f0a <USBD_StdEPReq+0xce>
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	2b80      	cmp	r3, #128	@ 0x80
 8009ef2:	d00a      	beq.n	8009f0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f001 f97b 	bl	800b1f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009efe:	2180      	movs	r1, #128	@ 0x80
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f001 f977 	bl	800b1f4 <USBD_LL_StallEP>
 8009f06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f08:	e020      	b.n	8009f4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fc7a 	bl	800a806 <USBD_CtlError>
              break;
 8009f12:	e01b      	b.n	8009f4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	885b      	ldrh	r3, [r3, #2]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10e      	bne.n	8009f3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00b      	beq.n	8009f3a <USBD_StdEPReq+0xfe>
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	2b80      	cmp	r3, #128	@ 0x80
 8009f26:	d008      	beq.n	8009f3a <USBD_StdEPReq+0xfe>
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	88db      	ldrh	r3, [r3, #6]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d104      	bne.n	8009f3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f30:	7bbb      	ldrb	r3, [r7, #14]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f001 f95d 	bl	800b1f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fd3a 	bl	800a9b4 <USBD_CtlSendStatus>

              break;
 8009f40:	e004      	b.n	8009f4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fc5e 	bl	800a806 <USBD_CtlError>
              break;
 8009f4a:	bf00      	nop
          }
          break;
 8009f4c:	e107      	b.n	800a15e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d002      	beq.n	8009f60 <USBD_StdEPReq+0x124>
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	d016      	beq.n	8009f8c <USBD_StdEPReq+0x150>
 8009f5e:	e04b      	b.n	8009ff8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f60:	7bbb      	ldrb	r3, [r7, #14]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00d      	beq.n	8009f82 <USBD_StdEPReq+0x146>
 8009f66:	7bbb      	ldrb	r3, [r7, #14]
 8009f68:	2b80      	cmp	r3, #128	@ 0x80
 8009f6a:	d00a      	beq.n	8009f82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f001 f93f 	bl	800b1f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f76:	2180      	movs	r1, #128	@ 0x80
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f001 f93b 	bl	800b1f4 <USBD_LL_StallEP>
 8009f7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f80:	e040      	b.n	800a004 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fc3e 	bl	800a806 <USBD_CtlError>
              break;
 8009f8a:	e03b      	b.n	800a004 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	885b      	ldrh	r3, [r3, #2]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d136      	bne.n	800a002 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d004      	beq.n	8009fa8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f9e:	7bbb      	ldrb	r3, [r7, #14]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f001 f945 	bl	800b232 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fd03 	bl	800a9b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009fae:	7bbb      	ldrb	r3, [r7, #14]
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff fde4 	bl	8009b80 <USBD_CoreFindEP>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fbc:	7b7b      	ldrb	r3, [r7, #13]
 8009fbe:	2bff      	cmp	r3, #255	@ 0xff
 8009fc0:	d01f      	beq.n	800a002 <USBD_StdEPReq+0x1c6>
 8009fc2:	7b7b      	ldrb	r3, [r7, #13]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d11c      	bne.n	800a002 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009fc8:	7b7a      	ldrb	r2, [r7, #13]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009fd0:	7b7a      	ldrb	r2, [r7, #13]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	32ae      	adds	r2, #174	@ 0xae
 8009fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d010      	beq.n	800a002 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009fe0:	7b7a      	ldrb	r2, [r7, #13]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	32ae      	adds	r2, #174	@ 0xae
 8009fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	4798      	blx	r3
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009ff6:	e004      	b.n	800a002 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fc03 	bl	800a806 <USBD_CtlError>
              break;
 800a000:	e000      	b.n	800a004 <USBD_StdEPReq+0x1c8>
              break;
 800a002:	bf00      	nop
          }
          break;
 800a004:	e0ab      	b.n	800a15e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d002      	beq.n	800a018 <USBD_StdEPReq+0x1dc>
 800a012:	2b03      	cmp	r3, #3
 800a014:	d032      	beq.n	800a07c <USBD_StdEPReq+0x240>
 800a016:	e097      	b.n	800a148 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a018:	7bbb      	ldrb	r3, [r7, #14]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d007      	beq.n	800a02e <USBD_StdEPReq+0x1f2>
 800a01e:	7bbb      	ldrb	r3, [r7, #14]
 800a020:	2b80      	cmp	r3, #128	@ 0x80
 800a022:	d004      	beq.n	800a02e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a024:	6839      	ldr	r1, [r7, #0]
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fbed 	bl	800a806 <USBD_CtlError>
                break;
 800a02c:	e091      	b.n	800a152 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a02e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a032:	2b00      	cmp	r3, #0
 800a034:	da0b      	bge.n	800a04e <USBD_StdEPReq+0x212>
 800a036:	7bbb      	ldrb	r3, [r7, #14]
 800a038:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a03c:	4613      	mov	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4413      	add	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	3310      	adds	r3, #16
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	4413      	add	r3, r2
 800a04a:	3304      	adds	r3, #4
 800a04c:	e00b      	b.n	800a066 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a04e:	7bbb      	ldrb	r3, [r7, #14]
 800a050:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a054:	4613      	mov	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	4413      	add	r3, r2
 800a064:	3304      	adds	r3, #4
 800a066:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2200      	movs	r2, #0
 800a06c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2202      	movs	r2, #2
 800a072:	4619      	mov	r1, r3
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fc43 	bl	800a900 <USBD_CtlSendData>
              break;
 800a07a:	e06a      	b.n	800a152 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a07c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a080:	2b00      	cmp	r3, #0
 800a082:	da11      	bge.n	800a0a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	f003 020f 	and.w	r2, r3, #15
 800a08a:	6879      	ldr	r1, [r7, #4]
 800a08c:	4613      	mov	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	440b      	add	r3, r1
 800a096:	3324      	adds	r3, #36	@ 0x24
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d117      	bne.n	800a0ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fbb0 	bl	800a806 <USBD_CtlError>
                  break;
 800a0a6:	e054      	b.n	800a152 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
 800a0aa:	f003 020f 	and.w	r2, r3, #15
 800a0ae:	6879      	ldr	r1, [r7, #4]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4413      	add	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	440b      	add	r3, r1
 800a0ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a0be:	881b      	ldrh	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d104      	bne.n	800a0ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fb9d 	bl	800a806 <USBD_CtlError>
                  break;
 800a0cc:	e041      	b.n	800a152 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	da0b      	bge.n	800a0ee <USBD_StdEPReq+0x2b2>
 800a0d6:	7bbb      	ldrb	r3, [r7, #14]
 800a0d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	3310      	adds	r3, #16
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	e00b      	b.n	800a106 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0ee:	7bbb      	ldrb	r3, [r7, #14]
 800a0f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	4413      	add	r3, r2
 800a104:	3304      	adds	r3, #4
 800a106:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a108:	7bbb      	ldrb	r3, [r7, #14]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <USBD_StdEPReq+0x2d8>
 800a10e:	7bbb      	ldrb	r3, [r7, #14]
 800a110:	2b80      	cmp	r3, #128	@ 0x80
 800a112:	d103      	bne.n	800a11c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2200      	movs	r2, #0
 800a118:	601a      	str	r2, [r3, #0]
 800a11a:	e00e      	b.n	800a13a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a11c:	7bbb      	ldrb	r3, [r7, #14]
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f001 f8a5 	bl	800b270 <USBD_LL_IsStallEP>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d003      	beq.n	800a134 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2201      	movs	r2, #1
 800a130:	601a      	str	r2, [r3, #0]
 800a132:	e002      	b.n	800a13a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	2202      	movs	r2, #2
 800a13e:	4619      	mov	r1, r3
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fbdd 	bl	800a900 <USBD_CtlSendData>
              break;
 800a146:	e004      	b.n	800a152 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fb5b 	bl	800a806 <USBD_CtlError>
              break;
 800a150:	bf00      	nop
          }
          break;
 800a152:	e004      	b.n	800a15e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fb55 	bl	800a806 <USBD_CtlError>
          break;
 800a15c:	bf00      	nop
      }
      break;
 800a15e:	e005      	b.n	800a16c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fb4f 	bl	800a806 <USBD_CtlError>
      break;
 800a168:	e000      	b.n	800a16c <USBD_StdEPReq+0x330>
      break;
 800a16a:	bf00      	nop
  }

  return ret;
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a182:	2300      	movs	r3, #0
 800a184:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a186:	2300      	movs	r3, #0
 800a188:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	885b      	ldrh	r3, [r3, #2]
 800a192:	0a1b      	lsrs	r3, r3, #8
 800a194:	b29b      	uxth	r3, r3
 800a196:	3b01      	subs	r3, #1
 800a198:	2b06      	cmp	r3, #6
 800a19a:	f200 8128 	bhi.w	800a3ee <USBD_GetDescriptor+0x276>
 800a19e:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a4 <USBD_GetDescriptor+0x2c>)
 800a1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a4:	0800a1c1 	.word	0x0800a1c1
 800a1a8:	0800a1d9 	.word	0x0800a1d9
 800a1ac:	0800a219 	.word	0x0800a219
 800a1b0:	0800a3ef 	.word	0x0800a3ef
 800a1b4:	0800a3ef 	.word	0x0800a3ef
 800a1b8:	0800a38f 	.word	0x0800a38f
 800a1bc:	0800a3bb 	.word	0x0800a3bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	7c12      	ldrb	r2, [r2, #16]
 800a1cc:	f107 0108 	add.w	r1, r7, #8
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	4798      	blx	r3
 800a1d4:	60f8      	str	r0, [r7, #12]
      break;
 800a1d6:	e112      	b.n	800a3fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	7c1b      	ldrb	r3, [r3, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10d      	bne.n	800a1fc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e8:	f107 0208 	add.w	r2, r7, #8
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	4798      	blx	r3
 800a1f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1fa:	e100      	b.n	800a3fe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a204:	f107 0208 	add.w	r2, r7, #8
 800a208:	4610      	mov	r0, r2
 800a20a:	4798      	blx	r3
 800a20c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	3301      	adds	r3, #1
 800a212:	2202      	movs	r2, #2
 800a214:	701a      	strb	r2, [r3, #0]
      break;
 800a216:	e0f2      	b.n	800a3fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	885b      	ldrh	r3, [r3, #2]
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b05      	cmp	r3, #5
 800a220:	f200 80ac 	bhi.w	800a37c <USBD_GetDescriptor+0x204>
 800a224:	a201      	add	r2, pc, #4	@ (adr r2, 800a22c <USBD_GetDescriptor+0xb4>)
 800a226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22a:	bf00      	nop
 800a22c:	0800a245 	.word	0x0800a245
 800a230:	0800a279 	.word	0x0800a279
 800a234:	0800a2ad 	.word	0x0800a2ad
 800a238:	0800a2e1 	.word	0x0800a2e1
 800a23c:	0800a315 	.word	0x0800a315
 800a240:	0800a349 	.word	0x0800a349
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00b      	beq.n	800a268 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	7c12      	ldrb	r2, [r2, #16]
 800a25c:	f107 0108 	add.w	r1, r7, #8
 800a260:	4610      	mov	r0, r2
 800a262:	4798      	blx	r3
 800a264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a266:	e091      	b.n	800a38c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 facb 	bl	800a806 <USBD_CtlError>
            err++;
 800a270:	7afb      	ldrb	r3, [r7, #11]
 800a272:	3301      	adds	r3, #1
 800a274:	72fb      	strb	r3, [r7, #11]
          break;
 800a276:	e089      	b.n	800a38c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00b      	beq.n	800a29c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	7c12      	ldrb	r2, [r2, #16]
 800a290:	f107 0108 	add.w	r1, r7, #8
 800a294:	4610      	mov	r0, r2
 800a296:	4798      	blx	r3
 800a298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a29a:	e077      	b.n	800a38c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fab1 	bl	800a806 <USBD_CtlError>
            err++;
 800a2a4:	7afb      	ldrb	r3, [r7, #11]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2aa:	e06f      	b.n	800a38c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00b      	beq.n	800a2d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	7c12      	ldrb	r2, [r2, #16]
 800a2c4:	f107 0108 	add.w	r1, r7, #8
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	4798      	blx	r3
 800a2cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ce:	e05d      	b.n	800a38c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2d0:	6839      	ldr	r1, [r7, #0]
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fa97 	bl	800a806 <USBD_CtlError>
            err++;
 800a2d8:	7afb      	ldrb	r3, [r7, #11]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a2de:	e055      	b.n	800a38c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00b      	beq.n	800a304 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	7c12      	ldrb	r2, [r2, #16]
 800a2f8:	f107 0108 	add.w	r1, r7, #8
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	4798      	blx	r3
 800a300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a302:	e043      	b.n	800a38c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fa7d 	bl	800a806 <USBD_CtlError>
            err++;
 800a30c:	7afb      	ldrb	r3, [r7, #11]
 800a30e:	3301      	adds	r3, #1
 800a310:	72fb      	strb	r3, [r7, #11]
          break;
 800a312:	e03b      	b.n	800a38c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00b      	beq.n	800a338 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	7c12      	ldrb	r2, [r2, #16]
 800a32c:	f107 0108 	add.w	r1, r7, #8
 800a330:	4610      	mov	r0, r2
 800a332:	4798      	blx	r3
 800a334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a336:	e029      	b.n	800a38c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fa63 	bl	800a806 <USBD_CtlError>
            err++;
 800a340:	7afb      	ldrb	r3, [r7, #11]
 800a342:	3301      	adds	r3, #1
 800a344:	72fb      	strb	r3, [r7, #11]
          break;
 800a346:	e021      	b.n	800a38c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00b      	beq.n	800a36c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	7c12      	ldrb	r2, [r2, #16]
 800a360:	f107 0108 	add.w	r1, r7, #8
 800a364:	4610      	mov	r0, r2
 800a366:	4798      	blx	r3
 800a368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a36a:	e00f      	b.n	800a38c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fa49 	bl	800a806 <USBD_CtlError>
            err++;
 800a374:	7afb      	ldrb	r3, [r7, #11]
 800a376:	3301      	adds	r3, #1
 800a378:	72fb      	strb	r3, [r7, #11]
          break;
 800a37a:	e007      	b.n	800a38c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a37c:	6839      	ldr	r1, [r7, #0]
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fa41 	bl	800a806 <USBD_CtlError>
          err++;
 800a384:	7afb      	ldrb	r3, [r7, #11]
 800a386:	3301      	adds	r3, #1
 800a388:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a38a:	bf00      	nop
      }
      break;
 800a38c:	e037      	b.n	800a3fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	7c1b      	ldrb	r3, [r3, #16]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d109      	bne.n	800a3aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a39c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a39e:	f107 0208 	add.w	r2, r7, #8
 800a3a2:	4610      	mov	r0, r2
 800a3a4:	4798      	blx	r3
 800a3a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3a8:	e029      	b.n	800a3fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fa2a 	bl	800a806 <USBD_CtlError>
        err++;
 800a3b2:	7afb      	ldrb	r3, [r7, #11]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	72fb      	strb	r3, [r7, #11]
      break;
 800a3b8:	e021      	b.n	800a3fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	7c1b      	ldrb	r3, [r3, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10d      	bne.n	800a3de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ca:	f107 0208 	add.w	r2, r7, #8
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	4798      	blx	r3
 800a3d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	2207      	movs	r2, #7
 800a3da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3dc:	e00f      	b.n	800a3fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fa10 	bl	800a806 <USBD_CtlError>
        err++;
 800a3e6:	7afb      	ldrb	r3, [r7, #11]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	72fb      	strb	r3, [r7, #11]
      break;
 800a3ec:	e007      	b.n	800a3fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 fa08 	bl	800a806 <USBD_CtlError>
      err++;
 800a3f6:	7afb      	ldrb	r3, [r7, #11]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	72fb      	strb	r3, [r7, #11]
      break;
 800a3fc:	bf00      	nop
  }

  if (err != 0U)
 800a3fe:	7afb      	ldrb	r3, [r7, #11]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d11e      	bne.n	800a442 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	88db      	ldrh	r3, [r3, #6]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d016      	beq.n	800a43a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a40c:	893b      	ldrh	r3, [r7, #8]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00e      	beq.n	800a430 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	88da      	ldrh	r2, [r3, #6]
 800a416:	893b      	ldrh	r3, [r7, #8]
 800a418:	4293      	cmp	r3, r2
 800a41a:	bf28      	it	cs
 800a41c:	4613      	movcs	r3, r2
 800a41e:	b29b      	uxth	r3, r3
 800a420:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a422:	893b      	ldrh	r3, [r7, #8]
 800a424:	461a      	mov	r2, r3
 800a426:	68f9      	ldr	r1, [r7, #12]
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fa69 	bl	800a900 <USBD_CtlSendData>
 800a42e:	e009      	b.n	800a444 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a430:	6839      	ldr	r1, [r7, #0]
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f9e7 	bl	800a806 <USBD_CtlError>
 800a438:	e004      	b.n	800a444 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 faba 	bl	800a9b4 <USBD_CtlSendStatus>
 800a440:	e000      	b.n	800a444 <USBD_GetDescriptor+0x2cc>
    return;
 800a442:	bf00      	nop
  }
}
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop

0800a44c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	889b      	ldrh	r3, [r3, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d131      	bne.n	800a4c2 <USBD_SetAddress+0x76>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	88db      	ldrh	r3, [r3, #6]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d12d      	bne.n	800a4c2 <USBD_SetAddress+0x76>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	885b      	ldrh	r3, [r3, #2]
 800a46a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a46c:	d829      	bhi.n	800a4c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	885b      	ldrh	r3, [r3, #2]
 800a472:	b2db      	uxtb	r3, r3
 800a474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a478:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b03      	cmp	r3, #3
 800a484:	d104      	bne.n	800a490 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a486:	6839      	ldr	r1, [r7, #0]
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f9bc 	bl	800a806 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a48e:	e01d      	b.n	800a4cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	7bfa      	ldrb	r2, [r7, #15]
 800a494:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a498:	7bfb      	ldrb	r3, [r7, #15]
 800a49a:	4619      	mov	r1, r3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 ff13 	bl	800b2c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fa86 	bl	800a9b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a4a8:	7bfb      	ldrb	r3, [r7, #15]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d004      	beq.n	800a4b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b6:	e009      	b.n	800a4cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4c0:	e004      	b.n	800a4cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a4c2:	6839      	ldr	r1, [r7, #0]
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f99e 	bl	800a806 <USBD_CtlError>
  }
}
 800a4ca:	bf00      	nop
 800a4cc:	bf00      	nop
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	885b      	ldrh	r3, [r3, #2]
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	4b4e      	ldr	r3, [pc, #312]	@ (800a624 <USBD_SetConfig+0x150>)
 800a4ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4ec:	4b4d      	ldr	r3, [pc, #308]	@ (800a624 <USBD_SetConfig+0x150>)
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d905      	bls.n	800a500 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f985 	bl	800a806 <USBD_CtlError>
    return USBD_FAIL;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	e08c      	b.n	800a61a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a506:	b2db      	uxtb	r3, r3
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d002      	beq.n	800a512 <USBD_SetConfig+0x3e>
 800a50c:	2b03      	cmp	r3, #3
 800a50e:	d029      	beq.n	800a564 <USBD_SetConfig+0x90>
 800a510:	e075      	b.n	800a5fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a512:	4b44      	ldr	r3, [pc, #272]	@ (800a624 <USBD_SetConfig+0x150>)
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d020      	beq.n	800a55c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a51a:	4b42      	ldr	r3, [pc, #264]	@ (800a624 <USBD_SetConfig+0x150>)
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a524:	4b3f      	ldr	r3, [pc, #252]	@ (800a624 <USBD_SetConfig+0x150>)
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	4619      	mov	r1, r3
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7fe ffe3 	bl	80094f6 <USBD_SetClassConfig>
 800a530:	4603      	mov	r3, r0
 800a532:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a534:	7bfb      	ldrb	r3, [r7, #15]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d008      	beq.n	800a54c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f962 	bl	800a806 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2202      	movs	r2, #2
 800a546:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a54a:	e065      	b.n	800a618 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fa31 	bl	800a9b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2203      	movs	r2, #3
 800a556:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a55a:	e05d      	b.n	800a618 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fa29 	bl	800a9b4 <USBD_CtlSendStatus>
      break;
 800a562:	e059      	b.n	800a618 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a564:	4b2f      	ldr	r3, [pc, #188]	@ (800a624 <USBD_SetConfig+0x150>)
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d112      	bne.n	800a592 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a574:	4b2b      	ldr	r3, [pc, #172]	@ (800a624 <USBD_SetConfig+0x150>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	461a      	mov	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a57e:	4b29      	ldr	r3, [pc, #164]	@ (800a624 <USBD_SetConfig+0x150>)
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7fe ffd2 	bl	800952e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fa12 	bl	800a9b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a590:	e042      	b.n	800a618 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a592:	4b24      	ldr	r3, [pc, #144]	@ (800a624 <USBD_SetConfig+0x150>)
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d02a      	beq.n	800a5f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7fe ffc0 	bl	800952e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a5ae:	4b1d      	ldr	r3, [pc, #116]	@ (800a624 <USBD_SetConfig+0x150>)
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a5b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a624 <USBD_SetConfig+0x150>)
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7fe ff99 	bl	80094f6 <USBD_SetClassConfig>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a5c8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00f      	beq.n	800a5ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a5ce:	6839      	ldr	r1, [r7, #0]
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 f918 	bl	800a806 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7fe ffa5 	bl	800952e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a5ec:	e014      	b.n	800a618 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f9e0 	bl	800a9b4 <USBD_CtlSendStatus>
      break;
 800a5f4:	e010      	b.n	800a618 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f9dc 	bl	800a9b4 <USBD_CtlSendStatus>
      break;
 800a5fc:	e00c      	b.n	800a618 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f900 	bl	800a806 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a606:	4b07      	ldr	r3, [pc, #28]	@ (800a624 <USBD_SetConfig+0x150>)
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7fe ff8e 	bl	800952e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a612:	2303      	movs	r3, #3
 800a614:	73fb      	strb	r3, [r7, #15]
      break;
 800a616:	bf00      	nop
  }

  return ret;
 800a618:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	200005fc 	.word	0x200005fc

0800a628 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	88db      	ldrh	r3, [r3, #6]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d004      	beq.n	800a644 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 f8e2 	bl	800a806 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a642:	e023      	b.n	800a68c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	dc02      	bgt.n	800a656 <USBD_GetConfig+0x2e>
 800a650:	2b00      	cmp	r3, #0
 800a652:	dc03      	bgt.n	800a65c <USBD_GetConfig+0x34>
 800a654:	e015      	b.n	800a682 <USBD_GetConfig+0x5a>
 800a656:	2b03      	cmp	r3, #3
 800a658:	d00b      	beq.n	800a672 <USBD_GetConfig+0x4a>
 800a65a:	e012      	b.n	800a682 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	3308      	adds	r3, #8
 800a666:	2201      	movs	r2, #1
 800a668:	4619      	mov	r1, r3
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f948 	bl	800a900 <USBD_CtlSendData>
        break;
 800a670:	e00c      	b.n	800a68c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	3304      	adds	r3, #4
 800a676:	2201      	movs	r2, #1
 800a678:	4619      	mov	r1, r3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f940 	bl	800a900 <USBD_CtlSendData>
        break;
 800a680:	e004      	b.n	800a68c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f8be 	bl	800a806 <USBD_CtlError>
        break;
 800a68a:	bf00      	nop
}
 800a68c:	bf00      	nop
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d81e      	bhi.n	800a6ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	88db      	ldrh	r3, [r3, #6]
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d004      	beq.n	800a6be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f8a5 	bl	800a806 <USBD_CtlError>
        break;
 800a6bc:	e01a      	b.n	800a6f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d005      	beq.n	800a6da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	f043 0202 	orr.w	r2, r3, #2
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	330c      	adds	r3, #12
 800a6de:	2202      	movs	r2, #2
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f90c 	bl	800a900 <USBD_CtlSendData>
      break;
 800a6e8:	e004      	b.n	800a6f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a6ea:	6839      	ldr	r1, [r7, #0]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f88a 	bl	800a806 <USBD_CtlError>
      break;
 800a6f2:	bf00      	nop
  }
}
 800a6f4:	bf00      	nop
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	885b      	ldrh	r3, [r3, #2]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d107      	bne.n	800a71e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2201      	movs	r2, #1
 800a712:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f94c 	bl	800a9b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a71c:	e013      	b.n	800a746 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	885b      	ldrh	r3, [r3, #2]
 800a722:	2b02      	cmp	r3, #2
 800a724:	d10b      	bne.n	800a73e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	889b      	ldrh	r3, [r3, #4]
 800a72a:	0a1b      	lsrs	r3, r3, #8
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	b2da      	uxtb	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f93c 	bl	800a9b4 <USBD_CtlSendStatus>
}
 800a73c:	e003      	b.n	800a746 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f860 	bl	800a806 <USBD_CtlError>
}
 800a746:	bf00      	nop
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b082      	sub	sp, #8
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	3b01      	subs	r3, #1
 800a762:	2b02      	cmp	r3, #2
 800a764:	d80b      	bhi.n	800a77e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	885b      	ldrh	r3, [r3, #2]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d10c      	bne.n	800a788 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f91c 	bl	800a9b4 <USBD_CtlSendStatus>
      }
      break;
 800a77c:	e004      	b.n	800a788 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 f840 	bl	800a806 <USBD_CtlError>
      break;
 800a786:	e000      	b.n	800a78a <USBD_ClrFeature+0x3c>
      break;
 800a788:	bf00      	nop
  }
}
 800a78a:	bf00      	nop
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b084      	sub	sp, #16
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	781a      	ldrb	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	781a      	ldrb	r2, [r3, #0]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f7ff fa40 	bl	8009c42 <SWAPBYTE>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f7ff fa33 	bl	8009c42 <SWAPBYTE>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	461a      	mov	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f7ff fa26 	bl	8009c42 <SWAPBYTE>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	80da      	strh	r2, [r3, #6]
}
 800a7fe:	bf00      	nop
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b082      	sub	sp, #8
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a810:	2180      	movs	r1, #128	@ 0x80
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fcee 	bl	800b1f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a818:	2100      	movs	r1, #0
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fcea 	bl	800b1f4 <USBD_LL_StallEP>
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a834:	2300      	movs	r3, #0
 800a836:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d042      	beq.n	800a8c4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a842:	6938      	ldr	r0, [r7, #16]
 800a844:	f000 f842 	bl	800a8cc <USBD_GetLen>
 800a848:	4603      	mov	r3, r0
 800a84a:	3301      	adds	r3, #1
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a852:	d808      	bhi.n	800a866 <USBD_GetString+0x3e>
 800a854:	6938      	ldr	r0, [r7, #16]
 800a856:	f000 f839 	bl	800a8cc <USBD_GetLen>
 800a85a:	4603      	mov	r3, r0
 800a85c:	3301      	adds	r3, #1
 800a85e:	b29b      	uxth	r3, r3
 800a860:	005b      	lsls	r3, r3, #1
 800a862:	b29a      	uxth	r2, r3
 800a864:	e001      	b.n	800a86a <USBD_GetString+0x42>
 800a866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a86e:	7dfb      	ldrb	r3, [r7, #23]
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	4413      	add	r3, r2
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	7812      	ldrb	r2, [r2, #0]
 800a878:	701a      	strb	r2, [r3, #0]
  idx++;
 800a87a:	7dfb      	ldrb	r3, [r7, #23]
 800a87c:	3301      	adds	r3, #1
 800a87e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a880:	7dfb      	ldrb	r3, [r7, #23]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	4413      	add	r3, r2
 800a886:	2203      	movs	r2, #3
 800a888:	701a      	strb	r2, [r3, #0]
  idx++;
 800a88a:	7dfb      	ldrb	r3, [r7, #23]
 800a88c:	3301      	adds	r3, #1
 800a88e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a890:	e013      	b.n	800a8ba <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a892:	7dfb      	ldrb	r3, [r7, #23]
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	4413      	add	r3, r2
 800a898:	693a      	ldr	r2, [r7, #16]
 800a89a:	7812      	ldrb	r2, [r2, #0]
 800a89c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	613b      	str	r3, [r7, #16]
    idx++;
 800a8a4:	7dfb      	ldrb	r3, [r7, #23]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a8aa:	7dfb      	ldrb	r3, [r7, #23]
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	701a      	strb	r2, [r3, #0]
    idx++;
 800a8b4:	7dfb      	ldrb	r3, [r7, #23]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1e7      	bne.n	800a892 <USBD_GetString+0x6a>
 800a8c2:	e000      	b.n	800a8c6 <USBD_GetString+0x9e>
    return;
 800a8c4:	bf00      	nop
  }
}
 800a8c6:	3718      	adds	r7, #24
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a8dc:	e005      	b.n	800a8ea <USBD_GetLen+0x1e>
  {
    len++;
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1f5      	bne.n	800a8de <USBD_GetLen+0x12>
  }

  return len;
 800a8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2202      	movs	r2, #2
 800a910:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	2100      	movs	r1, #0
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f000 fced 	bl	800b306 <USBD_LL_Transmit>

  return USBD_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b084      	sub	sp, #16
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	60f8      	str	r0, [r7, #12]
 800a93e:	60b9      	str	r1, [r7, #8]
 800a940:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	2100      	movs	r1, #0
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f000 fcdc 	bl	800b306 <USBD_LL_Transmit>

  return USBD_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2203      	movs	r2, #3
 800a968:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	2100      	movs	r1, #0
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 fce0 	bl	800b348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b084      	sub	sp, #16
 800a996:	af00      	add	r7, sp, #0
 800a998:	60f8      	str	r0, [r7, #12]
 800a99a:	60b9      	str	r1, [r7, #8]
 800a99c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f000 fccf 	bl	800b348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2204      	movs	r2, #4
 800a9c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fc9b 	bl	800b306 <USBD_LL_Transmit>

  return USBD_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b082      	sub	sp, #8
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2205      	movs	r2, #5
 800a9e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fca9 	bl	800b348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800aa04:	2201      	movs	r2, #1
 800aa06:	4912      	ldr	r1, [pc, #72]	@ (800aa50 <MX_USB_DEVICE_Init+0x50>)
 800aa08:	4812      	ldr	r0, [pc, #72]	@ (800aa54 <MX_USB_DEVICE_Init+0x54>)
 800aa0a:	f7fe fcf7 	bl	80093fc <USBD_Init>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d001      	beq.n	800aa18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aa14:	f7f6 fbb0 	bl	8001178 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800aa18:	490f      	ldr	r1, [pc, #60]	@ (800aa58 <MX_USB_DEVICE_Init+0x58>)
 800aa1a:	480e      	ldr	r0, [pc, #56]	@ (800aa54 <MX_USB_DEVICE_Init+0x54>)
 800aa1c:	f7fe fd1e 	bl	800945c <USBD_RegisterClass>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aa26:	f7f6 fba7 	bl	8001178 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800aa2a:	490c      	ldr	r1, [pc, #48]	@ (800aa5c <MX_USB_DEVICE_Init+0x5c>)
 800aa2c:	4809      	ldr	r0, [pc, #36]	@ (800aa54 <MX_USB_DEVICE_Init+0x54>)
 800aa2e:	f7fe fc15 	bl	800925c <USBD_CDC_RegisterInterface>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d001      	beq.n	800aa3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aa38:	f7f6 fb9e 	bl	8001178 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800aa3c:	4805      	ldr	r0, [pc, #20]	@ (800aa54 <MX_USB_DEVICE_Init+0x54>)
 800aa3e:	f7fe fd43 	bl	80094c8 <USBD_Start>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aa48:	f7f6 fb96 	bl	8001178 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa4c:	bf00      	nop
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	20000128 	.word	0x20000128
 800aa54:	20000600 	.word	0x20000600
 800aa58:	20000094 	.word	0x20000094
 800aa5c:	20000114 	.word	0x20000114

0800aa60 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800aa64:	2200      	movs	r2, #0
 800aa66:	4905      	ldr	r1, [pc, #20]	@ (800aa7c <CDC_Init_HS+0x1c>)
 800aa68:	4805      	ldr	r0, [pc, #20]	@ (800aa80 <CDC_Init_HS+0x20>)
 800aa6a:	f7fe fc11 	bl	8009290 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800aa6e:	4905      	ldr	r1, [pc, #20]	@ (800aa84 <CDC_Init_HS+0x24>)
 800aa70:	4803      	ldr	r0, [pc, #12]	@ (800aa80 <CDC_Init_HS+0x20>)
 800aa72:	f7fe fc2f 	bl	80092d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa76:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	200010dc 	.word	0x200010dc
 800aa80:	20000600 	.word	0x20000600
 800aa84:	200008dc 	.word	0x200008dc

0800aa88 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800aa8c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	6039      	str	r1, [r7, #0]
 800aaa2:	71fb      	strb	r3, [r7, #7]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800aaa8:	79fb      	ldrb	r3, [r7, #7]
 800aaaa:	2b23      	cmp	r3, #35	@ 0x23
 800aaac:	d84a      	bhi.n	800ab44 <CDC_Control_HS+0xac>
 800aaae:	a201      	add	r2, pc, #4	@ (adr r2, 800aab4 <CDC_Control_HS+0x1c>)
 800aab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab4:	0800ab45 	.word	0x0800ab45
 800aab8:	0800ab45 	.word	0x0800ab45
 800aabc:	0800ab45 	.word	0x0800ab45
 800aac0:	0800ab45 	.word	0x0800ab45
 800aac4:	0800ab45 	.word	0x0800ab45
 800aac8:	0800ab45 	.word	0x0800ab45
 800aacc:	0800ab45 	.word	0x0800ab45
 800aad0:	0800ab45 	.word	0x0800ab45
 800aad4:	0800ab45 	.word	0x0800ab45
 800aad8:	0800ab45 	.word	0x0800ab45
 800aadc:	0800ab45 	.word	0x0800ab45
 800aae0:	0800ab45 	.word	0x0800ab45
 800aae4:	0800ab45 	.word	0x0800ab45
 800aae8:	0800ab45 	.word	0x0800ab45
 800aaec:	0800ab45 	.word	0x0800ab45
 800aaf0:	0800ab45 	.word	0x0800ab45
 800aaf4:	0800ab45 	.word	0x0800ab45
 800aaf8:	0800ab45 	.word	0x0800ab45
 800aafc:	0800ab45 	.word	0x0800ab45
 800ab00:	0800ab45 	.word	0x0800ab45
 800ab04:	0800ab45 	.word	0x0800ab45
 800ab08:	0800ab45 	.word	0x0800ab45
 800ab0c:	0800ab45 	.word	0x0800ab45
 800ab10:	0800ab45 	.word	0x0800ab45
 800ab14:	0800ab45 	.word	0x0800ab45
 800ab18:	0800ab45 	.word	0x0800ab45
 800ab1c:	0800ab45 	.word	0x0800ab45
 800ab20:	0800ab45 	.word	0x0800ab45
 800ab24:	0800ab45 	.word	0x0800ab45
 800ab28:	0800ab45 	.word	0x0800ab45
 800ab2c:	0800ab45 	.word	0x0800ab45
 800ab30:	0800ab45 	.word	0x0800ab45
 800ab34:	0800ab45 	.word	0x0800ab45
 800ab38:	0800ab45 	.word	0x0800ab45
 800ab3c:	0800ab45 	.word	0x0800ab45
 800ab40:	0800ab45 	.word	0x0800ab45
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ab44:	bf00      	nop
  }

  return (USBD_OK);
 800ab46:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800ab5e:	6879      	ldr	r1, [r7, #4]
 800ab60:	4805      	ldr	r0, [pc, #20]	@ (800ab78 <CDC_Receive_HS+0x24>)
 800ab62:	f7fe fbb7 	bl	80092d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800ab66:	4804      	ldr	r0, [pc, #16]	@ (800ab78 <CDC_Receive_HS+0x24>)
 800ab68:	f7fe fc12 	bl	8009390 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ab6c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3708      	adds	r7, #8
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	20000600 	.word	0x20000600

0800ab7c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	@ (800abc4 <CDC_Transmit_HS+0x48>)
 800ab8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e00b      	b.n	800abba <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800aba2:	887b      	ldrh	r3, [r7, #2]
 800aba4:	461a      	mov	r2, r3
 800aba6:	6879      	ldr	r1, [r7, #4]
 800aba8:	4806      	ldr	r0, [pc, #24]	@ (800abc4 <CDC_Transmit_HS+0x48>)
 800abaa:	f7fe fb71 	bl	8009290 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800abae:	4805      	ldr	r0, [pc, #20]	@ (800abc4 <CDC_Transmit_HS+0x48>)
 800abb0:	f7fe fbae 	bl	8009310 <USBD_CDC_TransmitPacket>
 800abb4:	4603      	mov	r3, r0
 800abb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20000600 	.word	0x20000600

0800abc8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800abc8:	b480      	push	{r7}
 800abca:	b087      	sub	sp, #28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	4613      	mov	r3, r2
 800abd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800abda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	371c      	adds	r7, #28
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
	...

0800abec <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	4603      	mov	r3, r0
 800abf4:	6039      	str	r1, [r7, #0]
 800abf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2212      	movs	r2, #18
 800abfc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800abfe:	4b03      	ldr	r3, [pc, #12]	@ (800ac0c <USBD_HS_DeviceDescriptor+0x20>)
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	20000144 	.word	0x20000144

0800ac10 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	4603      	mov	r3, r0
 800ac18:	6039      	str	r1, [r7, #0]
 800ac1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	2204      	movs	r2, #4
 800ac20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac22:	4b03      	ldr	r3, [pc, #12]	@ (800ac30 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	20000158 	.word	0x20000158

0800ac34 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	6039      	str	r1, [r7, #0]
 800ac3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d105      	bne.n	800ac52 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ac46:	683a      	ldr	r2, [r7, #0]
 800ac48:	4907      	ldr	r1, [pc, #28]	@ (800ac68 <USBD_HS_ProductStrDescriptor+0x34>)
 800ac4a:	4808      	ldr	r0, [pc, #32]	@ (800ac6c <USBD_HS_ProductStrDescriptor+0x38>)
 800ac4c:	f7ff fdec 	bl	800a828 <USBD_GetString>
 800ac50:	e004      	b.n	800ac5c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ac52:	683a      	ldr	r2, [r7, #0]
 800ac54:	4904      	ldr	r1, [pc, #16]	@ (800ac68 <USBD_HS_ProductStrDescriptor+0x34>)
 800ac56:	4805      	ldr	r0, [pc, #20]	@ (800ac6c <USBD_HS_ProductStrDescriptor+0x38>)
 800ac58:	f7ff fde6 	bl	800a828 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac5c:	4b02      	ldr	r3, [pc, #8]	@ (800ac68 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	200018dc 	.word	0x200018dc
 800ac6c:	0800e10c 	.word	0x0800e10c

0800ac70 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	4603      	mov	r3, r0
 800ac78:	6039      	str	r1, [r7, #0]
 800ac7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac7c:	683a      	ldr	r2, [r7, #0]
 800ac7e:	4904      	ldr	r1, [pc, #16]	@ (800ac90 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ac80:	4804      	ldr	r0, [pc, #16]	@ (800ac94 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ac82:	f7ff fdd1 	bl	800a828 <USBD_GetString>
  return USBD_StrDesc;
 800ac86:	4b02      	ldr	r3, [pc, #8]	@ (800ac90 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	200018dc 	.word	0x200018dc
 800ac94:	0800e124 	.word	0x0800e124

0800ac98 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	6039      	str	r1, [r7, #0]
 800aca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	221a      	movs	r2, #26
 800aca8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800acaa:	f000 f843 	bl	800ad34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800acae:	4b02      	ldr	r3, [pc, #8]	@ (800acb8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	2000015c 	.word	0x2000015c

0800acbc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	4603      	mov	r3, r0
 800acc4:	6039      	str	r1, [r7, #0]
 800acc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800acc8:	79fb      	ldrb	r3, [r7, #7]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d105      	bne.n	800acda <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	4907      	ldr	r1, [pc, #28]	@ (800acf0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800acd2:	4808      	ldr	r0, [pc, #32]	@ (800acf4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800acd4:	f7ff fda8 	bl	800a828 <USBD_GetString>
 800acd8:	e004      	b.n	800ace4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	4904      	ldr	r1, [pc, #16]	@ (800acf0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800acde:	4805      	ldr	r0, [pc, #20]	@ (800acf4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ace0:	f7ff fda2 	bl	800a828 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ace4:	4b02      	ldr	r3, [pc, #8]	@ (800acf0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	200018dc 	.word	0x200018dc
 800acf4:	0800e138 	.word	0x0800e138

0800acf8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	4603      	mov	r3, r0
 800ad00:	6039      	str	r1, [r7, #0]
 800ad02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad04:	79fb      	ldrb	r3, [r7, #7]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d105      	bne.n	800ad16 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	4907      	ldr	r1, [pc, #28]	@ (800ad2c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ad0e:	4808      	ldr	r0, [pc, #32]	@ (800ad30 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ad10:	f7ff fd8a 	bl	800a828 <USBD_GetString>
 800ad14:	e004      	b.n	800ad20 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	4904      	ldr	r1, [pc, #16]	@ (800ad2c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ad1a:	4805      	ldr	r0, [pc, #20]	@ (800ad30 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ad1c:	f7ff fd84 	bl	800a828 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad20:	4b02      	ldr	r3, [pc, #8]	@ (800ad2c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	200018dc 	.word	0x200018dc
 800ad30:	0800e144 	.word	0x0800e144

0800ad34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad3a:	4b0f      	ldr	r3, [pc, #60]	@ (800ad78 <Get_SerialNum+0x44>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad40:	4b0e      	ldr	r3, [pc, #56]	@ (800ad7c <Get_SerialNum+0x48>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad46:	4b0e      	ldr	r3, [pc, #56]	@ (800ad80 <Get_SerialNum+0x4c>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4413      	add	r3, r2
 800ad52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d009      	beq.n	800ad6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad5a:	2208      	movs	r2, #8
 800ad5c:	4909      	ldr	r1, [pc, #36]	@ (800ad84 <Get_SerialNum+0x50>)
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f000 f814 	bl	800ad8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad64:	2204      	movs	r2, #4
 800ad66:	4908      	ldr	r1, [pc, #32]	@ (800ad88 <Get_SerialNum+0x54>)
 800ad68:	68b8      	ldr	r0, [r7, #8]
 800ad6a:	f000 f80f 	bl	800ad8c <IntToUnicode>
  }
}
 800ad6e:	bf00      	nop
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	1fff7a10 	.word	0x1fff7a10
 800ad7c:	1fff7a14 	.word	0x1fff7a14
 800ad80:	1fff7a18 	.word	0x1fff7a18
 800ad84:	2000015e 	.word	0x2000015e
 800ad88:	2000016e 	.word	0x2000016e

0800ad8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	4613      	mov	r3, r2
 800ad98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad9e:	2300      	movs	r3, #0
 800ada0:	75fb      	strb	r3, [r7, #23]
 800ada2:	e027      	b.n	800adf4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	0f1b      	lsrs	r3, r3, #28
 800ada8:	2b09      	cmp	r3, #9
 800adaa:	d80b      	bhi.n	800adc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	0f1b      	lsrs	r3, r3, #28
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	7dfb      	ldrb	r3, [r7, #23]
 800adb4:	005b      	lsls	r3, r3, #1
 800adb6:	4619      	mov	r1, r3
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	440b      	add	r3, r1
 800adbc:	3230      	adds	r2, #48	@ 0x30
 800adbe:	b2d2      	uxtb	r2, r2
 800adc0:	701a      	strb	r2, [r3, #0]
 800adc2:	e00a      	b.n	800adda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	0f1b      	lsrs	r3, r3, #28
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	7dfb      	ldrb	r3, [r7, #23]
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	4619      	mov	r1, r3
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	440b      	add	r3, r1
 800add4:	3237      	adds	r2, #55	@ 0x37
 800add6:	b2d2      	uxtb	r2, r2
 800add8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	011b      	lsls	r3, r3, #4
 800adde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ade0:	7dfb      	ldrb	r3, [r7, #23]
 800ade2:	005b      	lsls	r3, r3, #1
 800ade4:	3301      	adds	r3, #1
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	4413      	add	r3, r2
 800adea:	2200      	movs	r2, #0
 800adec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800adee:	7dfb      	ldrb	r3, [r7, #23]
 800adf0:	3301      	adds	r3, #1
 800adf2:	75fb      	strb	r3, [r7, #23]
 800adf4:	7dfa      	ldrb	r2, [r7, #23]
 800adf6:	79fb      	ldrb	r3, [r7, #7]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d3d3      	bcc.n	800ada4 <IntToUnicode+0x18>
  }
}
 800adfc:	bf00      	nop
 800adfe:	bf00      	nop
 800ae00:	371c      	adds	r7, #28
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
	...

0800ae0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b08a      	sub	sp, #40	@ 0x28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae14:	f107 0314 	add.w	r3, r7, #20
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	605a      	str	r2, [r3, #4]
 800ae1e:	609a      	str	r2, [r3, #8]
 800ae20:	60da      	str	r2, [r3, #12]
 800ae22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a1d      	ldr	r2, [pc, #116]	@ (800aea0 <HAL_PCD_MspInit+0x94>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d134      	bne.n	800ae98 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae2e:	2300      	movs	r3, #0
 800ae30:	613b      	str	r3, [r7, #16]
 800ae32:	4b1c      	ldr	r3, [pc, #112]	@ (800aea4 <HAL_PCD_MspInit+0x98>)
 800ae34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae36:	4a1b      	ldr	r2, [pc, #108]	@ (800aea4 <HAL_PCD_MspInit+0x98>)
 800ae38:	f043 0302 	orr.w	r3, r3, #2
 800ae3c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ae3e:	4b19      	ldr	r3, [pc, #100]	@ (800aea4 <HAL_PCD_MspInit+0x98>)
 800ae40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae42:	f003 0302 	and.w	r3, r3, #2
 800ae46:	613b      	str	r3, [r7, #16]
 800ae48:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800ae4a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800ae4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae50:	2302      	movs	r3, #2
 800ae52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae54:	2300      	movs	r3, #0
 800ae56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ae5c:	230c      	movs	r3, #12
 800ae5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae60:	f107 0314 	add.w	r3, r7, #20
 800ae64:	4619      	mov	r1, r3
 800ae66:	4810      	ldr	r0, [pc, #64]	@ (800aea8 <HAL_PCD_MspInit+0x9c>)
 800ae68:	f7f8 fdbe 	bl	80039e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	60fb      	str	r3, [r7, #12]
 800ae70:	4b0c      	ldr	r3, [pc, #48]	@ (800aea4 <HAL_PCD_MspInit+0x98>)
 800ae72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae74:	4a0b      	ldr	r2, [pc, #44]	@ (800aea4 <HAL_PCD_MspInit+0x98>)
 800ae76:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae7a:	6313      	str	r3, [r2, #48]	@ 0x30
 800ae7c:	4b09      	ldr	r3, [pc, #36]	@ (800aea4 <HAL_PCD_MspInit+0x98>)
 800ae7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800ae88:	2200      	movs	r2, #0
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	204d      	movs	r0, #77	@ 0x4d
 800ae8e:	f7f8 f920 	bl	80030d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ae92:	204d      	movs	r0, #77	@ 0x4d
 800ae94:	f7f8 f939 	bl	800310a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ae98:	bf00      	nop
 800ae9a:	3728      	adds	r7, #40	@ 0x28
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	40040000 	.word	0x40040000
 800aea4:	40023800 	.word	0x40023800
 800aea8:	40020400 	.word	0x40020400

0800aeac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aec0:	4619      	mov	r1, r3
 800aec2:	4610      	mov	r0, r2
 800aec4:	f7fe fb4d 	bl	8009562 <USBD_LL_SetupStage>
}
 800aec8:	bf00      	nop
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aee2:	78fa      	ldrb	r2, [r7, #3]
 800aee4:	6879      	ldr	r1, [r7, #4]
 800aee6:	4613      	mov	r3, r2
 800aee8:	00db      	lsls	r3, r3, #3
 800aeea:	4413      	add	r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	440b      	add	r3, r1
 800aef0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	78fb      	ldrb	r3, [r7, #3]
 800aef8:	4619      	mov	r1, r3
 800aefa:	f7fe fb87 	bl	800960c <USBD_LL_DataOutStage>
}
 800aefe:	bf00      	nop
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b082      	sub	sp, #8
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	460b      	mov	r3, r1
 800af10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800af18:	78fa      	ldrb	r2, [r7, #3]
 800af1a:	6879      	ldr	r1, [r7, #4]
 800af1c:	4613      	mov	r3, r2
 800af1e:	00db      	lsls	r3, r3, #3
 800af20:	4413      	add	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	440b      	add	r3, r1
 800af26:	3320      	adds	r3, #32
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	78fb      	ldrb	r3, [r7, #3]
 800af2c:	4619      	mov	r1, r3
 800af2e:	f7fe fc20 	bl	8009772 <USBD_LL_DataInStage>
}
 800af32:	bf00      	nop
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b082      	sub	sp, #8
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fe fd5a 	bl	8009a02 <USBD_LL_SOF>
}
 800af4e:	bf00      	nop
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b084      	sub	sp, #16
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af5e:	2301      	movs	r3, #1
 800af60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	79db      	ldrb	r3, [r3, #7]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d102      	bne.n	800af70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800af6a:	2300      	movs	r3, #0
 800af6c:	73fb      	strb	r3, [r7, #15]
 800af6e:	e008      	b.n	800af82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	79db      	ldrb	r3, [r3, #7]
 800af74:	2b02      	cmp	r3, #2
 800af76:	d102      	bne.n	800af7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800af78:	2301      	movs	r3, #1
 800af7a:	73fb      	strb	r3, [r7, #15]
 800af7c:	e001      	b.n	800af82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800af7e:	f7f6 f8fb 	bl	8001178 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af88:	7bfa      	ldrb	r2, [r7, #15]
 800af8a:	4611      	mov	r1, r2
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7fe fcf4 	bl	800997a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fe fc9c 	bl	80098d6 <USBD_LL_Reset>
}
 800af9e:	bf00      	nop
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
	...

0800afa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fe fcef 	bl	800999a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	6812      	ldr	r2, [r2, #0]
 800afca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800afce:	f043 0301 	orr.w	r3, r3, #1
 800afd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	7adb      	ldrb	r3, [r3, #11]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d005      	beq.n	800afe8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afdc:	4b04      	ldr	r3, [pc, #16]	@ (800aff0 <HAL_PCD_SuspendCallback+0x48>)
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	4a03      	ldr	r2, [pc, #12]	@ (800aff0 <HAL_PCD_SuspendCallback+0x48>)
 800afe2:	f043 0306 	orr.w	r3, r3, #6
 800afe6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800afe8:	bf00      	nop
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	e000ed00 	.word	0xe000ed00

0800aff4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b002:	4618      	mov	r0, r3
 800b004:	f7fe fce5 	bl	80099d2 <USBD_LL_Resume>
}
 800b008:	bf00      	nop
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b022:	78fa      	ldrb	r2, [r7, #3]
 800b024:	4611      	mov	r1, r2
 800b026:	4618      	mov	r0, r3
 800b028:	f7fe fd3d 	bl	8009aa6 <USBD_LL_IsoOUTIncomplete>
}
 800b02c:	bf00      	nop
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	460b      	mov	r3, r1
 800b03e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b046:	78fa      	ldrb	r2, [r7, #3]
 800b048:	4611      	mov	r1, r2
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fe fcf9 	bl	8009a42 <USBD_LL_IsoINIncomplete>
}
 800b050:	bf00      	nop
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe fd4f 	bl	8009b0a <USBD_LL_DevConnected>
}
 800b06c:	bf00      	nop
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b082:	4618      	mov	r0, r3
 800b084:	f7fe fd4c 	bl	8009b20 <USBD_LL_DevDisconnected>
}
 800b088:	bf00      	nop
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d140      	bne.n	800b122 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b0a0:	4a22      	ldr	r2, [pc, #136]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a20      	ldr	r2, [pc, #128]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b0ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b0b0:	4b1e      	ldr	r3, [pc, #120]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b0b2:	4a1f      	ldr	r2, [pc, #124]	@ (800b130 <USBD_LL_Init+0xa0>)
 800b0b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800b0b6:	4b1d      	ldr	r3, [pc, #116]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b0b8:	2206      	movs	r2, #6
 800b0ba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800b0bc:	4b1b      	ldr	r3, [pc, #108]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b0be:	2202      	movs	r2, #2
 800b0c0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b0c2:	4b1a      	ldr	r3, [pc, #104]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b0c8:	4b18      	ldr	r3, [pc, #96]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b0ce:	4b17      	ldr	r3, [pc, #92]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b0d4:	4b15      	ldr	r3, [pc, #84]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b0da:	4b14      	ldr	r3, [pc, #80]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b0e0:	4b12      	ldr	r3, [pc, #72]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b0e6:	4b11      	ldr	r3, [pc, #68]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b0ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b0f2:	480e      	ldr	r0, [pc, #56]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b0f4:	f7f9 f917 	bl	8004326 <HAL_PCD_Init>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b0fe:	f7f6 f83b 	bl	8001178 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b102:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b106:	4809      	ldr	r0, [pc, #36]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b108:	f7fa fb43 	bl	8005792 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b10c:	2280      	movs	r2, #128	@ 0x80
 800b10e:	2100      	movs	r1, #0
 800b110:	4806      	ldr	r0, [pc, #24]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b112:	f7fa faf7 	bl	8005704 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b116:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800b11a:	2101      	movs	r1, #1
 800b11c:	4803      	ldr	r0, [pc, #12]	@ (800b12c <USBD_LL_Init+0x9c>)
 800b11e:	f7fa faf1 	bl	8005704 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	20001adc 	.word	0x20001adc
 800b130:	40040000 	.word	0x40040000

0800b134 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b13c:	2300      	movs	r3, #0
 800b13e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7f9 f9fa 	bl	8004544 <HAL_PCD_Start>
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	4618      	mov	r0, r3
 800b158:	f000 f942 	bl	800b3e0 <USBD_Get_USB_Status>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b160:	7bbb      	ldrb	r3, [r7, #14]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	4608      	mov	r0, r1
 800b174:	4611      	mov	r1, r2
 800b176:	461a      	mov	r2, r3
 800b178:	4603      	mov	r3, r0
 800b17a:	70fb      	strb	r3, [r7, #3]
 800b17c:	460b      	mov	r3, r1
 800b17e:	70bb      	strb	r3, [r7, #2]
 800b180:	4613      	mov	r3, r2
 800b182:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b192:	78bb      	ldrb	r3, [r7, #2]
 800b194:	883a      	ldrh	r2, [r7, #0]
 800b196:	78f9      	ldrb	r1, [r7, #3]
 800b198:	f7f9 fece 	bl	8004f38 <HAL_PCD_EP_Open>
 800b19c:	4603      	mov	r3, r0
 800b19e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 f91c 	bl	800b3e0 <USBD_Get_USB_Status>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1d0:	78fa      	ldrb	r2, [r7, #3]
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7f9 ff19 	bl	800500c <HAL_PCD_EP_Close>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f000 f8fd 	bl	800b3e0 <USBD_Get_USB_Status>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b204:	2300      	movs	r3, #0
 800b206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b20e:	78fa      	ldrb	r2, [r7, #3]
 800b210:	4611      	mov	r1, r2
 800b212:	4618      	mov	r0, r3
 800b214:	f7f9 ffd1 	bl	80051ba <HAL_PCD_EP_SetStall>
 800b218:	4603      	mov	r3, r0
 800b21a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b21c:	7bfb      	ldrb	r3, [r7, #15]
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 f8de 	bl	800b3e0 <USBD_Get_USB_Status>
 800b224:	4603      	mov	r3, r0
 800b226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b228:	7bbb      	ldrb	r3, [r7, #14]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b084      	sub	sp, #16
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	460b      	mov	r3, r1
 800b23c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b23e:	2300      	movs	r3, #0
 800b240:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b24c:	78fa      	ldrb	r2, [r7, #3]
 800b24e:	4611      	mov	r1, r2
 800b250:	4618      	mov	r0, r3
 800b252:	f7fa f815 	bl	8005280 <HAL_PCD_EP_ClrStall>
 800b256:	4603      	mov	r3, r0
 800b258:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 f8bf 	bl	800b3e0 <USBD_Get_USB_Status>
 800b262:	4603      	mov	r3, r0
 800b264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b266:	7bbb      	ldrb	r3, [r7, #14]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	460b      	mov	r3, r1
 800b27a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b282:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	da0b      	bge.n	800b2a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b28c:	78fb      	ldrb	r3, [r7, #3]
 800b28e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b292:	68f9      	ldr	r1, [r7, #12]
 800b294:	4613      	mov	r3, r2
 800b296:	00db      	lsls	r3, r3, #3
 800b298:	4413      	add	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	440b      	add	r3, r1
 800b29e:	3316      	adds	r3, #22
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	e00b      	b.n	800b2bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b2a4:	78fb      	ldrb	r3, [r7, #3]
 800b2a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2aa:	68f9      	ldr	r1, [r7, #12]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	00db      	lsls	r3, r3, #3
 800b2b0:	4413      	add	r3, r2
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	440b      	add	r3, r1
 800b2b6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b2ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3714      	adds	r7, #20
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b2e2:	78fa      	ldrb	r2, [r7, #3]
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7f9 fe02 	bl	8004ef0 <HAL_PCD_SetAddress>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 f874 	bl	800b3e0 <USBD_Get_USB_Status>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b086      	sub	sp, #24
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	60f8      	str	r0, [r7, #12]
 800b30e:	607a      	str	r2, [r7, #4]
 800b310:	603b      	str	r3, [r7, #0]
 800b312:	460b      	mov	r3, r1
 800b314:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b316:	2300      	movs	r3, #0
 800b318:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b324:	7af9      	ldrb	r1, [r7, #11]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	f7f9 ff0c 	bl	8005146 <HAL_PCD_EP_Transmit>
 800b32e:	4603      	mov	r3, r0
 800b330:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	4618      	mov	r0, r3
 800b336:	f000 f853 	bl	800b3e0 <USBD_Get_USB_Status>
 800b33a:	4603      	mov	r3, r0
 800b33c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b33e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3718      	adds	r7, #24
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	607a      	str	r2, [r7, #4]
 800b352:	603b      	str	r3, [r7, #0]
 800b354:	460b      	mov	r3, r1
 800b356:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b366:	7af9      	ldrb	r1, [r7, #11]
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	f7f9 fe98 	bl	80050a0 <HAL_PCD_EP_Receive>
 800b370:	4603      	mov	r3, r0
 800b372:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b374:	7dfb      	ldrb	r3, [r7, #23]
 800b376:	4618      	mov	r0, r3
 800b378:	f000 f832 	bl	800b3e0 <USBD_Get_USB_Status>
 800b37c:	4603      	mov	r3, r0
 800b37e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b380:	7dbb      	ldrb	r3, [r7, #22]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3718      	adds	r7, #24
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b082      	sub	sp, #8
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	460b      	mov	r3, r1
 800b394:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b39c:	78fa      	ldrb	r2, [r7, #3]
 800b39e:	4611      	mov	r1, r2
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7f9 feb8 	bl	8005116 <HAL_PCD_EP_GetRxCount>
 800b3a6:	4603      	mov	r3, r0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b3b8:	4b03      	ldr	r3, [pc, #12]	@ (800b3c8 <USBD_static_malloc+0x18>)
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	370c      	adds	r7, #12
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	20001fc0 	.word	0x20001fc0

0800b3cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]

}
 800b3d4:	bf00      	nop
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b3ee:	79fb      	ldrb	r3, [r7, #7]
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	d817      	bhi.n	800b424 <USBD_Get_USB_Status+0x44>
 800b3f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b3fc <USBD_Get_USB_Status+0x1c>)
 800b3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fa:	bf00      	nop
 800b3fc:	0800b40d 	.word	0x0800b40d
 800b400:	0800b413 	.word	0x0800b413
 800b404:	0800b419 	.word	0x0800b419
 800b408:	0800b41f 	.word	0x0800b41f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	73fb      	strb	r3, [r7, #15]
    break;
 800b410:	e00b      	b.n	800b42a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b412:	2303      	movs	r3, #3
 800b414:	73fb      	strb	r3, [r7, #15]
    break;
 800b416:	e008      	b.n	800b42a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b418:	2301      	movs	r3, #1
 800b41a:	73fb      	strb	r3, [r7, #15]
    break;
 800b41c:	e005      	b.n	800b42a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b41e:	2303      	movs	r3, #3
 800b420:	73fb      	strb	r3, [r7, #15]
    break;
 800b422:	e002      	b.n	800b42a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b424:	2303      	movs	r3, #3
 800b426:	73fb      	strb	r3, [r7, #15]
    break;
 800b428:	bf00      	nop
  }
  return usb_status;
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <__cvt>:
 800b438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b43c:	ec57 6b10 	vmov	r6, r7, d0
 800b440:	2f00      	cmp	r7, #0
 800b442:	460c      	mov	r4, r1
 800b444:	4619      	mov	r1, r3
 800b446:	463b      	mov	r3, r7
 800b448:	bfbb      	ittet	lt
 800b44a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b44e:	461f      	movlt	r7, r3
 800b450:	2300      	movge	r3, #0
 800b452:	232d      	movlt	r3, #45	@ 0x2d
 800b454:	700b      	strb	r3, [r1, #0]
 800b456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b458:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b45c:	4691      	mov	r9, r2
 800b45e:	f023 0820 	bic.w	r8, r3, #32
 800b462:	bfbc      	itt	lt
 800b464:	4632      	movlt	r2, r6
 800b466:	4616      	movlt	r6, r2
 800b468:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b46c:	d005      	beq.n	800b47a <__cvt+0x42>
 800b46e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b472:	d100      	bne.n	800b476 <__cvt+0x3e>
 800b474:	3401      	adds	r4, #1
 800b476:	2102      	movs	r1, #2
 800b478:	e000      	b.n	800b47c <__cvt+0x44>
 800b47a:	2103      	movs	r1, #3
 800b47c:	ab03      	add	r3, sp, #12
 800b47e:	9301      	str	r3, [sp, #4]
 800b480:	ab02      	add	r3, sp, #8
 800b482:	9300      	str	r3, [sp, #0]
 800b484:	ec47 6b10 	vmov	d0, r6, r7
 800b488:	4653      	mov	r3, sl
 800b48a:	4622      	mov	r2, r4
 800b48c:	f000 fe5c 	bl	800c148 <_dtoa_r>
 800b490:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b494:	4605      	mov	r5, r0
 800b496:	d119      	bne.n	800b4cc <__cvt+0x94>
 800b498:	f019 0f01 	tst.w	r9, #1
 800b49c:	d00e      	beq.n	800b4bc <__cvt+0x84>
 800b49e:	eb00 0904 	add.w	r9, r0, r4
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	4639      	mov	r1, r7
 800b4aa:	f7f5 fb1d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4ae:	b108      	cbz	r0, 800b4b4 <__cvt+0x7c>
 800b4b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b4b4:	2230      	movs	r2, #48	@ 0x30
 800b4b6:	9b03      	ldr	r3, [sp, #12]
 800b4b8:	454b      	cmp	r3, r9
 800b4ba:	d31e      	bcc.n	800b4fa <__cvt+0xc2>
 800b4bc:	9b03      	ldr	r3, [sp, #12]
 800b4be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4c0:	1b5b      	subs	r3, r3, r5
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	6013      	str	r3, [r2, #0]
 800b4c6:	b004      	add	sp, #16
 800b4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b4d0:	eb00 0904 	add.w	r9, r0, r4
 800b4d4:	d1e5      	bne.n	800b4a2 <__cvt+0x6a>
 800b4d6:	7803      	ldrb	r3, [r0, #0]
 800b4d8:	2b30      	cmp	r3, #48	@ 0x30
 800b4da:	d10a      	bne.n	800b4f2 <__cvt+0xba>
 800b4dc:	2200      	movs	r2, #0
 800b4de:	2300      	movs	r3, #0
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	4639      	mov	r1, r7
 800b4e4:	f7f5 fb00 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4e8:	b918      	cbnz	r0, 800b4f2 <__cvt+0xba>
 800b4ea:	f1c4 0401 	rsb	r4, r4, #1
 800b4ee:	f8ca 4000 	str.w	r4, [sl]
 800b4f2:	f8da 3000 	ldr.w	r3, [sl]
 800b4f6:	4499      	add	r9, r3
 800b4f8:	e7d3      	b.n	800b4a2 <__cvt+0x6a>
 800b4fa:	1c59      	adds	r1, r3, #1
 800b4fc:	9103      	str	r1, [sp, #12]
 800b4fe:	701a      	strb	r2, [r3, #0]
 800b500:	e7d9      	b.n	800b4b6 <__cvt+0x7e>

0800b502 <__exponent>:
 800b502:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b504:	2900      	cmp	r1, #0
 800b506:	bfba      	itte	lt
 800b508:	4249      	neglt	r1, r1
 800b50a:	232d      	movlt	r3, #45	@ 0x2d
 800b50c:	232b      	movge	r3, #43	@ 0x2b
 800b50e:	2909      	cmp	r1, #9
 800b510:	7002      	strb	r2, [r0, #0]
 800b512:	7043      	strb	r3, [r0, #1]
 800b514:	dd29      	ble.n	800b56a <__exponent+0x68>
 800b516:	f10d 0307 	add.w	r3, sp, #7
 800b51a:	461d      	mov	r5, r3
 800b51c:	270a      	movs	r7, #10
 800b51e:	461a      	mov	r2, r3
 800b520:	fbb1 f6f7 	udiv	r6, r1, r7
 800b524:	fb07 1416 	mls	r4, r7, r6, r1
 800b528:	3430      	adds	r4, #48	@ 0x30
 800b52a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b52e:	460c      	mov	r4, r1
 800b530:	2c63      	cmp	r4, #99	@ 0x63
 800b532:	f103 33ff 	add.w	r3, r3, #4294967295
 800b536:	4631      	mov	r1, r6
 800b538:	dcf1      	bgt.n	800b51e <__exponent+0x1c>
 800b53a:	3130      	adds	r1, #48	@ 0x30
 800b53c:	1e94      	subs	r4, r2, #2
 800b53e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b542:	1c41      	adds	r1, r0, #1
 800b544:	4623      	mov	r3, r4
 800b546:	42ab      	cmp	r3, r5
 800b548:	d30a      	bcc.n	800b560 <__exponent+0x5e>
 800b54a:	f10d 0309 	add.w	r3, sp, #9
 800b54e:	1a9b      	subs	r3, r3, r2
 800b550:	42ac      	cmp	r4, r5
 800b552:	bf88      	it	hi
 800b554:	2300      	movhi	r3, #0
 800b556:	3302      	adds	r3, #2
 800b558:	4403      	add	r3, r0
 800b55a:	1a18      	subs	r0, r3, r0
 800b55c:	b003      	add	sp, #12
 800b55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b560:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b564:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b568:	e7ed      	b.n	800b546 <__exponent+0x44>
 800b56a:	2330      	movs	r3, #48	@ 0x30
 800b56c:	3130      	adds	r1, #48	@ 0x30
 800b56e:	7083      	strb	r3, [r0, #2]
 800b570:	70c1      	strb	r1, [r0, #3]
 800b572:	1d03      	adds	r3, r0, #4
 800b574:	e7f1      	b.n	800b55a <__exponent+0x58>
	...

0800b578 <_printf_float>:
 800b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	b08d      	sub	sp, #52	@ 0x34
 800b57e:	460c      	mov	r4, r1
 800b580:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b584:	4616      	mov	r6, r2
 800b586:	461f      	mov	r7, r3
 800b588:	4605      	mov	r5, r0
 800b58a:	f000 fcdb 	bl	800bf44 <_localeconv_r>
 800b58e:	6803      	ldr	r3, [r0, #0]
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	4618      	mov	r0, r3
 800b594:	f7f4 fe7c 	bl	8000290 <strlen>
 800b598:	2300      	movs	r3, #0
 800b59a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b59c:	f8d8 3000 	ldr.w	r3, [r8]
 800b5a0:	9005      	str	r0, [sp, #20]
 800b5a2:	3307      	adds	r3, #7
 800b5a4:	f023 0307 	bic.w	r3, r3, #7
 800b5a8:	f103 0208 	add.w	r2, r3, #8
 800b5ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b5b0:	f8d4 b000 	ldr.w	fp, [r4]
 800b5b4:	f8c8 2000 	str.w	r2, [r8]
 800b5b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b5c0:	9307      	str	r3, [sp, #28]
 800b5c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800b5c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b5ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5ce:	4b9c      	ldr	r3, [pc, #624]	@ (800b840 <_printf_float+0x2c8>)
 800b5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d4:	f7f5 faba 	bl	8000b4c <__aeabi_dcmpun>
 800b5d8:	bb70      	cbnz	r0, 800b638 <_printf_float+0xc0>
 800b5da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5de:	4b98      	ldr	r3, [pc, #608]	@ (800b840 <_printf_float+0x2c8>)
 800b5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e4:	f7f5 fa94 	bl	8000b10 <__aeabi_dcmple>
 800b5e8:	bb30      	cbnz	r0, 800b638 <_printf_float+0xc0>
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	4640      	mov	r0, r8
 800b5f0:	4649      	mov	r1, r9
 800b5f2:	f7f5 fa83 	bl	8000afc <__aeabi_dcmplt>
 800b5f6:	b110      	cbz	r0, 800b5fe <_printf_float+0x86>
 800b5f8:	232d      	movs	r3, #45	@ 0x2d
 800b5fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5fe:	4a91      	ldr	r2, [pc, #580]	@ (800b844 <_printf_float+0x2cc>)
 800b600:	4b91      	ldr	r3, [pc, #580]	@ (800b848 <_printf_float+0x2d0>)
 800b602:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b606:	bf94      	ite	ls
 800b608:	4690      	movls	r8, r2
 800b60a:	4698      	movhi	r8, r3
 800b60c:	2303      	movs	r3, #3
 800b60e:	6123      	str	r3, [r4, #16]
 800b610:	f02b 0304 	bic.w	r3, fp, #4
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	f04f 0900 	mov.w	r9, #0
 800b61a:	9700      	str	r7, [sp, #0]
 800b61c:	4633      	mov	r3, r6
 800b61e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b620:	4621      	mov	r1, r4
 800b622:	4628      	mov	r0, r5
 800b624:	f000 f9d2 	bl	800b9cc <_printf_common>
 800b628:	3001      	adds	r0, #1
 800b62a:	f040 808d 	bne.w	800b748 <_printf_float+0x1d0>
 800b62e:	f04f 30ff 	mov.w	r0, #4294967295
 800b632:	b00d      	add	sp, #52	@ 0x34
 800b634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b638:	4642      	mov	r2, r8
 800b63a:	464b      	mov	r3, r9
 800b63c:	4640      	mov	r0, r8
 800b63e:	4649      	mov	r1, r9
 800b640:	f7f5 fa84 	bl	8000b4c <__aeabi_dcmpun>
 800b644:	b140      	cbz	r0, 800b658 <_printf_float+0xe0>
 800b646:	464b      	mov	r3, r9
 800b648:	2b00      	cmp	r3, #0
 800b64a:	bfbc      	itt	lt
 800b64c:	232d      	movlt	r3, #45	@ 0x2d
 800b64e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b652:	4a7e      	ldr	r2, [pc, #504]	@ (800b84c <_printf_float+0x2d4>)
 800b654:	4b7e      	ldr	r3, [pc, #504]	@ (800b850 <_printf_float+0x2d8>)
 800b656:	e7d4      	b.n	800b602 <_printf_float+0x8a>
 800b658:	6863      	ldr	r3, [r4, #4]
 800b65a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b65e:	9206      	str	r2, [sp, #24]
 800b660:	1c5a      	adds	r2, r3, #1
 800b662:	d13b      	bne.n	800b6dc <_printf_float+0x164>
 800b664:	2306      	movs	r3, #6
 800b666:	6063      	str	r3, [r4, #4]
 800b668:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b66c:	2300      	movs	r3, #0
 800b66e:	6022      	str	r2, [r4, #0]
 800b670:	9303      	str	r3, [sp, #12]
 800b672:	ab0a      	add	r3, sp, #40	@ 0x28
 800b674:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b678:	ab09      	add	r3, sp, #36	@ 0x24
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	6861      	ldr	r1, [r4, #4]
 800b67e:	ec49 8b10 	vmov	d0, r8, r9
 800b682:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b686:	4628      	mov	r0, r5
 800b688:	f7ff fed6 	bl	800b438 <__cvt>
 800b68c:	9b06      	ldr	r3, [sp, #24]
 800b68e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b690:	2b47      	cmp	r3, #71	@ 0x47
 800b692:	4680      	mov	r8, r0
 800b694:	d129      	bne.n	800b6ea <_printf_float+0x172>
 800b696:	1cc8      	adds	r0, r1, #3
 800b698:	db02      	blt.n	800b6a0 <_printf_float+0x128>
 800b69a:	6863      	ldr	r3, [r4, #4]
 800b69c:	4299      	cmp	r1, r3
 800b69e:	dd41      	ble.n	800b724 <_printf_float+0x1ac>
 800b6a0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b6a4:	fa5f fa8a 	uxtb.w	sl, sl
 800b6a8:	3901      	subs	r1, #1
 800b6aa:	4652      	mov	r2, sl
 800b6ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b6b0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b6b2:	f7ff ff26 	bl	800b502 <__exponent>
 800b6b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6b8:	1813      	adds	r3, r2, r0
 800b6ba:	2a01      	cmp	r2, #1
 800b6bc:	4681      	mov	r9, r0
 800b6be:	6123      	str	r3, [r4, #16]
 800b6c0:	dc02      	bgt.n	800b6c8 <_printf_float+0x150>
 800b6c2:	6822      	ldr	r2, [r4, #0]
 800b6c4:	07d2      	lsls	r2, r2, #31
 800b6c6:	d501      	bpl.n	800b6cc <_printf_float+0x154>
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	6123      	str	r3, [r4, #16]
 800b6cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d0a2      	beq.n	800b61a <_printf_float+0xa2>
 800b6d4:	232d      	movs	r3, #45	@ 0x2d
 800b6d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6da:	e79e      	b.n	800b61a <_printf_float+0xa2>
 800b6dc:	9a06      	ldr	r2, [sp, #24]
 800b6de:	2a47      	cmp	r2, #71	@ 0x47
 800b6e0:	d1c2      	bne.n	800b668 <_printf_float+0xf0>
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1c0      	bne.n	800b668 <_printf_float+0xf0>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e7bd      	b.n	800b666 <_printf_float+0xee>
 800b6ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b6ee:	d9db      	bls.n	800b6a8 <_printf_float+0x130>
 800b6f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b6f4:	d118      	bne.n	800b728 <_printf_float+0x1b0>
 800b6f6:	2900      	cmp	r1, #0
 800b6f8:	6863      	ldr	r3, [r4, #4]
 800b6fa:	dd0b      	ble.n	800b714 <_printf_float+0x19c>
 800b6fc:	6121      	str	r1, [r4, #16]
 800b6fe:	b913      	cbnz	r3, 800b706 <_printf_float+0x18e>
 800b700:	6822      	ldr	r2, [r4, #0]
 800b702:	07d0      	lsls	r0, r2, #31
 800b704:	d502      	bpl.n	800b70c <_printf_float+0x194>
 800b706:	3301      	adds	r3, #1
 800b708:	440b      	add	r3, r1
 800b70a:	6123      	str	r3, [r4, #16]
 800b70c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b70e:	f04f 0900 	mov.w	r9, #0
 800b712:	e7db      	b.n	800b6cc <_printf_float+0x154>
 800b714:	b913      	cbnz	r3, 800b71c <_printf_float+0x1a4>
 800b716:	6822      	ldr	r2, [r4, #0]
 800b718:	07d2      	lsls	r2, r2, #31
 800b71a:	d501      	bpl.n	800b720 <_printf_float+0x1a8>
 800b71c:	3302      	adds	r3, #2
 800b71e:	e7f4      	b.n	800b70a <_printf_float+0x192>
 800b720:	2301      	movs	r3, #1
 800b722:	e7f2      	b.n	800b70a <_printf_float+0x192>
 800b724:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b72a:	4299      	cmp	r1, r3
 800b72c:	db05      	blt.n	800b73a <_printf_float+0x1c2>
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	6121      	str	r1, [r4, #16]
 800b732:	07d8      	lsls	r0, r3, #31
 800b734:	d5ea      	bpl.n	800b70c <_printf_float+0x194>
 800b736:	1c4b      	adds	r3, r1, #1
 800b738:	e7e7      	b.n	800b70a <_printf_float+0x192>
 800b73a:	2900      	cmp	r1, #0
 800b73c:	bfd4      	ite	le
 800b73e:	f1c1 0202 	rsble	r2, r1, #2
 800b742:	2201      	movgt	r2, #1
 800b744:	4413      	add	r3, r2
 800b746:	e7e0      	b.n	800b70a <_printf_float+0x192>
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	055a      	lsls	r2, r3, #21
 800b74c:	d407      	bmi.n	800b75e <_printf_float+0x1e6>
 800b74e:	6923      	ldr	r3, [r4, #16]
 800b750:	4642      	mov	r2, r8
 800b752:	4631      	mov	r1, r6
 800b754:	4628      	mov	r0, r5
 800b756:	47b8      	blx	r7
 800b758:	3001      	adds	r0, #1
 800b75a:	d12b      	bne.n	800b7b4 <_printf_float+0x23c>
 800b75c:	e767      	b.n	800b62e <_printf_float+0xb6>
 800b75e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b762:	f240 80dd 	bls.w	800b920 <_printf_float+0x3a8>
 800b766:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b76a:	2200      	movs	r2, #0
 800b76c:	2300      	movs	r3, #0
 800b76e:	f7f5 f9bb 	bl	8000ae8 <__aeabi_dcmpeq>
 800b772:	2800      	cmp	r0, #0
 800b774:	d033      	beq.n	800b7de <_printf_float+0x266>
 800b776:	4a37      	ldr	r2, [pc, #220]	@ (800b854 <_printf_float+0x2dc>)
 800b778:	2301      	movs	r3, #1
 800b77a:	4631      	mov	r1, r6
 800b77c:	4628      	mov	r0, r5
 800b77e:	47b8      	blx	r7
 800b780:	3001      	adds	r0, #1
 800b782:	f43f af54 	beq.w	800b62e <_printf_float+0xb6>
 800b786:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b78a:	4543      	cmp	r3, r8
 800b78c:	db02      	blt.n	800b794 <_printf_float+0x21c>
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	07d8      	lsls	r0, r3, #31
 800b792:	d50f      	bpl.n	800b7b4 <_printf_float+0x23c>
 800b794:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b798:	4631      	mov	r1, r6
 800b79a:	4628      	mov	r0, r5
 800b79c:	47b8      	blx	r7
 800b79e:	3001      	adds	r0, #1
 800b7a0:	f43f af45 	beq.w	800b62e <_printf_float+0xb6>
 800b7a4:	f04f 0900 	mov.w	r9, #0
 800b7a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b7ac:	f104 0a1a 	add.w	sl, r4, #26
 800b7b0:	45c8      	cmp	r8, r9
 800b7b2:	dc09      	bgt.n	800b7c8 <_printf_float+0x250>
 800b7b4:	6823      	ldr	r3, [r4, #0]
 800b7b6:	079b      	lsls	r3, r3, #30
 800b7b8:	f100 8103 	bmi.w	800b9c2 <_printf_float+0x44a>
 800b7bc:	68e0      	ldr	r0, [r4, #12]
 800b7be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7c0:	4298      	cmp	r0, r3
 800b7c2:	bfb8      	it	lt
 800b7c4:	4618      	movlt	r0, r3
 800b7c6:	e734      	b.n	800b632 <_printf_float+0xba>
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	4652      	mov	r2, sl
 800b7cc:	4631      	mov	r1, r6
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	47b8      	blx	r7
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	f43f af2b 	beq.w	800b62e <_printf_float+0xb6>
 800b7d8:	f109 0901 	add.w	r9, r9, #1
 800b7dc:	e7e8      	b.n	800b7b0 <_printf_float+0x238>
 800b7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	dc39      	bgt.n	800b858 <_printf_float+0x2e0>
 800b7e4:	4a1b      	ldr	r2, [pc, #108]	@ (800b854 <_printf_float+0x2dc>)
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	4631      	mov	r1, r6
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	47b8      	blx	r7
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	f43f af1d 	beq.w	800b62e <_printf_float+0xb6>
 800b7f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b7f8:	ea59 0303 	orrs.w	r3, r9, r3
 800b7fc:	d102      	bne.n	800b804 <_printf_float+0x28c>
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	07d9      	lsls	r1, r3, #31
 800b802:	d5d7      	bpl.n	800b7b4 <_printf_float+0x23c>
 800b804:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b808:	4631      	mov	r1, r6
 800b80a:	4628      	mov	r0, r5
 800b80c:	47b8      	blx	r7
 800b80e:	3001      	adds	r0, #1
 800b810:	f43f af0d 	beq.w	800b62e <_printf_float+0xb6>
 800b814:	f04f 0a00 	mov.w	sl, #0
 800b818:	f104 0b1a 	add.w	fp, r4, #26
 800b81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b81e:	425b      	negs	r3, r3
 800b820:	4553      	cmp	r3, sl
 800b822:	dc01      	bgt.n	800b828 <_printf_float+0x2b0>
 800b824:	464b      	mov	r3, r9
 800b826:	e793      	b.n	800b750 <_printf_float+0x1d8>
 800b828:	2301      	movs	r3, #1
 800b82a:	465a      	mov	r2, fp
 800b82c:	4631      	mov	r1, r6
 800b82e:	4628      	mov	r0, r5
 800b830:	47b8      	blx	r7
 800b832:	3001      	adds	r0, #1
 800b834:	f43f aefb 	beq.w	800b62e <_printf_float+0xb6>
 800b838:	f10a 0a01 	add.w	sl, sl, #1
 800b83c:	e7ee      	b.n	800b81c <_printf_float+0x2a4>
 800b83e:	bf00      	nop
 800b840:	7fefffff 	.word	0x7fefffff
 800b844:	0800fc24 	.word	0x0800fc24
 800b848:	0800fc28 	.word	0x0800fc28
 800b84c:	0800fc2c 	.word	0x0800fc2c
 800b850:	0800fc30 	.word	0x0800fc30
 800b854:	0800fc34 	.word	0x0800fc34
 800b858:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b85a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b85e:	4553      	cmp	r3, sl
 800b860:	bfa8      	it	ge
 800b862:	4653      	movge	r3, sl
 800b864:	2b00      	cmp	r3, #0
 800b866:	4699      	mov	r9, r3
 800b868:	dc36      	bgt.n	800b8d8 <_printf_float+0x360>
 800b86a:	f04f 0b00 	mov.w	fp, #0
 800b86e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b872:	f104 021a 	add.w	r2, r4, #26
 800b876:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b878:	9306      	str	r3, [sp, #24]
 800b87a:	eba3 0309 	sub.w	r3, r3, r9
 800b87e:	455b      	cmp	r3, fp
 800b880:	dc31      	bgt.n	800b8e6 <_printf_float+0x36e>
 800b882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b884:	459a      	cmp	sl, r3
 800b886:	dc3a      	bgt.n	800b8fe <_printf_float+0x386>
 800b888:	6823      	ldr	r3, [r4, #0]
 800b88a:	07da      	lsls	r2, r3, #31
 800b88c:	d437      	bmi.n	800b8fe <_printf_float+0x386>
 800b88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b890:	ebaa 0903 	sub.w	r9, sl, r3
 800b894:	9b06      	ldr	r3, [sp, #24]
 800b896:	ebaa 0303 	sub.w	r3, sl, r3
 800b89a:	4599      	cmp	r9, r3
 800b89c:	bfa8      	it	ge
 800b89e:	4699      	movge	r9, r3
 800b8a0:	f1b9 0f00 	cmp.w	r9, #0
 800b8a4:	dc33      	bgt.n	800b90e <_printf_float+0x396>
 800b8a6:	f04f 0800 	mov.w	r8, #0
 800b8aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8ae:	f104 0b1a 	add.w	fp, r4, #26
 800b8b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8b4:	ebaa 0303 	sub.w	r3, sl, r3
 800b8b8:	eba3 0309 	sub.w	r3, r3, r9
 800b8bc:	4543      	cmp	r3, r8
 800b8be:	f77f af79 	ble.w	800b7b4 <_printf_float+0x23c>
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	465a      	mov	r2, fp
 800b8c6:	4631      	mov	r1, r6
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	47b8      	blx	r7
 800b8cc:	3001      	adds	r0, #1
 800b8ce:	f43f aeae 	beq.w	800b62e <_printf_float+0xb6>
 800b8d2:	f108 0801 	add.w	r8, r8, #1
 800b8d6:	e7ec      	b.n	800b8b2 <_printf_float+0x33a>
 800b8d8:	4642      	mov	r2, r8
 800b8da:	4631      	mov	r1, r6
 800b8dc:	4628      	mov	r0, r5
 800b8de:	47b8      	blx	r7
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	d1c2      	bne.n	800b86a <_printf_float+0x2f2>
 800b8e4:	e6a3      	b.n	800b62e <_printf_float+0xb6>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	4631      	mov	r1, r6
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	9206      	str	r2, [sp, #24]
 800b8ee:	47b8      	blx	r7
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	f43f ae9c 	beq.w	800b62e <_printf_float+0xb6>
 800b8f6:	9a06      	ldr	r2, [sp, #24]
 800b8f8:	f10b 0b01 	add.w	fp, fp, #1
 800b8fc:	e7bb      	b.n	800b876 <_printf_float+0x2fe>
 800b8fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b902:	4631      	mov	r1, r6
 800b904:	4628      	mov	r0, r5
 800b906:	47b8      	blx	r7
 800b908:	3001      	adds	r0, #1
 800b90a:	d1c0      	bne.n	800b88e <_printf_float+0x316>
 800b90c:	e68f      	b.n	800b62e <_printf_float+0xb6>
 800b90e:	9a06      	ldr	r2, [sp, #24]
 800b910:	464b      	mov	r3, r9
 800b912:	4442      	add	r2, r8
 800b914:	4631      	mov	r1, r6
 800b916:	4628      	mov	r0, r5
 800b918:	47b8      	blx	r7
 800b91a:	3001      	adds	r0, #1
 800b91c:	d1c3      	bne.n	800b8a6 <_printf_float+0x32e>
 800b91e:	e686      	b.n	800b62e <_printf_float+0xb6>
 800b920:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b924:	f1ba 0f01 	cmp.w	sl, #1
 800b928:	dc01      	bgt.n	800b92e <_printf_float+0x3b6>
 800b92a:	07db      	lsls	r3, r3, #31
 800b92c:	d536      	bpl.n	800b99c <_printf_float+0x424>
 800b92e:	2301      	movs	r3, #1
 800b930:	4642      	mov	r2, r8
 800b932:	4631      	mov	r1, r6
 800b934:	4628      	mov	r0, r5
 800b936:	47b8      	blx	r7
 800b938:	3001      	adds	r0, #1
 800b93a:	f43f ae78 	beq.w	800b62e <_printf_float+0xb6>
 800b93e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b942:	4631      	mov	r1, r6
 800b944:	4628      	mov	r0, r5
 800b946:	47b8      	blx	r7
 800b948:	3001      	adds	r0, #1
 800b94a:	f43f ae70 	beq.w	800b62e <_printf_float+0xb6>
 800b94e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b952:	2200      	movs	r2, #0
 800b954:	2300      	movs	r3, #0
 800b956:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b95a:	f7f5 f8c5 	bl	8000ae8 <__aeabi_dcmpeq>
 800b95e:	b9c0      	cbnz	r0, 800b992 <_printf_float+0x41a>
 800b960:	4653      	mov	r3, sl
 800b962:	f108 0201 	add.w	r2, r8, #1
 800b966:	4631      	mov	r1, r6
 800b968:	4628      	mov	r0, r5
 800b96a:	47b8      	blx	r7
 800b96c:	3001      	adds	r0, #1
 800b96e:	d10c      	bne.n	800b98a <_printf_float+0x412>
 800b970:	e65d      	b.n	800b62e <_printf_float+0xb6>
 800b972:	2301      	movs	r3, #1
 800b974:	465a      	mov	r2, fp
 800b976:	4631      	mov	r1, r6
 800b978:	4628      	mov	r0, r5
 800b97a:	47b8      	blx	r7
 800b97c:	3001      	adds	r0, #1
 800b97e:	f43f ae56 	beq.w	800b62e <_printf_float+0xb6>
 800b982:	f108 0801 	add.w	r8, r8, #1
 800b986:	45d0      	cmp	r8, sl
 800b988:	dbf3      	blt.n	800b972 <_printf_float+0x3fa>
 800b98a:	464b      	mov	r3, r9
 800b98c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b990:	e6df      	b.n	800b752 <_printf_float+0x1da>
 800b992:	f04f 0800 	mov.w	r8, #0
 800b996:	f104 0b1a 	add.w	fp, r4, #26
 800b99a:	e7f4      	b.n	800b986 <_printf_float+0x40e>
 800b99c:	2301      	movs	r3, #1
 800b99e:	4642      	mov	r2, r8
 800b9a0:	e7e1      	b.n	800b966 <_printf_float+0x3ee>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	464a      	mov	r2, r9
 800b9a6:	4631      	mov	r1, r6
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	47b8      	blx	r7
 800b9ac:	3001      	adds	r0, #1
 800b9ae:	f43f ae3e 	beq.w	800b62e <_printf_float+0xb6>
 800b9b2:	f108 0801 	add.w	r8, r8, #1
 800b9b6:	68e3      	ldr	r3, [r4, #12]
 800b9b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9ba:	1a5b      	subs	r3, r3, r1
 800b9bc:	4543      	cmp	r3, r8
 800b9be:	dcf0      	bgt.n	800b9a2 <_printf_float+0x42a>
 800b9c0:	e6fc      	b.n	800b7bc <_printf_float+0x244>
 800b9c2:	f04f 0800 	mov.w	r8, #0
 800b9c6:	f104 0919 	add.w	r9, r4, #25
 800b9ca:	e7f4      	b.n	800b9b6 <_printf_float+0x43e>

0800b9cc <_printf_common>:
 800b9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d0:	4616      	mov	r6, r2
 800b9d2:	4698      	mov	r8, r3
 800b9d4:	688a      	ldr	r2, [r1, #8]
 800b9d6:	690b      	ldr	r3, [r1, #16]
 800b9d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	bfb8      	it	lt
 800b9e0:	4613      	movlt	r3, r2
 800b9e2:	6033      	str	r3, [r6, #0]
 800b9e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b9e8:	4607      	mov	r7, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	b10a      	cbz	r2, 800b9f2 <_printf_common+0x26>
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	6033      	str	r3, [r6, #0]
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	0699      	lsls	r1, r3, #26
 800b9f6:	bf42      	ittt	mi
 800b9f8:	6833      	ldrmi	r3, [r6, #0]
 800b9fa:	3302      	addmi	r3, #2
 800b9fc:	6033      	strmi	r3, [r6, #0]
 800b9fe:	6825      	ldr	r5, [r4, #0]
 800ba00:	f015 0506 	ands.w	r5, r5, #6
 800ba04:	d106      	bne.n	800ba14 <_printf_common+0x48>
 800ba06:	f104 0a19 	add.w	sl, r4, #25
 800ba0a:	68e3      	ldr	r3, [r4, #12]
 800ba0c:	6832      	ldr	r2, [r6, #0]
 800ba0e:	1a9b      	subs	r3, r3, r2
 800ba10:	42ab      	cmp	r3, r5
 800ba12:	dc26      	bgt.n	800ba62 <_printf_common+0x96>
 800ba14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba18:	6822      	ldr	r2, [r4, #0]
 800ba1a:	3b00      	subs	r3, #0
 800ba1c:	bf18      	it	ne
 800ba1e:	2301      	movne	r3, #1
 800ba20:	0692      	lsls	r2, r2, #26
 800ba22:	d42b      	bmi.n	800ba7c <_printf_common+0xb0>
 800ba24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba28:	4641      	mov	r1, r8
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	47c8      	blx	r9
 800ba2e:	3001      	adds	r0, #1
 800ba30:	d01e      	beq.n	800ba70 <_printf_common+0xa4>
 800ba32:	6823      	ldr	r3, [r4, #0]
 800ba34:	6922      	ldr	r2, [r4, #16]
 800ba36:	f003 0306 	and.w	r3, r3, #6
 800ba3a:	2b04      	cmp	r3, #4
 800ba3c:	bf02      	ittt	eq
 800ba3e:	68e5      	ldreq	r5, [r4, #12]
 800ba40:	6833      	ldreq	r3, [r6, #0]
 800ba42:	1aed      	subeq	r5, r5, r3
 800ba44:	68a3      	ldr	r3, [r4, #8]
 800ba46:	bf0c      	ite	eq
 800ba48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba4c:	2500      	movne	r5, #0
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	bfc4      	itt	gt
 800ba52:	1a9b      	subgt	r3, r3, r2
 800ba54:	18ed      	addgt	r5, r5, r3
 800ba56:	2600      	movs	r6, #0
 800ba58:	341a      	adds	r4, #26
 800ba5a:	42b5      	cmp	r5, r6
 800ba5c:	d11a      	bne.n	800ba94 <_printf_common+0xc8>
 800ba5e:	2000      	movs	r0, #0
 800ba60:	e008      	b.n	800ba74 <_printf_common+0xa8>
 800ba62:	2301      	movs	r3, #1
 800ba64:	4652      	mov	r2, sl
 800ba66:	4641      	mov	r1, r8
 800ba68:	4638      	mov	r0, r7
 800ba6a:	47c8      	blx	r9
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	d103      	bne.n	800ba78 <_printf_common+0xac>
 800ba70:	f04f 30ff 	mov.w	r0, #4294967295
 800ba74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba78:	3501      	adds	r5, #1
 800ba7a:	e7c6      	b.n	800ba0a <_printf_common+0x3e>
 800ba7c:	18e1      	adds	r1, r4, r3
 800ba7e:	1c5a      	adds	r2, r3, #1
 800ba80:	2030      	movs	r0, #48	@ 0x30
 800ba82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba86:	4422      	add	r2, r4
 800ba88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba90:	3302      	adds	r3, #2
 800ba92:	e7c7      	b.n	800ba24 <_printf_common+0x58>
 800ba94:	2301      	movs	r3, #1
 800ba96:	4622      	mov	r2, r4
 800ba98:	4641      	mov	r1, r8
 800ba9a:	4638      	mov	r0, r7
 800ba9c:	47c8      	blx	r9
 800ba9e:	3001      	adds	r0, #1
 800baa0:	d0e6      	beq.n	800ba70 <_printf_common+0xa4>
 800baa2:	3601      	adds	r6, #1
 800baa4:	e7d9      	b.n	800ba5a <_printf_common+0x8e>
	...

0800baa8 <_printf_i>:
 800baa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baac:	7e0f      	ldrb	r7, [r1, #24]
 800baae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bab0:	2f78      	cmp	r7, #120	@ 0x78
 800bab2:	4691      	mov	r9, r2
 800bab4:	4680      	mov	r8, r0
 800bab6:	460c      	mov	r4, r1
 800bab8:	469a      	mov	sl, r3
 800baba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800babe:	d807      	bhi.n	800bad0 <_printf_i+0x28>
 800bac0:	2f62      	cmp	r7, #98	@ 0x62
 800bac2:	d80a      	bhi.n	800bada <_printf_i+0x32>
 800bac4:	2f00      	cmp	r7, #0
 800bac6:	f000 80d2 	beq.w	800bc6e <_printf_i+0x1c6>
 800baca:	2f58      	cmp	r7, #88	@ 0x58
 800bacc:	f000 80b9 	beq.w	800bc42 <_printf_i+0x19a>
 800bad0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bad4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bad8:	e03a      	b.n	800bb50 <_printf_i+0xa8>
 800bada:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bade:	2b15      	cmp	r3, #21
 800bae0:	d8f6      	bhi.n	800bad0 <_printf_i+0x28>
 800bae2:	a101      	add	r1, pc, #4	@ (adr r1, 800bae8 <_printf_i+0x40>)
 800bae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bae8:	0800bb41 	.word	0x0800bb41
 800baec:	0800bb55 	.word	0x0800bb55
 800baf0:	0800bad1 	.word	0x0800bad1
 800baf4:	0800bad1 	.word	0x0800bad1
 800baf8:	0800bad1 	.word	0x0800bad1
 800bafc:	0800bad1 	.word	0x0800bad1
 800bb00:	0800bb55 	.word	0x0800bb55
 800bb04:	0800bad1 	.word	0x0800bad1
 800bb08:	0800bad1 	.word	0x0800bad1
 800bb0c:	0800bad1 	.word	0x0800bad1
 800bb10:	0800bad1 	.word	0x0800bad1
 800bb14:	0800bc55 	.word	0x0800bc55
 800bb18:	0800bb7f 	.word	0x0800bb7f
 800bb1c:	0800bc0f 	.word	0x0800bc0f
 800bb20:	0800bad1 	.word	0x0800bad1
 800bb24:	0800bad1 	.word	0x0800bad1
 800bb28:	0800bc77 	.word	0x0800bc77
 800bb2c:	0800bad1 	.word	0x0800bad1
 800bb30:	0800bb7f 	.word	0x0800bb7f
 800bb34:	0800bad1 	.word	0x0800bad1
 800bb38:	0800bad1 	.word	0x0800bad1
 800bb3c:	0800bc17 	.word	0x0800bc17
 800bb40:	6833      	ldr	r3, [r6, #0]
 800bb42:	1d1a      	adds	r2, r3, #4
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	6032      	str	r2, [r6, #0]
 800bb48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb50:	2301      	movs	r3, #1
 800bb52:	e09d      	b.n	800bc90 <_printf_i+0x1e8>
 800bb54:	6833      	ldr	r3, [r6, #0]
 800bb56:	6820      	ldr	r0, [r4, #0]
 800bb58:	1d19      	adds	r1, r3, #4
 800bb5a:	6031      	str	r1, [r6, #0]
 800bb5c:	0606      	lsls	r6, r0, #24
 800bb5e:	d501      	bpl.n	800bb64 <_printf_i+0xbc>
 800bb60:	681d      	ldr	r5, [r3, #0]
 800bb62:	e003      	b.n	800bb6c <_printf_i+0xc4>
 800bb64:	0645      	lsls	r5, r0, #25
 800bb66:	d5fb      	bpl.n	800bb60 <_printf_i+0xb8>
 800bb68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb6c:	2d00      	cmp	r5, #0
 800bb6e:	da03      	bge.n	800bb78 <_printf_i+0xd0>
 800bb70:	232d      	movs	r3, #45	@ 0x2d
 800bb72:	426d      	negs	r5, r5
 800bb74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb78:	4859      	ldr	r0, [pc, #356]	@ (800bce0 <_printf_i+0x238>)
 800bb7a:	230a      	movs	r3, #10
 800bb7c:	e011      	b.n	800bba2 <_printf_i+0xfa>
 800bb7e:	6821      	ldr	r1, [r4, #0]
 800bb80:	6833      	ldr	r3, [r6, #0]
 800bb82:	0608      	lsls	r0, r1, #24
 800bb84:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb88:	d402      	bmi.n	800bb90 <_printf_i+0xe8>
 800bb8a:	0649      	lsls	r1, r1, #25
 800bb8c:	bf48      	it	mi
 800bb8e:	b2ad      	uxthmi	r5, r5
 800bb90:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb92:	4853      	ldr	r0, [pc, #332]	@ (800bce0 <_printf_i+0x238>)
 800bb94:	6033      	str	r3, [r6, #0]
 800bb96:	bf14      	ite	ne
 800bb98:	230a      	movne	r3, #10
 800bb9a:	2308      	moveq	r3, #8
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bba2:	6866      	ldr	r6, [r4, #4]
 800bba4:	60a6      	str	r6, [r4, #8]
 800bba6:	2e00      	cmp	r6, #0
 800bba8:	bfa2      	ittt	ge
 800bbaa:	6821      	ldrge	r1, [r4, #0]
 800bbac:	f021 0104 	bicge.w	r1, r1, #4
 800bbb0:	6021      	strge	r1, [r4, #0]
 800bbb2:	b90d      	cbnz	r5, 800bbb8 <_printf_i+0x110>
 800bbb4:	2e00      	cmp	r6, #0
 800bbb6:	d04b      	beq.n	800bc50 <_printf_i+0x1a8>
 800bbb8:	4616      	mov	r6, r2
 800bbba:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbbe:	fb03 5711 	mls	r7, r3, r1, r5
 800bbc2:	5dc7      	ldrb	r7, [r0, r7]
 800bbc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbc8:	462f      	mov	r7, r5
 800bbca:	42bb      	cmp	r3, r7
 800bbcc:	460d      	mov	r5, r1
 800bbce:	d9f4      	bls.n	800bbba <_printf_i+0x112>
 800bbd0:	2b08      	cmp	r3, #8
 800bbd2:	d10b      	bne.n	800bbec <_printf_i+0x144>
 800bbd4:	6823      	ldr	r3, [r4, #0]
 800bbd6:	07df      	lsls	r7, r3, #31
 800bbd8:	d508      	bpl.n	800bbec <_printf_i+0x144>
 800bbda:	6923      	ldr	r3, [r4, #16]
 800bbdc:	6861      	ldr	r1, [r4, #4]
 800bbde:	4299      	cmp	r1, r3
 800bbe0:	bfde      	ittt	le
 800bbe2:	2330      	movle	r3, #48	@ 0x30
 800bbe4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bbe8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bbec:	1b92      	subs	r2, r2, r6
 800bbee:	6122      	str	r2, [r4, #16]
 800bbf0:	f8cd a000 	str.w	sl, [sp]
 800bbf4:	464b      	mov	r3, r9
 800bbf6:	aa03      	add	r2, sp, #12
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	f7ff fee6 	bl	800b9cc <_printf_common>
 800bc00:	3001      	adds	r0, #1
 800bc02:	d14a      	bne.n	800bc9a <_printf_i+0x1f2>
 800bc04:	f04f 30ff 	mov.w	r0, #4294967295
 800bc08:	b004      	add	sp, #16
 800bc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	f043 0320 	orr.w	r3, r3, #32
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	4833      	ldr	r0, [pc, #204]	@ (800bce4 <_printf_i+0x23c>)
 800bc18:	2778      	movs	r7, #120	@ 0x78
 800bc1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	6831      	ldr	r1, [r6, #0]
 800bc22:	061f      	lsls	r7, r3, #24
 800bc24:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc28:	d402      	bmi.n	800bc30 <_printf_i+0x188>
 800bc2a:	065f      	lsls	r7, r3, #25
 800bc2c:	bf48      	it	mi
 800bc2e:	b2ad      	uxthmi	r5, r5
 800bc30:	6031      	str	r1, [r6, #0]
 800bc32:	07d9      	lsls	r1, r3, #31
 800bc34:	bf44      	itt	mi
 800bc36:	f043 0320 	orrmi.w	r3, r3, #32
 800bc3a:	6023      	strmi	r3, [r4, #0]
 800bc3c:	b11d      	cbz	r5, 800bc46 <_printf_i+0x19e>
 800bc3e:	2310      	movs	r3, #16
 800bc40:	e7ac      	b.n	800bb9c <_printf_i+0xf4>
 800bc42:	4827      	ldr	r0, [pc, #156]	@ (800bce0 <_printf_i+0x238>)
 800bc44:	e7e9      	b.n	800bc1a <_printf_i+0x172>
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	f023 0320 	bic.w	r3, r3, #32
 800bc4c:	6023      	str	r3, [r4, #0]
 800bc4e:	e7f6      	b.n	800bc3e <_printf_i+0x196>
 800bc50:	4616      	mov	r6, r2
 800bc52:	e7bd      	b.n	800bbd0 <_printf_i+0x128>
 800bc54:	6833      	ldr	r3, [r6, #0]
 800bc56:	6825      	ldr	r5, [r4, #0]
 800bc58:	6961      	ldr	r1, [r4, #20]
 800bc5a:	1d18      	adds	r0, r3, #4
 800bc5c:	6030      	str	r0, [r6, #0]
 800bc5e:	062e      	lsls	r6, r5, #24
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	d501      	bpl.n	800bc68 <_printf_i+0x1c0>
 800bc64:	6019      	str	r1, [r3, #0]
 800bc66:	e002      	b.n	800bc6e <_printf_i+0x1c6>
 800bc68:	0668      	lsls	r0, r5, #25
 800bc6a:	d5fb      	bpl.n	800bc64 <_printf_i+0x1bc>
 800bc6c:	8019      	strh	r1, [r3, #0]
 800bc6e:	2300      	movs	r3, #0
 800bc70:	6123      	str	r3, [r4, #16]
 800bc72:	4616      	mov	r6, r2
 800bc74:	e7bc      	b.n	800bbf0 <_printf_i+0x148>
 800bc76:	6833      	ldr	r3, [r6, #0]
 800bc78:	1d1a      	adds	r2, r3, #4
 800bc7a:	6032      	str	r2, [r6, #0]
 800bc7c:	681e      	ldr	r6, [r3, #0]
 800bc7e:	6862      	ldr	r2, [r4, #4]
 800bc80:	2100      	movs	r1, #0
 800bc82:	4630      	mov	r0, r6
 800bc84:	f7f4 fab4 	bl	80001f0 <memchr>
 800bc88:	b108      	cbz	r0, 800bc8e <_printf_i+0x1e6>
 800bc8a:	1b80      	subs	r0, r0, r6
 800bc8c:	6060      	str	r0, [r4, #4]
 800bc8e:	6863      	ldr	r3, [r4, #4]
 800bc90:	6123      	str	r3, [r4, #16]
 800bc92:	2300      	movs	r3, #0
 800bc94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc98:	e7aa      	b.n	800bbf0 <_printf_i+0x148>
 800bc9a:	6923      	ldr	r3, [r4, #16]
 800bc9c:	4632      	mov	r2, r6
 800bc9e:	4649      	mov	r1, r9
 800bca0:	4640      	mov	r0, r8
 800bca2:	47d0      	blx	sl
 800bca4:	3001      	adds	r0, #1
 800bca6:	d0ad      	beq.n	800bc04 <_printf_i+0x15c>
 800bca8:	6823      	ldr	r3, [r4, #0]
 800bcaa:	079b      	lsls	r3, r3, #30
 800bcac:	d413      	bmi.n	800bcd6 <_printf_i+0x22e>
 800bcae:	68e0      	ldr	r0, [r4, #12]
 800bcb0:	9b03      	ldr	r3, [sp, #12]
 800bcb2:	4298      	cmp	r0, r3
 800bcb4:	bfb8      	it	lt
 800bcb6:	4618      	movlt	r0, r3
 800bcb8:	e7a6      	b.n	800bc08 <_printf_i+0x160>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	4632      	mov	r2, r6
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	4640      	mov	r0, r8
 800bcc2:	47d0      	blx	sl
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	d09d      	beq.n	800bc04 <_printf_i+0x15c>
 800bcc8:	3501      	adds	r5, #1
 800bcca:	68e3      	ldr	r3, [r4, #12]
 800bccc:	9903      	ldr	r1, [sp, #12]
 800bcce:	1a5b      	subs	r3, r3, r1
 800bcd0:	42ab      	cmp	r3, r5
 800bcd2:	dcf2      	bgt.n	800bcba <_printf_i+0x212>
 800bcd4:	e7eb      	b.n	800bcae <_printf_i+0x206>
 800bcd6:	2500      	movs	r5, #0
 800bcd8:	f104 0619 	add.w	r6, r4, #25
 800bcdc:	e7f5      	b.n	800bcca <_printf_i+0x222>
 800bcde:	bf00      	nop
 800bce0:	0800fc36 	.word	0x0800fc36
 800bce4:	0800fc47 	.word	0x0800fc47

0800bce8 <std>:
 800bce8:	2300      	movs	r3, #0
 800bcea:	b510      	push	{r4, lr}
 800bcec:	4604      	mov	r4, r0
 800bcee:	e9c0 3300 	strd	r3, r3, [r0]
 800bcf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcf6:	6083      	str	r3, [r0, #8]
 800bcf8:	8181      	strh	r1, [r0, #12]
 800bcfa:	6643      	str	r3, [r0, #100]	@ 0x64
 800bcfc:	81c2      	strh	r2, [r0, #14]
 800bcfe:	6183      	str	r3, [r0, #24]
 800bd00:	4619      	mov	r1, r3
 800bd02:	2208      	movs	r2, #8
 800bd04:	305c      	adds	r0, #92	@ 0x5c
 800bd06:	f000 f914 	bl	800bf32 <memset>
 800bd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd40 <std+0x58>)
 800bd0c:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd0e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd44 <std+0x5c>)
 800bd10:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd12:	4b0d      	ldr	r3, [pc, #52]	@ (800bd48 <std+0x60>)
 800bd14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd16:	4b0d      	ldr	r3, [pc, #52]	@ (800bd4c <std+0x64>)
 800bd18:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd1a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd50 <std+0x68>)
 800bd1c:	6224      	str	r4, [r4, #32]
 800bd1e:	429c      	cmp	r4, r3
 800bd20:	d006      	beq.n	800bd30 <std+0x48>
 800bd22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd26:	4294      	cmp	r4, r2
 800bd28:	d002      	beq.n	800bd30 <std+0x48>
 800bd2a:	33d0      	adds	r3, #208	@ 0xd0
 800bd2c:	429c      	cmp	r4, r3
 800bd2e:	d105      	bne.n	800bd3c <std+0x54>
 800bd30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd38:	f000 b978 	b.w	800c02c <__retarget_lock_init_recursive>
 800bd3c:	bd10      	pop	{r4, pc}
 800bd3e:	bf00      	nop
 800bd40:	0800bead 	.word	0x0800bead
 800bd44:	0800becf 	.word	0x0800becf
 800bd48:	0800bf07 	.word	0x0800bf07
 800bd4c:	0800bf2b 	.word	0x0800bf2b
 800bd50:	200021e0 	.word	0x200021e0

0800bd54 <stdio_exit_handler>:
 800bd54:	4a02      	ldr	r2, [pc, #8]	@ (800bd60 <stdio_exit_handler+0xc>)
 800bd56:	4903      	ldr	r1, [pc, #12]	@ (800bd64 <stdio_exit_handler+0x10>)
 800bd58:	4803      	ldr	r0, [pc, #12]	@ (800bd68 <stdio_exit_handler+0x14>)
 800bd5a:	f000 b869 	b.w	800be30 <_fwalk_sglue>
 800bd5e:	bf00      	nop
 800bd60:	20000178 	.word	0x20000178
 800bd64:	0800d98d 	.word	0x0800d98d
 800bd68:	20000188 	.word	0x20000188

0800bd6c <cleanup_stdio>:
 800bd6c:	6841      	ldr	r1, [r0, #4]
 800bd6e:	4b0c      	ldr	r3, [pc, #48]	@ (800bda0 <cleanup_stdio+0x34>)
 800bd70:	4299      	cmp	r1, r3
 800bd72:	b510      	push	{r4, lr}
 800bd74:	4604      	mov	r4, r0
 800bd76:	d001      	beq.n	800bd7c <cleanup_stdio+0x10>
 800bd78:	f001 fe08 	bl	800d98c <_fflush_r>
 800bd7c:	68a1      	ldr	r1, [r4, #8]
 800bd7e:	4b09      	ldr	r3, [pc, #36]	@ (800bda4 <cleanup_stdio+0x38>)
 800bd80:	4299      	cmp	r1, r3
 800bd82:	d002      	beq.n	800bd8a <cleanup_stdio+0x1e>
 800bd84:	4620      	mov	r0, r4
 800bd86:	f001 fe01 	bl	800d98c <_fflush_r>
 800bd8a:	68e1      	ldr	r1, [r4, #12]
 800bd8c:	4b06      	ldr	r3, [pc, #24]	@ (800bda8 <cleanup_stdio+0x3c>)
 800bd8e:	4299      	cmp	r1, r3
 800bd90:	d004      	beq.n	800bd9c <cleanup_stdio+0x30>
 800bd92:	4620      	mov	r0, r4
 800bd94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd98:	f001 bdf8 	b.w	800d98c <_fflush_r>
 800bd9c:	bd10      	pop	{r4, pc}
 800bd9e:	bf00      	nop
 800bda0:	200021e0 	.word	0x200021e0
 800bda4:	20002248 	.word	0x20002248
 800bda8:	200022b0 	.word	0x200022b0

0800bdac <global_stdio_init.part.0>:
 800bdac:	b510      	push	{r4, lr}
 800bdae:	4b0b      	ldr	r3, [pc, #44]	@ (800bddc <global_stdio_init.part.0+0x30>)
 800bdb0:	4c0b      	ldr	r4, [pc, #44]	@ (800bde0 <global_stdio_init.part.0+0x34>)
 800bdb2:	4a0c      	ldr	r2, [pc, #48]	@ (800bde4 <global_stdio_init.part.0+0x38>)
 800bdb4:	601a      	str	r2, [r3, #0]
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	2200      	movs	r2, #0
 800bdba:	2104      	movs	r1, #4
 800bdbc:	f7ff ff94 	bl	800bce8 <std>
 800bdc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	2109      	movs	r1, #9
 800bdc8:	f7ff ff8e 	bl	800bce8 <std>
 800bdcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bdd0:	2202      	movs	r2, #2
 800bdd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdd6:	2112      	movs	r1, #18
 800bdd8:	f7ff bf86 	b.w	800bce8 <std>
 800bddc:	20002318 	.word	0x20002318
 800bde0:	200021e0 	.word	0x200021e0
 800bde4:	0800bd55 	.word	0x0800bd55

0800bde8 <__sfp_lock_acquire>:
 800bde8:	4801      	ldr	r0, [pc, #4]	@ (800bdf0 <__sfp_lock_acquire+0x8>)
 800bdea:	f000 b920 	b.w	800c02e <__retarget_lock_acquire_recursive>
 800bdee:	bf00      	nop
 800bdf0:	20002321 	.word	0x20002321

0800bdf4 <__sfp_lock_release>:
 800bdf4:	4801      	ldr	r0, [pc, #4]	@ (800bdfc <__sfp_lock_release+0x8>)
 800bdf6:	f000 b91b 	b.w	800c030 <__retarget_lock_release_recursive>
 800bdfa:	bf00      	nop
 800bdfc:	20002321 	.word	0x20002321

0800be00 <__sinit>:
 800be00:	b510      	push	{r4, lr}
 800be02:	4604      	mov	r4, r0
 800be04:	f7ff fff0 	bl	800bde8 <__sfp_lock_acquire>
 800be08:	6a23      	ldr	r3, [r4, #32]
 800be0a:	b11b      	cbz	r3, 800be14 <__sinit+0x14>
 800be0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be10:	f7ff bff0 	b.w	800bdf4 <__sfp_lock_release>
 800be14:	4b04      	ldr	r3, [pc, #16]	@ (800be28 <__sinit+0x28>)
 800be16:	6223      	str	r3, [r4, #32]
 800be18:	4b04      	ldr	r3, [pc, #16]	@ (800be2c <__sinit+0x2c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1f5      	bne.n	800be0c <__sinit+0xc>
 800be20:	f7ff ffc4 	bl	800bdac <global_stdio_init.part.0>
 800be24:	e7f2      	b.n	800be0c <__sinit+0xc>
 800be26:	bf00      	nop
 800be28:	0800bd6d 	.word	0x0800bd6d
 800be2c:	20002318 	.word	0x20002318

0800be30 <_fwalk_sglue>:
 800be30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be34:	4607      	mov	r7, r0
 800be36:	4688      	mov	r8, r1
 800be38:	4614      	mov	r4, r2
 800be3a:	2600      	movs	r6, #0
 800be3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be40:	f1b9 0901 	subs.w	r9, r9, #1
 800be44:	d505      	bpl.n	800be52 <_fwalk_sglue+0x22>
 800be46:	6824      	ldr	r4, [r4, #0]
 800be48:	2c00      	cmp	r4, #0
 800be4a:	d1f7      	bne.n	800be3c <_fwalk_sglue+0xc>
 800be4c:	4630      	mov	r0, r6
 800be4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be52:	89ab      	ldrh	r3, [r5, #12]
 800be54:	2b01      	cmp	r3, #1
 800be56:	d907      	bls.n	800be68 <_fwalk_sglue+0x38>
 800be58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be5c:	3301      	adds	r3, #1
 800be5e:	d003      	beq.n	800be68 <_fwalk_sglue+0x38>
 800be60:	4629      	mov	r1, r5
 800be62:	4638      	mov	r0, r7
 800be64:	47c0      	blx	r8
 800be66:	4306      	orrs	r6, r0
 800be68:	3568      	adds	r5, #104	@ 0x68
 800be6a:	e7e9      	b.n	800be40 <_fwalk_sglue+0x10>

0800be6c <siprintf>:
 800be6c:	b40e      	push	{r1, r2, r3}
 800be6e:	b500      	push	{lr}
 800be70:	b09c      	sub	sp, #112	@ 0x70
 800be72:	ab1d      	add	r3, sp, #116	@ 0x74
 800be74:	9002      	str	r0, [sp, #8]
 800be76:	9006      	str	r0, [sp, #24]
 800be78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800be7c:	4809      	ldr	r0, [pc, #36]	@ (800bea4 <siprintf+0x38>)
 800be7e:	9107      	str	r1, [sp, #28]
 800be80:	9104      	str	r1, [sp, #16]
 800be82:	4909      	ldr	r1, [pc, #36]	@ (800bea8 <siprintf+0x3c>)
 800be84:	f853 2b04 	ldr.w	r2, [r3], #4
 800be88:	9105      	str	r1, [sp, #20]
 800be8a:	6800      	ldr	r0, [r0, #0]
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	a902      	add	r1, sp, #8
 800be90:	f001 fbfc 	bl	800d68c <_svfiprintf_r>
 800be94:	9b02      	ldr	r3, [sp, #8]
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
 800be9a:	b01c      	add	sp, #112	@ 0x70
 800be9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bea0:	b003      	add	sp, #12
 800bea2:	4770      	bx	lr
 800bea4:	20000184 	.word	0x20000184
 800bea8:	ffff0208 	.word	0xffff0208

0800beac <__sread>:
 800beac:	b510      	push	{r4, lr}
 800beae:	460c      	mov	r4, r1
 800beb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb4:	f000 f86c 	bl	800bf90 <_read_r>
 800beb8:	2800      	cmp	r0, #0
 800beba:	bfab      	itete	ge
 800bebc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bebe:	89a3      	ldrhlt	r3, [r4, #12]
 800bec0:	181b      	addge	r3, r3, r0
 800bec2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bec6:	bfac      	ite	ge
 800bec8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800beca:	81a3      	strhlt	r3, [r4, #12]
 800becc:	bd10      	pop	{r4, pc}

0800bece <__swrite>:
 800bece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed2:	461f      	mov	r7, r3
 800bed4:	898b      	ldrh	r3, [r1, #12]
 800bed6:	05db      	lsls	r3, r3, #23
 800bed8:	4605      	mov	r5, r0
 800beda:	460c      	mov	r4, r1
 800bedc:	4616      	mov	r6, r2
 800bede:	d505      	bpl.n	800beec <__swrite+0x1e>
 800bee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee4:	2302      	movs	r3, #2
 800bee6:	2200      	movs	r2, #0
 800bee8:	f000 f840 	bl	800bf6c <_lseek_r>
 800beec:	89a3      	ldrh	r3, [r4, #12]
 800beee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bef2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bef6:	81a3      	strh	r3, [r4, #12]
 800bef8:	4632      	mov	r2, r6
 800befa:	463b      	mov	r3, r7
 800befc:	4628      	mov	r0, r5
 800befe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf02:	f000 b857 	b.w	800bfb4 <_write_r>

0800bf06 <__sseek>:
 800bf06:	b510      	push	{r4, lr}
 800bf08:	460c      	mov	r4, r1
 800bf0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf0e:	f000 f82d 	bl	800bf6c <_lseek_r>
 800bf12:	1c43      	adds	r3, r0, #1
 800bf14:	89a3      	ldrh	r3, [r4, #12]
 800bf16:	bf15      	itete	ne
 800bf18:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf22:	81a3      	strheq	r3, [r4, #12]
 800bf24:	bf18      	it	ne
 800bf26:	81a3      	strhne	r3, [r4, #12]
 800bf28:	bd10      	pop	{r4, pc}

0800bf2a <__sclose>:
 800bf2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf2e:	f000 b80d 	b.w	800bf4c <_close_r>

0800bf32 <memset>:
 800bf32:	4402      	add	r2, r0
 800bf34:	4603      	mov	r3, r0
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d100      	bne.n	800bf3c <memset+0xa>
 800bf3a:	4770      	bx	lr
 800bf3c:	f803 1b01 	strb.w	r1, [r3], #1
 800bf40:	e7f9      	b.n	800bf36 <memset+0x4>
	...

0800bf44 <_localeconv_r>:
 800bf44:	4800      	ldr	r0, [pc, #0]	@ (800bf48 <_localeconv_r+0x4>)
 800bf46:	4770      	bx	lr
 800bf48:	200002c4 	.word	0x200002c4

0800bf4c <_close_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4d06      	ldr	r5, [pc, #24]	@ (800bf68 <_close_r+0x1c>)
 800bf50:	2300      	movs	r3, #0
 800bf52:	4604      	mov	r4, r0
 800bf54:	4608      	mov	r0, r1
 800bf56:	602b      	str	r3, [r5, #0]
 800bf58:	f7f5 f9d2 	bl	8001300 <_close>
 800bf5c:	1c43      	adds	r3, r0, #1
 800bf5e:	d102      	bne.n	800bf66 <_close_r+0x1a>
 800bf60:	682b      	ldr	r3, [r5, #0]
 800bf62:	b103      	cbz	r3, 800bf66 <_close_r+0x1a>
 800bf64:	6023      	str	r3, [r4, #0]
 800bf66:	bd38      	pop	{r3, r4, r5, pc}
 800bf68:	2000231c 	.word	0x2000231c

0800bf6c <_lseek_r>:
 800bf6c:	b538      	push	{r3, r4, r5, lr}
 800bf6e:	4d07      	ldr	r5, [pc, #28]	@ (800bf8c <_lseek_r+0x20>)
 800bf70:	4604      	mov	r4, r0
 800bf72:	4608      	mov	r0, r1
 800bf74:	4611      	mov	r1, r2
 800bf76:	2200      	movs	r2, #0
 800bf78:	602a      	str	r2, [r5, #0]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	f7f5 f9e7 	bl	800134e <_lseek>
 800bf80:	1c43      	adds	r3, r0, #1
 800bf82:	d102      	bne.n	800bf8a <_lseek_r+0x1e>
 800bf84:	682b      	ldr	r3, [r5, #0]
 800bf86:	b103      	cbz	r3, 800bf8a <_lseek_r+0x1e>
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	bd38      	pop	{r3, r4, r5, pc}
 800bf8c:	2000231c 	.word	0x2000231c

0800bf90 <_read_r>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	4d07      	ldr	r5, [pc, #28]	@ (800bfb0 <_read_r+0x20>)
 800bf94:	4604      	mov	r4, r0
 800bf96:	4608      	mov	r0, r1
 800bf98:	4611      	mov	r1, r2
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	602a      	str	r2, [r5, #0]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	f7f5 f975 	bl	800128e <_read>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d102      	bne.n	800bfae <_read_r+0x1e>
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	b103      	cbz	r3, 800bfae <_read_r+0x1e>
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	2000231c 	.word	0x2000231c

0800bfb4 <_write_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	4d07      	ldr	r5, [pc, #28]	@ (800bfd4 <_write_r+0x20>)
 800bfb8:	4604      	mov	r4, r0
 800bfba:	4608      	mov	r0, r1
 800bfbc:	4611      	mov	r1, r2
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	602a      	str	r2, [r5, #0]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	f7f5 f980 	bl	80012c8 <_write>
 800bfc8:	1c43      	adds	r3, r0, #1
 800bfca:	d102      	bne.n	800bfd2 <_write_r+0x1e>
 800bfcc:	682b      	ldr	r3, [r5, #0]
 800bfce:	b103      	cbz	r3, 800bfd2 <_write_r+0x1e>
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	bd38      	pop	{r3, r4, r5, pc}
 800bfd4:	2000231c 	.word	0x2000231c

0800bfd8 <__errno>:
 800bfd8:	4b01      	ldr	r3, [pc, #4]	@ (800bfe0 <__errno+0x8>)
 800bfda:	6818      	ldr	r0, [r3, #0]
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	20000184 	.word	0x20000184

0800bfe4 <__libc_init_array>:
 800bfe4:	b570      	push	{r4, r5, r6, lr}
 800bfe6:	4d0d      	ldr	r5, [pc, #52]	@ (800c01c <__libc_init_array+0x38>)
 800bfe8:	4c0d      	ldr	r4, [pc, #52]	@ (800c020 <__libc_init_array+0x3c>)
 800bfea:	1b64      	subs	r4, r4, r5
 800bfec:	10a4      	asrs	r4, r4, #2
 800bfee:	2600      	movs	r6, #0
 800bff0:	42a6      	cmp	r6, r4
 800bff2:	d109      	bne.n	800c008 <__libc_init_array+0x24>
 800bff4:	4d0b      	ldr	r5, [pc, #44]	@ (800c024 <__libc_init_array+0x40>)
 800bff6:	4c0c      	ldr	r4, [pc, #48]	@ (800c028 <__libc_init_array+0x44>)
 800bff8:	f002 f866 	bl	800e0c8 <_init>
 800bffc:	1b64      	subs	r4, r4, r5
 800bffe:	10a4      	asrs	r4, r4, #2
 800c000:	2600      	movs	r6, #0
 800c002:	42a6      	cmp	r6, r4
 800c004:	d105      	bne.n	800c012 <__libc_init_array+0x2e>
 800c006:	bd70      	pop	{r4, r5, r6, pc}
 800c008:	f855 3b04 	ldr.w	r3, [r5], #4
 800c00c:	4798      	blx	r3
 800c00e:	3601      	adds	r6, #1
 800c010:	e7ee      	b.n	800bff0 <__libc_init_array+0xc>
 800c012:	f855 3b04 	ldr.w	r3, [r5], #4
 800c016:	4798      	blx	r3
 800c018:	3601      	adds	r6, #1
 800c01a:	e7f2      	b.n	800c002 <__libc_init_array+0x1e>
 800c01c:	0800ffa0 	.word	0x0800ffa0
 800c020:	0800ffa0 	.word	0x0800ffa0
 800c024:	0800ffa0 	.word	0x0800ffa0
 800c028:	0800ffa4 	.word	0x0800ffa4

0800c02c <__retarget_lock_init_recursive>:
 800c02c:	4770      	bx	lr

0800c02e <__retarget_lock_acquire_recursive>:
 800c02e:	4770      	bx	lr

0800c030 <__retarget_lock_release_recursive>:
 800c030:	4770      	bx	lr

0800c032 <quorem>:
 800c032:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c036:	6903      	ldr	r3, [r0, #16]
 800c038:	690c      	ldr	r4, [r1, #16]
 800c03a:	42a3      	cmp	r3, r4
 800c03c:	4607      	mov	r7, r0
 800c03e:	db7e      	blt.n	800c13e <quorem+0x10c>
 800c040:	3c01      	subs	r4, #1
 800c042:	f101 0814 	add.w	r8, r1, #20
 800c046:	00a3      	lsls	r3, r4, #2
 800c048:	f100 0514 	add.w	r5, r0, #20
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c052:	9301      	str	r3, [sp, #4]
 800c054:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c058:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c05c:	3301      	adds	r3, #1
 800c05e:	429a      	cmp	r2, r3
 800c060:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c064:	fbb2 f6f3 	udiv	r6, r2, r3
 800c068:	d32e      	bcc.n	800c0c8 <quorem+0x96>
 800c06a:	f04f 0a00 	mov.w	sl, #0
 800c06e:	46c4      	mov	ip, r8
 800c070:	46ae      	mov	lr, r5
 800c072:	46d3      	mov	fp, sl
 800c074:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c078:	b298      	uxth	r0, r3
 800c07a:	fb06 a000 	mla	r0, r6, r0, sl
 800c07e:	0c02      	lsrs	r2, r0, #16
 800c080:	0c1b      	lsrs	r3, r3, #16
 800c082:	fb06 2303 	mla	r3, r6, r3, r2
 800c086:	f8de 2000 	ldr.w	r2, [lr]
 800c08a:	b280      	uxth	r0, r0
 800c08c:	b292      	uxth	r2, r2
 800c08e:	1a12      	subs	r2, r2, r0
 800c090:	445a      	add	r2, fp
 800c092:	f8de 0000 	ldr.w	r0, [lr]
 800c096:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c0a0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c0a4:	b292      	uxth	r2, r2
 800c0a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c0aa:	45e1      	cmp	r9, ip
 800c0ac:	f84e 2b04 	str.w	r2, [lr], #4
 800c0b0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c0b4:	d2de      	bcs.n	800c074 <quorem+0x42>
 800c0b6:	9b00      	ldr	r3, [sp, #0]
 800c0b8:	58eb      	ldr	r3, [r5, r3]
 800c0ba:	b92b      	cbnz	r3, 800c0c8 <quorem+0x96>
 800c0bc:	9b01      	ldr	r3, [sp, #4]
 800c0be:	3b04      	subs	r3, #4
 800c0c0:	429d      	cmp	r5, r3
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	d32f      	bcc.n	800c126 <quorem+0xf4>
 800c0c6:	613c      	str	r4, [r7, #16]
 800c0c8:	4638      	mov	r0, r7
 800c0ca:	f001 f97b 	bl	800d3c4 <__mcmp>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	db25      	blt.n	800c11e <quorem+0xec>
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0da:	f8d1 c000 	ldr.w	ip, [r1]
 800c0de:	fa1f fe82 	uxth.w	lr, r2
 800c0e2:	fa1f f38c 	uxth.w	r3, ip
 800c0e6:	eba3 030e 	sub.w	r3, r3, lr
 800c0ea:	4403      	add	r3, r0
 800c0ec:	0c12      	lsrs	r2, r2, #16
 800c0ee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c0f2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0fc:	45c1      	cmp	r9, r8
 800c0fe:	f841 3b04 	str.w	r3, [r1], #4
 800c102:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c106:	d2e6      	bcs.n	800c0d6 <quorem+0xa4>
 800c108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c10c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c110:	b922      	cbnz	r2, 800c11c <quorem+0xea>
 800c112:	3b04      	subs	r3, #4
 800c114:	429d      	cmp	r5, r3
 800c116:	461a      	mov	r2, r3
 800c118:	d30b      	bcc.n	800c132 <quorem+0x100>
 800c11a:	613c      	str	r4, [r7, #16]
 800c11c:	3601      	adds	r6, #1
 800c11e:	4630      	mov	r0, r6
 800c120:	b003      	add	sp, #12
 800c122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c126:	6812      	ldr	r2, [r2, #0]
 800c128:	3b04      	subs	r3, #4
 800c12a:	2a00      	cmp	r2, #0
 800c12c:	d1cb      	bne.n	800c0c6 <quorem+0x94>
 800c12e:	3c01      	subs	r4, #1
 800c130:	e7c6      	b.n	800c0c0 <quorem+0x8e>
 800c132:	6812      	ldr	r2, [r2, #0]
 800c134:	3b04      	subs	r3, #4
 800c136:	2a00      	cmp	r2, #0
 800c138:	d1ef      	bne.n	800c11a <quorem+0xe8>
 800c13a:	3c01      	subs	r4, #1
 800c13c:	e7ea      	b.n	800c114 <quorem+0xe2>
 800c13e:	2000      	movs	r0, #0
 800c140:	e7ee      	b.n	800c120 <quorem+0xee>
 800c142:	0000      	movs	r0, r0
 800c144:	0000      	movs	r0, r0
	...

0800c148 <_dtoa_r>:
 800c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14c:	69c7      	ldr	r7, [r0, #28]
 800c14e:	b099      	sub	sp, #100	@ 0x64
 800c150:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c154:	ec55 4b10 	vmov	r4, r5, d0
 800c158:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c15a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c15c:	4683      	mov	fp, r0
 800c15e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c160:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c162:	b97f      	cbnz	r7, 800c184 <_dtoa_r+0x3c>
 800c164:	2010      	movs	r0, #16
 800c166:	f000 fdfd 	bl	800cd64 <malloc>
 800c16a:	4602      	mov	r2, r0
 800c16c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c170:	b920      	cbnz	r0, 800c17c <_dtoa_r+0x34>
 800c172:	4ba7      	ldr	r3, [pc, #668]	@ (800c410 <_dtoa_r+0x2c8>)
 800c174:	21ef      	movs	r1, #239	@ 0xef
 800c176:	48a7      	ldr	r0, [pc, #668]	@ (800c414 <_dtoa_r+0x2cc>)
 800c178:	f001 fc68 	bl	800da4c <__assert_func>
 800c17c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c180:	6007      	str	r7, [r0, #0]
 800c182:	60c7      	str	r7, [r0, #12]
 800c184:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c188:	6819      	ldr	r1, [r3, #0]
 800c18a:	b159      	cbz	r1, 800c1a4 <_dtoa_r+0x5c>
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	604a      	str	r2, [r1, #4]
 800c190:	2301      	movs	r3, #1
 800c192:	4093      	lsls	r3, r2
 800c194:	608b      	str	r3, [r1, #8]
 800c196:	4658      	mov	r0, fp
 800c198:	f000 feda 	bl	800cf50 <_Bfree>
 800c19c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	1e2b      	subs	r3, r5, #0
 800c1a6:	bfb9      	ittee	lt
 800c1a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c1ac:	9303      	strlt	r3, [sp, #12]
 800c1ae:	2300      	movge	r3, #0
 800c1b0:	6033      	strge	r3, [r6, #0]
 800c1b2:	9f03      	ldr	r7, [sp, #12]
 800c1b4:	4b98      	ldr	r3, [pc, #608]	@ (800c418 <_dtoa_r+0x2d0>)
 800c1b6:	bfbc      	itt	lt
 800c1b8:	2201      	movlt	r2, #1
 800c1ba:	6032      	strlt	r2, [r6, #0]
 800c1bc:	43bb      	bics	r3, r7
 800c1be:	d112      	bne.n	800c1e6 <_dtoa_r+0x9e>
 800c1c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c1c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c1c6:	6013      	str	r3, [r2, #0]
 800c1c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1cc:	4323      	orrs	r3, r4
 800c1ce:	f000 854d 	beq.w	800cc6c <_dtoa_r+0xb24>
 800c1d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c1d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c42c <_dtoa_r+0x2e4>
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	f000 854f 	beq.w	800cc7c <_dtoa_r+0xb34>
 800c1de:	f10a 0303 	add.w	r3, sl, #3
 800c1e2:	f000 bd49 	b.w	800cc78 <_dtoa_r+0xb30>
 800c1e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	ec51 0b17 	vmov	r0, r1, d7
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c1f6:	f7f4 fc77 	bl	8000ae8 <__aeabi_dcmpeq>
 800c1fa:	4680      	mov	r8, r0
 800c1fc:	b158      	cbz	r0, 800c216 <_dtoa_r+0xce>
 800c1fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c200:	2301      	movs	r3, #1
 800c202:	6013      	str	r3, [r2, #0]
 800c204:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c206:	b113      	cbz	r3, 800c20e <_dtoa_r+0xc6>
 800c208:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c20a:	4b84      	ldr	r3, [pc, #528]	@ (800c41c <_dtoa_r+0x2d4>)
 800c20c:	6013      	str	r3, [r2, #0]
 800c20e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c430 <_dtoa_r+0x2e8>
 800c212:	f000 bd33 	b.w	800cc7c <_dtoa_r+0xb34>
 800c216:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c21a:	aa16      	add	r2, sp, #88	@ 0x58
 800c21c:	a917      	add	r1, sp, #92	@ 0x5c
 800c21e:	4658      	mov	r0, fp
 800c220:	f001 f980 	bl	800d524 <__d2b>
 800c224:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c228:	4681      	mov	r9, r0
 800c22a:	2e00      	cmp	r6, #0
 800c22c:	d077      	beq.n	800c31e <_dtoa_r+0x1d6>
 800c22e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c230:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c23c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c240:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c244:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c248:	4619      	mov	r1, r3
 800c24a:	2200      	movs	r2, #0
 800c24c:	4b74      	ldr	r3, [pc, #464]	@ (800c420 <_dtoa_r+0x2d8>)
 800c24e:	f7f4 f82b 	bl	80002a8 <__aeabi_dsub>
 800c252:	a369      	add	r3, pc, #420	@ (adr r3, 800c3f8 <_dtoa_r+0x2b0>)
 800c254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c258:	f7f4 f9de 	bl	8000618 <__aeabi_dmul>
 800c25c:	a368      	add	r3, pc, #416	@ (adr r3, 800c400 <_dtoa_r+0x2b8>)
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	f7f4 f823 	bl	80002ac <__adddf3>
 800c266:	4604      	mov	r4, r0
 800c268:	4630      	mov	r0, r6
 800c26a:	460d      	mov	r5, r1
 800c26c:	f7f4 f96a 	bl	8000544 <__aeabi_i2d>
 800c270:	a365      	add	r3, pc, #404	@ (adr r3, 800c408 <_dtoa_r+0x2c0>)
 800c272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c276:	f7f4 f9cf 	bl	8000618 <__aeabi_dmul>
 800c27a:	4602      	mov	r2, r0
 800c27c:	460b      	mov	r3, r1
 800c27e:	4620      	mov	r0, r4
 800c280:	4629      	mov	r1, r5
 800c282:	f7f4 f813 	bl	80002ac <__adddf3>
 800c286:	4604      	mov	r4, r0
 800c288:	460d      	mov	r5, r1
 800c28a:	f7f4 fc75 	bl	8000b78 <__aeabi_d2iz>
 800c28e:	2200      	movs	r2, #0
 800c290:	4607      	mov	r7, r0
 800c292:	2300      	movs	r3, #0
 800c294:	4620      	mov	r0, r4
 800c296:	4629      	mov	r1, r5
 800c298:	f7f4 fc30 	bl	8000afc <__aeabi_dcmplt>
 800c29c:	b140      	cbz	r0, 800c2b0 <_dtoa_r+0x168>
 800c29e:	4638      	mov	r0, r7
 800c2a0:	f7f4 f950 	bl	8000544 <__aeabi_i2d>
 800c2a4:	4622      	mov	r2, r4
 800c2a6:	462b      	mov	r3, r5
 800c2a8:	f7f4 fc1e 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2ac:	b900      	cbnz	r0, 800c2b0 <_dtoa_r+0x168>
 800c2ae:	3f01      	subs	r7, #1
 800c2b0:	2f16      	cmp	r7, #22
 800c2b2:	d851      	bhi.n	800c358 <_dtoa_r+0x210>
 800c2b4:	4b5b      	ldr	r3, [pc, #364]	@ (800c424 <_dtoa_r+0x2dc>)
 800c2b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2c2:	f7f4 fc1b 	bl	8000afc <__aeabi_dcmplt>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	d048      	beq.n	800c35c <_dtoa_r+0x214>
 800c2ca:	3f01      	subs	r7, #1
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	9312      	str	r3, [sp, #72]	@ 0x48
 800c2d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c2d2:	1b9b      	subs	r3, r3, r6
 800c2d4:	1e5a      	subs	r2, r3, #1
 800c2d6:	bf44      	itt	mi
 800c2d8:	f1c3 0801 	rsbmi	r8, r3, #1
 800c2dc:	2300      	movmi	r3, #0
 800c2de:	9208      	str	r2, [sp, #32]
 800c2e0:	bf54      	ite	pl
 800c2e2:	f04f 0800 	movpl.w	r8, #0
 800c2e6:	9308      	strmi	r3, [sp, #32]
 800c2e8:	2f00      	cmp	r7, #0
 800c2ea:	db39      	blt.n	800c360 <_dtoa_r+0x218>
 800c2ec:	9b08      	ldr	r3, [sp, #32]
 800c2ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c2f0:	443b      	add	r3, r7
 800c2f2:	9308      	str	r3, [sp, #32]
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2fa:	2b09      	cmp	r3, #9
 800c2fc:	d864      	bhi.n	800c3c8 <_dtoa_r+0x280>
 800c2fe:	2b05      	cmp	r3, #5
 800c300:	bfc4      	itt	gt
 800c302:	3b04      	subgt	r3, #4
 800c304:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c308:	f1a3 0302 	sub.w	r3, r3, #2
 800c30c:	bfcc      	ite	gt
 800c30e:	2400      	movgt	r4, #0
 800c310:	2401      	movle	r4, #1
 800c312:	2b03      	cmp	r3, #3
 800c314:	d863      	bhi.n	800c3de <_dtoa_r+0x296>
 800c316:	e8df f003 	tbb	[pc, r3]
 800c31a:	372a      	.short	0x372a
 800c31c:	5535      	.short	0x5535
 800c31e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c322:	441e      	add	r6, r3
 800c324:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c328:	2b20      	cmp	r3, #32
 800c32a:	bfc1      	itttt	gt
 800c32c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c330:	409f      	lslgt	r7, r3
 800c332:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c336:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c33a:	bfd6      	itet	le
 800c33c:	f1c3 0320 	rsble	r3, r3, #32
 800c340:	ea47 0003 	orrgt.w	r0, r7, r3
 800c344:	fa04 f003 	lslle.w	r0, r4, r3
 800c348:	f7f4 f8ec 	bl	8000524 <__aeabi_ui2d>
 800c34c:	2201      	movs	r2, #1
 800c34e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c352:	3e01      	subs	r6, #1
 800c354:	9214      	str	r2, [sp, #80]	@ 0x50
 800c356:	e777      	b.n	800c248 <_dtoa_r+0x100>
 800c358:	2301      	movs	r3, #1
 800c35a:	e7b8      	b.n	800c2ce <_dtoa_r+0x186>
 800c35c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c35e:	e7b7      	b.n	800c2d0 <_dtoa_r+0x188>
 800c360:	427b      	negs	r3, r7
 800c362:	930a      	str	r3, [sp, #40]	@ 0x28
 800c364:	2300      	movs	r3, #0
 800c366:	eba8 0807 	sub.w	r8, r8, r7
 800c36a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c36c:	e7c4      	b.n	800c2f8 <_dtoa_r+0x1b0>
 800c36e:	2300      	movs	r3, #0
 800c370:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c372:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c374:	2b00      	cmp	r3, #0
 800c376:	dc35      	bgt.n	800c3e4 <_dtoa_r+0x29c>
 800c378:	2301      	movs	r3, #1
 800c37a:	9300      	str	r3, [sp, #0]
 800c37c:	9307      	str	r3, [sp, #28]
 800c37e:	461a      	mov	r2, r3
 800c380:	920e      	str	r2, [sp, #56]	@ 0x38
 800c382:	e00b      	b.n	800c39c <_dtoa_r+0x254>
 800c384:	2301      	movs	r3, #1
 800c386:	e7f3      	b.n	800c370 <_dtoa_r+0x228>
 800c388:	2300      	movs	r3, #0
 800c38a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c38c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c38e:	18fb      	adds	r3, r7, r3
 800c390:	9300      	str	r3, [sp, #0]
 800c392:	3301      	adds	r3, #1
 800c394:	2b01      	cmp	r3, #1
 800c396:	9307      	str	r3, [sp, #28]
 800c398:	bfb8      	it	lt
 800c39a:	2301      	movlt	r3, #1
 800c39c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	2204      	movs	r2, #4
 800c3a4:	f102 0514 	add.w	r5, r2, #20
 800c3a8:	429d      	cmp	r5, r3
 800c3aa:	d91f      	bls.n	800c3ec <_dtoa_r+0x2a4>
 800c3ac:	6041      	str	r1, [r0, #4]
 800c3ae:	4658      	mov	r0, fp
 800c3b0:	f000 fd8e 	bl	800ced0 <_Balloc>
 800c3b4:	4682      	mov	sl, r0
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d13c      	bne.n	800c434 <_dtoa_r+0x2ec>
 800c3ba:	4b1b      	ldr	r3, [pc, #108]	@ (800c428 <_dtoa_r+0x2e0>)
 800c3bc:	4602      	mov	r2, r0
 800c3be:	f240 11af 	movw	r1, #431	@ 0x1af
 800c3c2:	e6d8      	b.n	800c176 <_dtoa_r+0x2e>
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e7e0      	b.n	800c38a <_dtoa_r+0x242>
 800c3c8:	2401      	movs	r4, #1
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	9307      	str	r3, [sp, #28]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	2312      	movs	r3, #18
 800c3dc:	e7d0      	b.n	800c380 <_dtoa_r+0x238>
 800c3de:	2301      	movs	r3, #1
 800c3e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3e2:	e7f5      	b.n	800c3d0 <_dtoa_r+0x288>
 800c3e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	9307      	str	r3, [sp, #28]
 800c3ea:	e7d7      	b.n	800c39c <_dtoa_r+0x254>
 800c3ec:	3101      	adds	r1, #1
 800c3ee:	0052      	lsls	r2, r2, #1
 800c3f0:	e7d8      	b.n	800c3a4 <_dtoa_r+0x25c>
 800c3f2:	bf00      	nop
 800c3f4:	f3af 8000 	nop.w
 800c3f8:	636f4361 	.word	0x636f4361
 800c3fc:	3fd287a7 	.word	0x3fd287a7
 800c400:	8b60c8b3 	.word	0x8b60c8b3
 800c404:	3fc68a28 	.word	0x3fc68a28
 800c408:	509f79fb 	.word	0x509f79fb
 800c40c:	3fd34413 	.word	0x3fd34413
 800c410:	0800fc65 	.word	0x0800fc65
 800c414:	0800fc7c 	.word	0x0800fc7c
 800c418:	7ff00000 	.word	0x7ff00000
 800c41c:	0800fc35 	.word	0x0800fc35
 800c420:	3ff80000 	.word	0x3ff80000
 800c424:	0800fd78 	.word	0x0800fd78
 800c428:	0800fcd4 	.word	0x0800fcd4
 800c42c:	0800fc61 	.word	0x0800fc61
 800c430:	0800fc34 	.word	0x0800fc34
 800c434:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c438:	6018      	str	r0, [r3, #0]
 800c43a:	9b07      	ldr	r3, [sp, #28]
 800c43c:	2b0e      	cmp	r3, #14
 800c43e:	f200 80a4 	bhi.w	800c58a <_dtoa_r+0x442>
 800c442:	2c00      	cmp	r4, #0
 800c444:	f000 80a1 	beq.w	800c58a <_dtoa_r+0x442>
 800c448:	2f00      	cmp	r7, #0
 800c44a:	dd33      	ble.n	800c4b4 <_dtoa_r+0x36c>
 800c44c:	4bad      	ldr	r3, [pc, #692]	@ (800c704 <_dtoa_r+0x5bc>)
 800c44e:	f007 020f 	and.w	r2, r7, #15
 800c452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c456:	ed93 7b00 	vldr	d7, [r3]
 800c45a:	05f8      	lsls	r0, r7, #23
 800c45c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c460:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c464:	d516      	bpl.n	800c494 <_dtoa_r+0x34c>
 800c466:	4ba8      	ldr	r3, [pc, #672]	@ (800c708 <_dtoa_r+0x5c0>)
 800c468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c46c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c470:	f7f4 f9fc 	bl	800086c <__aeabi_ddiv>
 800c474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c478:	f004 040f 	and.w	r4, r4, #15
 800c47c:	2603      	movs	r6, #3
 800c47e:	4da2      	ldr	r5, [pc, #648]	@ (800c708 <_dtoa_r+0x5c0>)
 800c480:	b954      	cbnz	r4, 800c498 <_dtoa_r+0x350>
 800c482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c48a:	f7f4 f9ef 	bl	800086c <__aeabi_ddiv>
 800c48e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c492:	e028      	b.n	800c4e6 <_dtoa_r+0x39e>
 800c494:	2602      	movs	r6, #2
 800c496:	e7f2      	b.n	800c47e <_dtoa_r+0x336>
 800c498:	07e1      	lsls	r1, r4, #31
 800c49a:	d508      	bpl.n	800c4ae <_dtoa_r+0x366>
 800c49c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c4a4:	f7f4 f8b8 	bl	8000618 <__aeabi_dmul>
 800c4a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4ac:	3601      	adds	r6, #1
 800c4ae:	1064      	asrs	r4, r4, #1
 800c4b0:	3508      	adds	r5, #8
 800c4b2:	e7e5      	b.n	800c480 <_dtoa_r+0x338>
 800c4b4:	f000 80d2 	beq.w	800c65c <_dtoa_r+0x514>
 800c4b8:	427c      	negs	r4, r7
 800c4ba:	4b92      	ldr	r3, [pc, #584]	@ (800c704 <_dtoa_r+0x5bc>)
 800c4bc:	4d92      	ldr	r5, [pc, #584]	@ (800c708 <_dtoa_r+0x5c0>)
 800c4be:	f004 020f 	and.w	r2, r4, #15
 800c4c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4ce:	f7f4 f8a3 	bl	8000618 <__aeabi_dmul>
 800c4d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4d6:	1124      	asrs	r4, r4, #4
 800c4d8:	2300      	movs	r3, #0
 800c4da:	2602      	movs	r6, #2
 800c4dc:	2c00      	cmp	r4, #0
 800c4de:	f040 80b2 	bne.w	800c646 <_dtoa_r+0x4fe>
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1d3      	bne.n	800c48e <_dtoa_r+0x346>
 800c4e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c4e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 80b7 	beq.w	800c660 <_dtoa_r+0x518>
 800c4f2:	4b86      	ldr	r3, [pc, #536]	@ (800c70c <_dtoa_r+0x5c4>)
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	f7f4 faff 	bl	8000afc <__aeabi_dcmplt>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	f000 80ae 	beq.w	800c660 <_dtoa_r+0x518>
 800c504:	9b07      	ldr	r3, [sp, #28]
 800c506:	2b00      	cmp	r3, #0
 800c508:	f000 80aa 	beq.w	800c660 <_dtoa_r+0x518>
 800c50c:	9b00      	ldr	r3, [sp, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	dd37      	ble.n	800c582 <_dtoa_r+0x43a>
 800c512:	1e7b      	subs	r3, r7, #1
 800c514:	9304      	str	r3, [sp, #16]
 800c516:	4620      	mov	r0, r4
 800c518:	4b7d      	ldr	r3, [pc, #500]	@ (800c710 <_dtoa_r+0x5c8>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	4629      	mov	r1, r5
 800c51e:	f7f4 f87b 	bl	8000618 <__aeabi_dmul>
 800c522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c526:	9c00      	ldr	r4, [sp, #0]
 800c528:	3601      	adds	r6, #1
 800c52a:	4630      	mov	r0, r6
 800c52c:	f7f4 f80a 	bl	8000544 <__aeabi_i2d>
 800c530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c534:	f7f4 f870 	bl	8000618 <__aeabi_dmul>
 800c538:	4b76      	ldr	r3, [pc, #472]	@ (800c714 <_dtoa_r+0x5cc>)
 800c53a:	2200      	movs	r2, #0
 800c53c:	f7f3 feb6 	bl	80002ac <__adddf3>
 800c540:	4605      	mov	r5, r0
 800c542:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c546:	2c00      	cmp	r4, #0
 800c548:	f040 808d 	bne.w	800c666 <_dtoa_r+0x51e>
 800c54c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c550:	4b71      	ldr	r3, [pc, #452]	@ (800c718 <_dtoa_r+0x5d0>)
 800c552:	2200      	movs	r2, #0
 800c554:	f7f3 fea8 	bl	80002a8 <__aeabi_dsub>
 800c558:	4602      	mov	r2, r0
 800c55a:	460b      	mov	r3, r1
 800c55c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c560:	462a      	mov	r2, r5
 800c562:	4633      	mov	r3, r6
 800c564:	f7f4 fae8 	bl	8000b38 <__aeabi_dcmpgt>
 800c568:	2800      	cmp	r0, #0
 800c56a:	f040 828b 	bne.w	800ca84 <_dtoa_r+0x93c>
 800c56e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c572:	462a      	mov	r2, r5
 800c574:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c578:	f7f4 fac0 	bl	8000afc <__aeabi_dcmplt>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	f040 8128 	bne.w	800c7d2 <_dtoa_r+0x68a>
 800c582:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c586:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c58a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f2c0 815a 	blt.w	800c846 <_dtoa_r+0x6fe>
 800c592:	2f0e      	cmp	r7, #14
 800c594:	f300 8157 	bgt.w	800c846 <_dtoa_r+0x6fe>
 800c598:	4b5a      	ldr	r3, [pc, #360]	@ (800c704 <_dtoa_r+0x5bc>)
 800c59a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c59e:	ed93 7b00 	vldr	d7, [r3]
 800c5a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	ed8d 7b00 	vstr	d7, [sp]
 800c5aa:	da03      	bge.n	800c5b4 <_dtoa_r+0x46c>
 800c5ac:	9b07      	ldr	r3, [sp, #28]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	f340 8101 	ble.w	800c7b6 <_dtoa_r+0x66e>
 800c5b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c5b8:	4656      	mov	r6, sl
 800c5ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5be:	4620      	mov	r0, r4
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	f7f4 f953 	bl	800086c <__aeabi_ddiv>
 800c5c6:	f7f4 fad7 	bl	8000b78 <__aeabi_d2iz>
 800c5ca:	4680      	mov	r8, r0
 800c5cc:	f7f3 ffba 	bl	8000544 <__aeabi_i2d>
 800c5d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5d4:	f7f4 f820 	bl	8000618 <__aeabi_dmul>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	4620      	mov	r0, r4
 800c5de:	4629      	mov	r1, r5
 800c5e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c5e4:	f7f3 fe60 	bl	80002a8 <__aeabi_dsub>
 800c5e8:	f806 4b01 	strb.w	r4, [r6], #1
 800c5ec:	9d07      	ldr	r5, [sp, #28]
 800c5ee:	eba6 040a 	sub.w	r4, r6, sl
 800c5f2:	42a5      	cmp	r5, r4
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	f040 8117 	bne.w	800c82a <_dtoa_r+0x6e2>
 800c5fc:	f7f3 fe56 	bl	80002ac <__adddf3>
 800c600:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c604:	4604      	mov	r4, r0
 800c606:	460d      	mov	r5, r1
 800c608:	f7f4 fa96 	bl	8000b38 <__aeabi_dcmpgt>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	f040 80f9 	bne.w	800c804 <_dtoa_r+0x6bc>
 800c612:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c616:	4620      	mov	r0, r4
 800c618:	4629      	mov	r1, r5
 800c61a:	f7f4 fa65 	bl	8000ae8 <__aeabi_dcmpeq>
 800c61e:	b118      	cbz	r0, 800c628 <_dtoa_r+0x4e0>
 800c620:	f018 0f01 	tst.w	r8, #1
 800c624:	f040 80ee 	bne.w	800c804 <_dtoa_r+0x6bc>
 800c628:	4649      	mov	r1, r9
 800c62a:	4658      	mov	r0, fp
 800c62c:	f000 fc90 	bl	800cf50 <_Bfree>
 800c630:	2300      	movs	r3, #0
 800c632:	7033      	strb	r3, [r6, #0]
 800c634:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c636:	3701      	adds	r7, #1
 800c638:	601f      	str	r7, [r3, #0]
 800c63a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f000 831d 	beq.w	800cc7c <_dtoa_r+0xb34>
 800c642:	601e      	str	r6, [r3, #0]
 800c644:	e31a      	b.n	800cc7c <_dtoa_r+0xb34>
 800c646:	07e2      	lsls	r2, r4, #31
 800c648:	d505      	bpl.n	800c656 <_dtoa_r+0x50e>
 800c64a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c64e:	f7f3 ffe3 	bl	8000618 <__aeabi_dmul>
 800c652:	3601      	adds	r6, #1
 800c654:	2301      	movs	r3, #1
 800c656:	1064      	asrs	r4, r4, #1
 800c658:	3508      	adds	r5, #8
 800c65a:	e73f      	b.n	800c4dc <_dtoa_r+0x394>
 800c65c:	2602      	movs	r6, #2
 800c65e:	e742      	b.n	800c4e6 <_dtoa_r+0x39e>
 800c660:	9c07      	ldr	r4, [sp, #28]
 800c662:	9704      	str	r7, [sp, #16]
 800c664:	e761      	b.n	800c52a <_dtoa_r+0x3e2>
 800c666:	4b27      	ldr	r3, [pc, #156]	@ (800c704 <_dtoa_r+0x5bc>)
 800c668:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c66a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c66e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c672:	4454      	add	r4, sl
 800c674:	2900      	cmp	r1, #0
 800c676:	d053      	beq.n	800c720 <_dtoa_r+0x5d8>
 800c678:	4928      	ldr	r1, [pc, #160]	@ (800c71c <_dtoa_r+0x5d4>)
 800c67a:	2000      	movs	r0, #0
 800c67c:	f7f4 f8f6 	bl	800086c <__aeabi_ddiv>
 800c680:	4633      	mov	r3, r6
 800c682:	462a      	mov	r2, r5
 800c684:	f7f3 fe10 	bl	80002a8 <__aeabi_dsub>
 800c688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c68c:	4656      	mov	r6, sl
 800c68e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c692:	f7f4 fa71 	bl	8000b78 <__aeabi_d2iz>
 800c696:	4605      	mov	r5, r0
 800c698:	f7f3 ff54 	bl	8000544 <__aeabi_i2d>
 800c69c:	4602      	mov	r2, r0
 800c69e:	460b      	mov	r3, r1
 800c6a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6a4:	f7f3 fe00 	bl	80002a8 <__aeabi_dsub>
 800c6a8:	3530      	adds	r5, #48	@ 0x30
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6b2:	f806 5b01 	strb.w	r5, [r6], #1
 800c6b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6ba:	f7f4 fa1f 	bl	8000afc <__aeabi_dcmplt>
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	d171      	bne.n	800c7a6 <_dtoa_r+0x65e>
 800c6c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6c6:	4911      	ldr	r1, [pc, #68]	@ (800c70c <_dtoa_r+0x5c4>)
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	f7f3 fded 	bl	80002a8 <__aeabi_dsub>
 800c6ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6d2:	f7f4 fa13 	bl	8000afc <__aeabi_dcmplt>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	f040 8095 	bne.w	800c806 <_dtoa_r+0x6be>
 800c6dc:	42a6      	cmp	r6, r4
 800c6de:	f43f af50 	beq.w	800c582 <_dtoa_r+0x43a>
 800c6e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c6e6:	4b0a      	ldr	r3, [pc, #40]	@ (800c710 <_dtoa_r+0x5c8>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f7f3 ff95 	bl	8000618 <__aeabi_dmul>
 800c6ee:	4b08      	ldr	r3, [pc, #32]	@ (800c710 <_dtoa_r+0x5c8>)
 800c6f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6fa:	f7f3 ff8d 	bl	8000618 <__aeabi_dmul>
 800c6fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c702:	e7c4      	b.n	800c68e <_dtoa_r+0x546>
 800c704:	0800fd78 	.word	0x0800fd78
 800c708:	0800fd50 	.word	0x0800fd50
 800c70c:	3ff00000 	.word	0x3ff00000
 800c710:	40240000 	.word	0x40240000
 800c714:	401c0000 	.word	0x401c0000
 800c718:	40140000 	.word	0x40140000
 800c71c:	3fe00000 	.word	0x3fe00000
 800c720:	4631      	mov	r1, r6
 800c722:	4628      	mov	r0, r5
 800c724:	f7f3 ff78 	bl	8000618 <__aeabi_dmul>
 800c728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c72c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c72e:	4656      	mov	r6, sl
 800c730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c734:	f7f4 fa20 	bl	8000b78 <__aeabi_d2iz>
 800c738:	4605      	mov	r5, r0
 800c73a:	f7f3 ff03 	bl	8000544 <__aeabi_i2d>
 800c73e:	4602      	mov	r2, r0
 800c740:	460b      	mov	r3, r1
 800c742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c746:	f7f3 fdaf 	bl	80002a8 <__aeabi_dsub>
 800c74a:	3530      	adds	r5, #48	@ 0x30
 800c74c:	f806 5b01 	strb.w	r5, [r6], #1
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	42a6      	cmp	r6, r4
 800c756:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c75a:	f04f 0200 	mov.w	r2, #0
 800c75e:	d124      	bne.n	800c7aa <_dtoa_r+0x662>
 800c760:	4bac      	ldr	r3, [pc, #688]	@ (800ca14 <_dtoa_r+0x8cc>)
 800c762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c766:	f7f3 fda1 	bl	80002ac <__adddf3>
 800c76a:	4602      	mov	r2, r0
 800c76c:	460b      	mov	r3, r1
 800c76e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c772:	f7f4 f9e1 	bl	8000b38 <__aeabi_dcmpgt>
 800c776:	2800      	cmp	r0, #0
 800c778:	d145      	bne.n	800c806 <_dtoa_r+0x6be>
 800c77a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c77e:	49a5      	ldr	r1, [pc, #660]	@ (800ca14 <_dtoa_r+0x8cc>)
 800c780:	2000      	movs	r0, #0
 800c782:	f7f3 fd91 	bl	80002a8 <__aeabi_dsub>
 800c786:	4602      	mov	r2, r0
 800c788:	460b      	mov	r3, r1
 800c78a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c78e:	f7f4 f9b5 	bl	8000afc <__aeabi_dcmplt>
 800c792:	2800      	cmp	r0, #0
 800c794:	f43f aef5 	beq.w	800c582 <_dtoa_r+0x43a>
 800c798:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c79a:	1e73      	subs	r3, r6, #1
 800c79c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c79e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c7a2:	2b30      	cmp	r3, #48	@ 0x30
 800c7a4:	d0f8      	beq.n	800c798 <_dtoa_r+0x650>
 800c7a6:	9f04      	ldr	r7, [sp, #16]
 800c7a8:	e73e      	b.n	800c628 <_dtoa_r+0x4e0>
 800c7aa:	4b9b      	ldr	r3, [pc, #620]	@ (800ca18 <_dtoa_r+0x8d0>)
 800c7ac:	f7f3 ff34 	bl	8000618 <__aeabi_dmul>
 800c7b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7b4:	e7bc      	b.n	800c730 <_dtoa_r+0x5e8>
 800c7b6:	d10c      	bne.n	800c7d2 <_dtoa_r+0x68a>
 800c7b8:	4b98      	ldr	r3, [pc, #608]	@ (800ca1c <_dtoa_r+0x8d4>)
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7c0:	f7f3 ff2a 	bl	8000618 <__aeabi_dmul>
 800c7c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7c8:	f7f4 f9ac 	bl	8000b24 <__aeabi_dcmpge>
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	f000 8157 	beq.w	800ca80 <_dtoa_r+0x938>
 800c7d2:	2400      	movs	r4, #0
 800c7d4:	4625      	mov	r5, r4
 800c7d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7d8:	43db      	mvns	r3, r3
 800c7da:	9304      	str	r3, [sp, #16]
 800c7dc:	4656      	mov	r6, sl
 800c7de:	2700      	movs	r7, #0
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	4658      	mov	r0, fp
 800c7e4:	f000 fbb4 	bl	800cf50 <_Bfree>
 800c7e8:	2d00      	cmp	r5, #0
 800c7ea:	d0dc      	beq.n	800c7a6 <_dtoa_r+0x65e>
 800c7ec:	b12f      	cbz	r7, 800c7fa <_dtoa_r+0x6b2>
 800c7ee:	42af      	cmp	r7, r5
 800c7f0:	d003      	beq.n	800c7fa <_dtoa_r+0x6b2>
 800c7f2:	4639      	mov	r1, r7
 800c7f4:	4658      	mov	r0, fp
 800c7f6:	f000 fbab 	bl	800cf50 <_Bfree>
 800c7fa:	4629      	mov	r1, r5
 800c7fc:	4658      	mov	r0, fp
 800c7fe:	f000 fba7 	bl	800cf50 <_Bfree>
 800c802:	e7d0      	b.n	800c7a6 <_dtoa_r+0x65e>
 800c804:	9704      	str	r7, [sp, #16]
 800c806:	4633      	mov	r3, r6
 800c808:	461e      	mov	r6, r3
 800c80a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c80e:	2a39      	cmp	r2, #57	@ 0x39
 800c810:	d107      	bne.n	800c822 <_dtoa_r+0x6da>
 800c812:	459a      	cmp	sl, r3
 800c814:	d1f8      	bne.n	800c808 <_dtoa_r+0x6c0>
 800c816:	9a04      	ldr	r2, [sp, #16]
 800c818:	3201      	adds	r2, #1
 800c81a:	9204      	str	r2, [sp, #16]
 800c81c:	2230      	movs	r2, #48	@ 0x30
 800c81e:	f88a 2000 	strb.w	r2, [sl]
 800c822:	781a      	ldrb	r2, [r3, #0]
 800c824:	3201      	adds	r2, #1
 800c826:	701a      	strb	r2, [r3, #0]
 800c828:	e7bd      	b.n	800c7a6 <_dtoa_r+0x65e>
 800c82a:	4b7b      	ldr	r3, [pc, #492]	@ (800ca18 <_dtoa_r+0x8d0>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	f7f3 fef3 	bl	8000618 <__aeabi_dmul>
 800c832:	2200      	movs	r2, #0
 800c834:	2300      	movs	r3, #0
 800c836:	4604      	mov	r4, r0
 800c838:	460d      	mov	r5, r1
 800c83a:	f7f4 f955 	bl	8000ae8 <__aeabi_dcmpeq>
 800c83e:	2800      	cmp	r0, #0
 800c840:	f43f aebb 	beq.w	800c5ba <_dtoa_r+0x472>
 800c844:	e6f0      	b.n	800c628 <_dtoa_r+0x4e0>
 800c846:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c848:	2a00      	cmp	r2, #0
 800c84a:	f000 80db 	beq.w	800ca04 <_dtoa_r+0x8bc>
 800c84e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c850:	2a01      	cmp	r2, #1
 800c852:	f300 80bf 	bgt.w	800c9d4 <_dtoa_r+0x88c>
 800c856:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c858:	2a00      	cmp	r2, #0
 800c85a:	f000 80b7 	beq.w	800c9cc <_dtoa_r+0x884>
 800c85e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c862:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c864:	4646      	mov	r6, r8
 800c866:	9a08      	ldr	r2, [sp, #32]
 800c868:	2101      	movs	r1, #1
 800c86a:	441a      	add	r2, r3
 800c86c:	4658      	mov	r0, fp
 800c86e:	4498      	add	r8, r3
 800c870:	9208      	str	r2, [sp, #32]
 800c872:	f000 fc21 	bl	800d0b8 <__i2b>
 800c876:	4605      	mov	r5, r0
 800c878:	b15e      	cbz	r6, 800c892 <_dtoa_r+0x74a>
 800c87a:	9b08      	ldr	r3, [sp, #32]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	dd08      	ble.n	800c892 <_dtoa_r+0x74a>
 800c880:	42b3      	cmp	r3, r6
 800c882:	9a08      	ldr	r2, [sp, #32]
 800c884:	bfa8      	it	ge
 800c886:	4633      	movge	r3, r6
 800c888:	eba8 0803 	sub.w	r8, r8, r3
 800c88c:	1af6      	subs	r6, r6, r3
 800c88e:	1ad3      	subs	r3, r2, r3
 800c890:	9308      	str	r3, [sp, #32]
 800c892:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c894:	b1f3      	cbz	r3, 800c8d4 <_dtoa_r+0x78c>
 800c896:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 80b7 	beq.w	800ca0c <_dtoa_r+0x8c4>
 800c89e:	b18c      	cbz	r4, 800c8c4 <_dtoa_r+0x77c>
 800c8a0:	4629      	mov	r1, r5
 800c8a2:	4622      	mov	r2, r4
 800c8a4:	4658      	mov	r0, fp
 800c8a6:	f000 fcc7 	bl	800d238 <__pow5mult>
 800c8aa:	464a      	mov	r2, r9
 800c8ac:	4601      	mov	r1, r0
 800c8ae:	4605      	mov	r5, r0
 800c8b0:	4658      	mov	r0, fp
 800c8b2:	f000 fc17 	bl	800d0e4 <__multiply>
 800c8b6:	4649      	mov	r1, r9
 800c8b8:	9004      	str	r0, [sp, #16]
 800c8ba:	4658      	mov	r0, fp
 800c8bc:	f000 fb48 	bl	800cf50 <_Bfree>
 800c8c0:	9b04      	ldr	r3, [sp, #16]
 800c8c2:	4699      	mov	r9, r3
 800c8c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8c6:	1b1a      	subs	r2, r3, r4
 800c8c8:	d004      	beq.n	800c8d4 <_dtoa_r+0x78c>
 800c8ca:	4649      	mov	r1, r9
 800c8cc:	4658      	mov	r0, fp
 800c8ce:	f000 fcb3 	bl	800d238 <__pow5mult>
 800c8d2:	4681      	mov	r9, r0
 800c8d4:	2101      	movs	r1, #1
 800c8d6:	4658      	mov	r0, fp
 800c8d8:	f000 fbee 	bl	800d0b8 <__i2b>
 800c8dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8de:	4604      	mov	r4, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f000 81cf 	beq.w	800cc84 <_dtoa_r+0xb3c>
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	4601      	mov	r1, r0
 800c8ea:	4658      	mov	r0, fp
 800c8ec:	f000 fca4 	bl	800d238 <__pow5mult>
 800c8f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	f300 8095 	bgt.w	800ca24 <_dtoa_r+0x8dc>
 800c8fa:	9b02      	ldr	r3, [sp, #8]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f040 8087 	bne.w	800ca10 <_dtoa_r+0x8c8>
 800c902:	9b03      	ldr	r3, [sp, #12]
 800c904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f040 8089 	bne.w	800ca20 <_dtoa_r+0x8d8>
 800c90e:	9b03      	ldr	r3, [sp, #12]
 800c910:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c914:	0d1b      	lsrs	r3, r3, #20
 800c916:	051b      	lsls	r3, r3, #20
 800c918:	b12b      	cbz	r3, 800c926 <_dtoa_r+0x7de>
 800c91a:	9b08      	ldr	r3, [sp, #32]
 800c91c:	3301      	adds	r3, #1
 800c91e:	9308      	str	r3, [sp, #32]
 800c920:	f108 0801 	add.w	r8, r8, #1
 800c924:	2301      	movs	r3, #1
 800c926:	930a      	str	r3, [sp, #40]	@ 0x28
 800c928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f000 81b0 	beq.w	800cc90 <_dtoa_r+0xb48>
 800c930:	6923      	ldr	r3, [r4, #16]
 800c932:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c936:	6918      	ldr	r0, [r3, #16]
 800c938:	f000 fb72 	bl	800d020 <__hi0bits>
 800c93c:	f1c0 0020 	rsb	r0, r0, #32
 800c940:	9b08      	ldr	r3, [sp, #32]
 800c942:	4418      	add	r0, r3
 800c944:	f010 001f 	ands.w	r0, r0, #31
 800c948:	d077      	beq.n	800ca3a <_dtoa_r+0x8f2>
 800c94a:	f1c0 0320 	rsb	r3, r0, #32
 800c94e:	2b04      	cmp	r3, #4
 800c950:	dd6b      	ble.n	800ca2a <_dtoa_r+0x8e2>
 800c952:	9b08      	ldr	r3, [sp, #32]
 800c954:	f1c0 001c 	rsb	r0, r0, #28
 800c958:	4403      	add	r3, r0
 800c95a:	4480      	add	r8, r0
 800c95c:	4406      	add	r6, r0
 800c95e:	9308      	str	r3, [sp, #32]
 800c960:	f1b8 0f00 	cmp.w	r8, #0
 800c964:	dd05      	ble.n	800c972 <_dtoa_r+0x82a>
 800c966:	4649      	mov	r1, r9
 800c968:	4642      	mov	r2, r8
 800c96a:	4658      	mov	r0, fp
 800c96c:	f000 fcbe 	bl	800d2ec <__lshift>
 800c970:	4681      	mov	r9, r0
 800c972:	9b08      	ldr	r3, [sp, #32]
 800c974:	2b00      	cmp	r3, #0
 800c976:	dd05      	ble.n	800c984 <_dtoa_r+0x83c>
 800c978:	4621      	mov	r1, r4
 800c97a:	461a      	mov	r2, r3
 800c97c:	4658      	mov	r0, fp
 800c97e:	f000 fcb5 	bl	800d2ec <__lshift>
 800c982:	4604      	mov	r4, r0
 800c984:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c986:	2b00      	cmp	r3, #0
 800c988:	d059      	beq.n	800ca3e <_dtoa_r+0x8f6>
 800c98a:	4621      	mov	r1, r4
 800c98c:	4648      	mov	r0, r9
 800c98e:	f000 fd19 	bl	800d3c4 <__mcmp>
 800c992:	2800      	cmp	r0, #0
 800c994:	da53      	bge.n	800ca3e <_dtoa_r+0x8f6>
 800c996:	1e7b      	subs	r3, r7, #1
 800c998:	9304      	str	r3, [sp, #16]
 800c99a:	4649      	mov	r1, r9
 800c99c:	2300      	movs	r3, #0
 800c99e:	220a      	movs	r2, #10
 800c9a0:	4658      	mov	r0, fp
 800c9a2:	f000 faf7 	bl	800cf94 <__multadd>
 800c9a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9a8:	4681      	mov	r9, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	f000 8172 	beq.w	800cc94 <_dtoa_r+0xb4c>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	4629      	mov	r1, r5
 800c9b4:	220a      	movs	r2, #10
 800c9b6:	4658      	mov	r0, fp
 800c9b8:	f000 faec 	bl	800cf94 <__multadd>
 800c9bc:	9b00      	ldr	r3, [sp, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	4605      	mov	r5, r0
 800c9c2:	dc67      	bgt.n	800ca94 <_dtoa_r+0x94c>
 800c9c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9c6:	2b02      	cmp	r3, #2
 800c9c8:	dc41      	bgt.n	800ca4e <_dtoa_r+0x906>
 800c9ca:	e063      	b.n	800ca94 <_dtoa_r+0x94c>
 800c9cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c9ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c9d2:	e746      	b.n	800c862 <_dtoa_r+0x71a>
 800c9d4:	9b07      	ldr	r3, [sp, #28]
 800c9d6:	1e5c      	subs	r4, r3, #1
 800c9d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9da:	42a3      	cmp	r3, r4
 800c9dc:	bfbf      	itttt	lt
 800c9de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c9e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c9e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c9e4:	1ae3      	sublt	r3, r4, r3
 800c9e6:	bfb4      	ite	lt
 800c9e8:	18d2      	addlt	r2, r2, r3
 800c9ea:	1b1c      	subge	r4, r3, r4
 800c9ec:	9b07      	ldr	r3, [sp, #28]
 800c9ee:	bfbc      	itt	lt
 800c9f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c9f2:	2400      	movlt	r4, #0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	bfb5      	itete	lt
 800c9f8:	eba8 0603 	sublt.w	r6, r8, r3
 800c9fc:	9b07      	ldrge	r3, [sp, #28]
 800c9fe:	2300      	movlt	r3, #0
 800ca00:	4646      	movge	r6, r8
 800ca02:	e730      	b.n	800c866 <_dtoa_r+0x71e>
 800ca04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ca06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ca08:	4646      	mov	r6, r8
 800ca0a:	e735      	b.n	800c878 <_dtoa_r+0x730>
 800ca0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca0e:	e75c      	b.n	800c8ca <_dtoa_r+0x782>
 800ca10:	2300      	movs	r3, #0
 800ca12:	e788      	b.n	800c926 <_dtoa_r+0x7de>
 800ca14:	3fe00000 	.word	0x3fe00000
 800ca18:	40240000 	.word	0x40240000
 800ca1c:	40140000 	.word	0x40140000
 800ca20:	9b02      	ldr	r3, [sp, #8]
 800ca22:	e780      	b.n	800c926 <_dtoa_r+0x7de>
 800ca24:	2300      	movs	r3, #0
 800ca26:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca28:	e782      	b.n	800c930 <_dtoa_r+0x7e8>
 800ca2a:	d099      	beq.n	800c960 <_dtoa_r+0x818>
 800ca2c:	9a08      	ldr	r2, [sp, #32]
 800ca2e:	331c      	adds	r3, #28
 800ca30:	441a      	add	r2, r3
 800ca32:	4498      	add	r8, r3
 800ca34:	441e      	add	r6, r3
 800ca36:	9208      	str	r2, [sp, #32]
 800ca38:	e792      	b.n	800c960 <_dtoa_r+0x818>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	e7f6      	b.n	800ca2c <_dtoa_r+0x8e4>
 800ca3e:	9b07      	ldr	r3, [sp, #28]
 800ca40:	9704      	str	r7, [sp, #16]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	dc20      	bgt.n	800ca88 <_dtoa_r+0x940>
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	dd1e      	ble.n	800ca8c <_dtoa_r+0x944>
 800ca4e:	9b00      	ldr	r3, [sp, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f47f aec0 	bne.w	800c7d6 <_dtoa_r+0x68e>
 800ca56:	4621      	mov	r1, r4
 800ca58:	2205      	movs	r2, #5
 800ca5a:	4658      	mov	r0, fp
 800ca5c:	f000 fa9a 	bl	800cf94 <__multadd>
 800ca60:	4601      	mov	r1, r0
 800ca62:	4604      	mov	r4, r0
 800ca64:	4648      	mov	r0, r9
 800ca66:	f000 fcad 	bl	800d3c4 <__mcmp>
 800ca6a:	2800      	cmp	r0, #0
 800ca6c:	f77f aeb3 	ble.w	800c7d6 <_dtoa_r+0x68e>
 800ca70:	4656      	mov	r6, sl
 800ca72:	2331      	movs	r3, #49	@ 0x31
 800ca74:	f806 3b01 	strb.w	r3, [r6], #1
 800ca78:	9b04      	ldr	r3, [sp, #16]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	9304      	str	r3, [sp, #16]
 800ca7e:	e6ae      	b.n	800c7de <_dtoa_r+0x696>
 800ca80:	9c07      	ldr	r4, [sp, #28]
 800ca82:	9704      	str	r7, [sp, #16]
 800ca84:	4625      	mov	r5, r4
 800ca86:	e7f3      	b.n	800ca70 <_dtoa_r+0x928>
 800ca88:	9b07      	ldr	r3, [sp, #28]
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	f000 8104 	beq.w	800cc9c <_dtoa_r+0xb54>
 800ca94:	2e00      	cmp	r6, #0
 800ca96:	dd05      	ble.n	800caa4 <_dtoa_r+0x95c>
 800ca98:	4629      	mov	r1, r5
 800ca9a:	4632      	mov	r2, r6
 800ca9c:	4658      	mov	r0, fp
 800ca9e:	f000 fc25 	bl	800d2ec <__lshift>
 800caa2:	4605      	mov	r5, r0
 800caa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d05a      	beq.n	800cb60 <_dtoa_r+0xa18>
 800caaa:	6869      	ldr	r1, [r5, #4]
 800caac:	4658      	mov	r0, fp
 800caae:	f000 fa0f 	bl	800ced0 <_Balloc>
 800cab2:	4606      	mov	r6, r0
 800cab4:	b928      	cbnz	r0, 800cac2 <_dtoa_r+0x97a>
 800cab6:	4b84      	ldr	r3, [pc, #528]	@ (800ccc8 <_dtoa_r+0xb80>)
 800cab8:	4602      	mov	r2, r0
 800caba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cabe:	f7ff bb5a 	b.w	800c176 <_dtoa_r+0x2e>
 800cac2:	692a      	ldr	r2, [r5, #16]
 800cac4:	3202      	adds	r2, #2
 800cac6:	0092      	lsls	r2, r2, #2
 800cac8:	f105 010c 	add.w	r1, r5, #12
 800cacc:	300c      	adds	r0, #12
 800cace:	f000 ffaf 	bl	800da30 <memcpy>
 800cad2:	2201      	movs	r2, #1
 800cad4:	4631      	mov	r1, r6
 800cad6:	4658      	mov	r0, fp
 800cad8:	f000 fc08 	bl	800d2ec <__lshift>
 800cadc:	f10a 0301 	add.w	r3, sl, #1
 800cae0:	9307      	str	r3, [sp, #28]
 800cae2:	9b00      	ldr	r3, [sp, #0]
 800cae4:	4453      	add	r3, sl
 800cae6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cae8:	9b02      	ldr	r3, [sp, #8]
 800caea:	f003 0301 	and.w	r3, r3, #1
 800caee:	462f      	mov	r7, r5
 800caf0:	930a      	str	r3, [sp, #40]	@ 0x28
 800caf2:	4605      	mov	r5, r0
 800caf4:	9b07      	ldr	r3, [sp, #28]
 800caf6:	4621      	mov	r1, r4
 800caf8:	3b01      	subs	r3, #1
 800cafa:	4648      	mov	r0, r9
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	f7ff fa98 	bl	800c032 <quorem>
 800cb02:	4639      	mov	r1, r7
 800cb04:	9002      	str	r0, [sp, #8]
 800cb06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cb0a:	4648      	mov	r0, r9
 800cb0c:	f000 fc5a 	bl	800d3c4 <__mcmp>
 800cb10:	462a      	mov	r2, r5
 800cb12:	9008      	str	r0, [sp, #32]
 800cb14:	4621      	mov	r1, r4
 800cb16:	4658      	mov	r0, fp
 800cb18:	f000 fc70 	bl	800d3fc <__mdiff>
 800cb1c:	68c2      	ldr	r2, [r0, #12]
 800cb1e:	4606      	mov	r6, r0
 800cb20:	bb02      	cbnz	r2, 800cb64 <_dtoa_r+0xa1c>
 800cb22:	4601      	mov	r1, r0
 800cb24:	4648      	mov	r0, r9
 800cb26:	f000 fc4d 	bl	800d3c4 <__mcmp>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	4631      	mov	r1, r6
 800cb2e:	4658      	mov	r0, fp
 800cb30:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb32:	f000 fa0d 	bl	800cf50 <_Bfree>
 800cb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb3a:	9e07      	ldr	r6, [sp, #28]
 800cb3c:	ea43 0102 	orr.w	r1, r3, r2
 800cb40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb42:	4319      	orrs	r1, r3
 800cb44:	d110      	bne.n	800cb68 <_dtoa_r+0xa20>
 800cb46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb4a:	d029      	beq.n	800cba0 <_dtoa_r+0xa58>
 800cb4c:	9b08      	ldr	r3, [sp, #32]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	dd02      	ble.n	800cb58 <_dtoa_r+0xa10>
 800cb52:	9b02      	ldr	r3, [sp, #8]
 800cb54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cb58:	9b00      	ldr	r3, [sp, #0]
 800cb5a:	f883 8000 	strb.w	r8, [r3]
 800cb5e:	e63f      	b.n	800c7e0 <_dtoa_r+0x698>
 800cb60:	4628      	mov	r0, r5
 800cb62:	e7bb      	b.n	800cadc <_dtoa_r+0x994>
 800cb64:	2201      	movs	r2, #1
 800cb66:	e7e1      	b.n	800cb2c <_dtoa_r+0x9e4>
 800cb68:	9b08      	ldr	r3, [sp, #32]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	db04      	blt.n	800cb78 <_dtoa_r+0xa30>
 800cb6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb70:	430b      	orrs	r3, r1
 800cb72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cb74:	430b      	orrs	r3, r1
 800cb76:	d120      	bne.n	800cbba <_dtoa_r+0xa72>
 800cb78:	2a00      	cmp	r2, #0
 800cb7a:	dded      	ble.n	800cb58 <_dtoa_r+0xa10>
 800cb7c:	4649      	mov	r1, r9
 800cb7e:	2201      	movs	r2, #1
 800cb80:	4658      	mov	r0, fp
 800cb82:	f000 fbb3 	bl	800d2ec <__lshift>
 800cb86:	4621      	mov	r1, r4
 800cb88:	4681      	mov	r9, r0
 800cb8a:	f000 fc1b 	bl	800d3c4 <__mcmp>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	dc03      	bgt.n	800cb9a <_dtoa_r+0xa52>
 800cb92:	d1e1      	bne.n	800cb58 <_dtoa_r+0xa10>
 800cb94:	f018 0f01 	tst.w	r8, #1
 800cb98:	d0de      	beq.n	800cb58 <_dtoa_r+0xa10>
 800cb9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb9e:	d1d8      	bne.n	800cb52 <_dtoa_r+0xa0a>
 800cba0:	9a00      	ldr	r2, [sp, #0]
 800cba2:	2339      	movs	r3, #57	@ 0x39
 800cba4:	7013      	strb	r3, [r2, #0]
 800cba6:	4633      	mov	r3, r6
 800cba8:	461e      	mov	r6, r3
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cbb0:	2a39      	cmp	r2, #57	@ 0x39
 800cbb2:	d052      	beq.n	800cc5a <_dtoa_r+0xb12>
 800cbb4:	3201      	adds	r2, #1
 800cbb6:	701a      	strb	r2, [r3, #0]
 800cbb8:	e612      	b.n	800c7e0 <_dtoa_r+0x698>
 800cbba:	2a00      	cmp	r2, #0
 800cbbc:	dd07      	ble.n	800cbce <_dtoa_r+0xa86>
 800cbbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cbc2:	d0ed      	beq.n	800cba0 <_dtoa_r+0xa58>
 800cbc4:	9a00      	ldr	r2, [sp, #0]
 800cbc6:	f108 0301 	add.w	r3, r8, #1
 800cbca:	7013      	strb	r3, [r2, #0]
 800cbcc:	e608      	b.n	800c7e0 <_dtoa_r+0x698>
 800cbce:	9b07      	ldr	r3, [sp, #28]
 800cbd0:	9a07      	ldr	r2, [sp, #28]
 800cbd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cbd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d028      	beq.n	800cc2e <_dtoa_r+0xae6>
 800cbdc:	4649      	mov	r1, r9
 800cbde:	2300      	movs	r3, #0
 800cbe0:	220a      	movs	r2, #10
 800cbe2:	4658      	mov	r0, fp
 800cbe4:	f000 f9d6 	bl	800cf94 <__multadd>
 800cbe8:	42af      	cmp	r7, r5
 800cbea:	4681      	mov	r9, r0
 800cbec:	f04f 0300 	mov.w	r3, #0
 800cbf0:	f04f 020a 	mov.w	r2, #10
 800cbf4:	4639      	mov	r1, r7
 800cbf6:	4658      	mov	r0, fp
 800cbf8:	d107      	bne.n	800cc0a <_dtoa_r+0xac2>
 800cbfa:	f000 f9cb 	bl	800cf94 <__multadd>
 800cbfe:	4607      	mov	r7, r0
 800cc00:	4605      	mov	r5, r0
 800cc02:	9b07      	ldr	r3, [sp, #28]
 800cc04:	3301      	adds	r3, #1
 800cc06:	9307      	str	r3, [sp, #28]
 800cc08:	e774      	b.n	800caf4 <_dtoa_r+0x9ac>
 800cc0a:	f000 f9c3 	bl	800cf94 <__multadd>
 800cc0e:	4629      	mov	r1, r5
 800cc10:	4607      	mov	r7, r0
 800cc12:	2300      	movs	r3, #0
 800cc14:	220a      	movs	r2, #10
 800cc16:	4658      	mov	r0, fp
 800cc18:	f000 f9bc 	bl	800cf94 <__multadd>
 800cc1c:	4605      	mov	r5, r0
 800cc1e:	e7f0      	b.n	800cc02 <_dtoa_r+0xaba>
 800cc20:	9b00      	ldr	r3, [sp, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	bfcc      	ite	gt
 800cc26:	461e      	movgt	r6, r3
 800cc28:	2601      	movle	r6, #1
 800cc2a:	4456      	add	r6, sl
 800cc2c:	2700      	movs	r7, #0
 800cc2e:	4649      	mov	r1, r9
 800cc30:	2201      	movs	r2, #1
 800cc32:	4658      	mov	r0, fp
 800cc34:	f000 fb5a 	bl	800d2ec <__lshift>
 800cc38:	4621      	mov	r1, r4
 800cc3a:	4681      	mov	r9, r0
 800cc3c:	f000 fbc2 	bl	800d3c4 <__mcmp>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	dcb0      	bgt.n	800cba6 <_dtoa_r+0xa5e>
 800cc44:	d102      	bne.n	800cc4c <_dtoa_r+0xb04>
 800cc46:	f018 0f01 	tst.w	r8, #1
 800cc4a:	d1ac      	bne.n	800cba6 <_dtoa_r+0xa5e>
 800cc4c:	4633      	mov	r3, r6
 800cc4e:	461e      	mov	r6, r3
 800cc50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc54:	2a30      	cmp	r2, #48	@ 0x30
 800cc56:	d0fa      	beq.n	800cc4e <_dtoa_r+0xb06>
 800cc58:	e5c2      	b.n	800c7e0 <_dtoa_r+0x698>
 800cc5a:	459a      	cmp	sl, r3
 800cc5c:	d1a4      	bne.n	800cba8 <_dtoa_r+0xa60>
 800cc5e:	9b04      	ldr	r3, [sp, #16]
 800cc60:	3301      	adds	r3, #1
 800cc62:	9304      	str	r3, [sp, #16]
 800cc64:	2331      	movs	r3, #49	@ 0x31
 800cc66:	f88a 3000 	strb.w	r3, [sl]
 800cc6a:	e5b9      	b.n	800c7e0 <_dtoa_r+0x698>
 800cc6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cc6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cccc <_dtoa_r+0xb84>
 800cc72:	b11b      	cbz	r3, 800cc7c <_dtoa_r+0xb34>
 800cc74:	f10a 0308 	add.w	r3, sl, #8
 800cc78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cc7a:	6013      	str	r3, [r2, #0]
 800cc7c:	4650      	mov	r0, sl
 800cc7e:	b019      	add	sp, #100	@ 0x64
 800cc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	f77f ae37 	ble.w	800c8fa <_dtoa_r+0x7b2>
 800cc8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc90:	2001      	movs	r0, #1
 800cc92:	e655      	b.n	800c940 <_dtoa_r+0x7f8>
 800cc94:	9b00      	ldr	r3, [sp, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	f77f aed6 	ble.w	800ca48 <_dtoa_r+0x900>
 800cc9c:	4656      	mov	r6, sl
 800cc9e:	4621      	mov	r1, r4
 800cca0:	4648      	mov	r0, r9
 800cca2:	f7ff f9c6 	bl	800c032 <quorem>
 800cca6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ccaa:	f806 8b01 	strb.w	r8, [r6], #1
 800ccae:	9b00      	ldr	r3, [sp, #0]
 800ccb0:	eba6 020a 	sub.w	r2, r6, sl
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	ddb3      	ble.n	800cc20 <_dtoa_r+0xad8>
 800ccb8:	4649      	mov	r1, r9
 800ccba:	2300      	movs	r3, #0
 800ccbc:	220a      	movs	r2, #10
 800ccbe:	4658      	mov	r0, fp
 800ccc0:	f000 f968 	bl	800cf94 <__multadd>
 800ccc4:	4681      	mov	r9, r0
 800ccc6:	e7ea      	b.n	800cc9e <_dtoa_r+0xb56>
 800ccc8:	0800fcd4 	.word	0x0800fcd4
 800cccc:	0800fc58 	.word	0x0800fc58

0800ccd0 <_free_r>:
 800ccd0:	b538      	push	{r3, r4, r5, lr}
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	2900      	cmp	r1, #0
 800ccd6:	d041      	beq.n	800cd5c <_free_r+0x8c>
 800ccd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccdc:	1f0c      	subs	r4, r1, #4
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	bfb8      	it	lt
 800cce2:	18e4      	addlt	r4, r4, r3
 800cce4:	f000 f8e8 	bl	800ceb8 <__malloc_lock>
 800cce8:	4a1d      	ldr	r2, [pc, #116]	@ (800cd60 <_free_r+0x90>)
 800ccea:	6813      	ldr	r3, [r2, #0]
 800ccec:	b933      	cbnz	r3, 800ccfc <_free_r+0x2c>
 800ccee:	6063      	str	r3, [r4, #4]
 800ccf0:	6014      	str	r4, [r2, #0]
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccf8:	f000 b8e4 	b.w	800cec4 <__malloc_unlock>
 800ccfc:	42a3      	cmp	r3, r4
 800ccfe:	d908      	bls.n	800cd12 <_free_r+0x42>
 800cd00:	6820      	ldr	r0, [r4, #0]
 800cd02:	1821      	adds	r1, r4, r0
 800cd04:	428b      	cmp	r3, r1
 800cd06:	bf01      	itttt	eq
 800cd08:	6819      	ldreq	r1, [r3, #0]
 800cd0a:	685b      	ldreq	r3, [r3, #4]
 800cd0c:	1809      	addeq	r1, r1, r0
 800cd0e:	6021      	streq	r1, [r4, #0]
 800cd10:	e7ed      	b.n	800ccee <_free_r+0x1e>
 800cd12:	461a      	mov	r2, r3
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	b10b      	cbz	r3, 800cd1c <_free_r+0x4c>
 800cd18:	42a3      	cmp	r3, r4
 800cd1a:	d9fa      	bls.n	800cd12 <_free_r+0x42>
 800cd1c:	6811      	ldr	r1, [r2, #0]
 800cd1e:	1850      	adds	r0, r2, r1
 800cd20:	42a0      	cmp	r0, r4
 800cd22:	d10b      	bne.n	800cd3c <_free_r+0x6c>
 800cd24:	6820      	ldr	r0, [r4, #0]
 800cd26:	4401      	add	r1, r0
 800cd28:	1850      	adds	r0, r2, r1
 800cd2a:	4283      	cmp	r3, r0
 800cd2c:	6011      	str	r1, [r2, #0]
 800cd2e:	d1e0      	bne.n	800ccf2 <_free_r+0x22>
 800cd30:	6818      	ldr	r0, [r3, #0]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	6053      	str	r3, [r2, #4]
 800cd36:	4408      	add	r0, r1
 800cd38:	6010      	str	r0, [r2, #0]
 800cd3a:	e7da      	b.n	800ccf2 <_free_r+0x22>
 800cd3c:	d902      	bls.n	800cd44 <_free_r+0x74>
 800cd3e:	230c      	movs	r3, #12
 800cd40:	602b      	str	r3, [r5, #0]
 800cd42:	e7d6      	b.n	800ccf2 <_free_r+0x22>
 800cd44:	6820      	ldr	r0, [r4, #0]
 800cd46:	1821      	adds	r1, r4, r0
 800cd48:	428b      	cmp	r3, r1
 800cd4a:	bf04      	itt	eq
 800cd4c:	6819      	ldreq	r1, [r3, #0]
 800cd4e:	685b      	ldreq	r3, [r3, #4]
 800cd50:	6063      	str	r3, [r4, #4]
 800cd52:	bf04      	itt	eq
 800cd54:	1809      	addeq	r1, r1, r0
 800cd56:	6021      	streq	r1, [r4, #0]
 800cd58:	6054      	str	r4, [r2, #4]
 800cd5a:	e7ca      	b.n	800ccf2 <_free_r+0x22>
 800cd5c:	bd38      	pop	{r3, r4, r5, pc}
 800cd5e:	bf00      	nop
 800cd60:	20002328 	.word	0x20002328

0800cd64 <malloc>:
 800cd64:	4b02      	ldr	r3, [pc, #8]	@ (800cd70 <malloc+0xc>)
 800cd66:	4601      	mov	r1, r0
 800cd68:	6818      	ldr	r0, [r3, #0]
 800cd6a:	f000 b825 	b.w	800cdb8 <_malloc_r>
 800cd6e:	bf00      	nop
 800cd70:	20000184 	.word	0x20000184

0800cd74 <sbrk_aligned>:
 800cd74:	b570      	push	{r4, r5, r6, lr}
 800cd76:	4e0f      	ldr	r6, [pc, #60]	@ (800cdb4 <sbrk_aligned+0x40>)
 800cd78:	460c      	mov	r4, r1
 800cd7a:	6831      	ldr	r1, [r6, #0]
 800cd7c:	4605      	mov	r5, r0
 800cd7e:	b911      	cbnz	r1, 800cd86 <sbrk_aligned+0x12>
 800cd80:	f000 fe46 	bl	800da10 <_sbrk_r>
 800cd84:	6030      	str	r0, [r6, #0]
 800cd86:	4621      	mov	r1, r4
 800cd88:	4628      	mov	r0, r5
 800cd8a:	f000 fe41 	bl	800da10 <_sbrk_r>
 800cd8e:	1c43      	adds	r3, r0, #1
 800cd90:	d103      	bne.n	800cd9a <sbrk_aligned+0x26>
 800cd92:	f04f 34ff 	mov.w	r4, #4294967295
 800cd96:	4620      	mov	r0, r4
 800cd98:	bd70      	pop	{r4, r5, r6, pc}
 800cd9a:	1cc4      	adds	r4, r0, #3
 800cd9c:	f024 0403 	bic.w	r4, r4, #3
 800cda0:	42a0      	cmp	r0, r4
 800cda2:	d0f8      	beq.n	800cd96 <sbrk_aligned+0x22>
 800cda4:	1a21      	subs	r1, r4, r0
 800cda6:	4628      	mov	r0, r5
 800cda8:	f000 fe32 	bl	800da10 <_sbrk_r>
 800cdac:	3001      	adds	r0, #1
 800cdae:	d1f2      	bne.n	800cd96 <sbrk_aligned+0x22>
 800cdb0:	e7ef      	b.n	800cd92 <sbrk_aligned+0x1e>
 800cdb2:	bf00      	nop
 800cdb4:	20002324 	.word	0x20002324

0800cdb8 <_malloc_r>:
 800cdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdbc:	1ccd      	adds	r5, r1, #3
 800cdbe:	f025 0503 	bic.w	r5, r5, #3
 800cdc2:	3508      	adds	r5, #8
 800cdc4:	2d0c      	cmp	r5, #12
 800cdc6:	bf38      	it	cc
 800cdc8:	250c      	movcc	r5, #12
 800cdca:	2d00      	cmp	r5, #0
 800cdcc:	4606      	mov	r6, r0
 800cdce:	db01      	blt.n	800cdd4 <_malloc_r+0x1c>
 800cdd0:	42a9      	cmp	r1, r5
 800cdd2:	d904      	bls.n	800cdde <_malloc_r+0x26>
 800cdd4:	230c      	movs	r3, #12
 800cdd6:	6033      	str	r3, [r6, #0]
 800cdd8:	2000      	movs	r0, #0
 800cdda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ceb4 <_malloc_r+0xfc>
 800cde2:	f000 f869 	bl	800ceb8 <__malloc_lock>
 800cde6:	f8d8 3000 	ldr.w	r3, [r8]
 800cdea:	461c      	mov	r4, r3
 800cdec:	bb44      	cbnz	r4, 800ce40 <_malloc_r+0x88>
 800cdee:	4629      	mov	r1, r5
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	f7ff ffbf 	bl	800cd74 <sbrk_aligned>
 800cdf6:	1c43      	adds	r3, r0, #1
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	d158      	bne.n	800ceae <_malloc_r+0xf6>
 800cdfc:	f8d8 4000 	ldr.w	r4, [r8]
 800ce00:	4627      	mov	r7, r4
 800ce02:	2f00      	cmp	r7, #0
 800ce04:	d143      	bne.n	800ce8e <_malloc_r+0xd6>
 800ce06:	2c00      	cmp	r4, #0
 800ce08:	d04b      	beq.n	800cea2 <_malloc_r+0xea>
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	4639      	mov	r1, r7
 800ce0e:	4630      	mov	r0, r6
 800ce10:	eb04 0903 	add.w	r9, r4, r3
 800ce14:	f000 fdfc 	bl	800da10 <_sbrk_r>
 800ce18:	4581      	cmp	r9, r0
 800ce1a:	d142      	bne.n	800cea2 <_malloc_r+0xea>
 800ce1c:	6821      	ldr	r1, [r4, #0]
 800ce1e:	1a6d      	subs	r5, r5, r1
 800ce20:	4629      	mov	r1, r5
 800ce22:	4630      	mov	r0, r6
 800ce24:	f7ff ffa6 	bl	800cd74 <sbrk_aligned>
 800ce28:	3001      	adds	r0, #1
 800ce2a:	d03a      	beq.n	800cea2 <_malloc_r+0xea>
 800ce2c:	6823      	ldr	r3, [r4, #0]
 800ce2e:	442b      	add	r3, r5
 800ce30:	6023      	str	r3, [r4, #0]
 800ce32:	f8d8 3000 	ldr.w	r3, [r8]
 800ce36:	685a      	ldr	r2, [r3, #4]
 800ce38:	bb62      	cbnz	r2, 800ce94 <_malloc_r+0xdc>
 800ce3a:	f8c8 7000 	str.w	r7, [r8]
 800ce3e:	e00f      	b.n	800ce60 <_malloc_r+0xa8>
 800ce40:	6822      	ldr	r2, [r4, #0]
 800ce42:	1b52      	subs	r2, r2, r5
 800ce44:	d420      	bmi.n	800ce88 <_malloc_r+0xd0>
 800ce46:	2a0b      	cmp	r2, #11
 800ce48:	d917      	bls.n	800ce7a <_malloc_r+0xc2>
 800ce4a:	1961      	adds	r1, r4, r5
 800ce4c:	42a3      	cmp	r3, r4
 800ce4e:	6025      	str	r5, [r4, #0]
 800ce50:	bf18      	it	ne
 800ce52:	6059      	strne	r1, [r3, #4]
 800ce54:	6863      	ldr	r3, [r4, #4]
 800ce56:	bf08      	it	eq
 800ce58:	f8c8 1000 	streq.w	r1, [r8]
 800ce5c:	5162      	str	r2, [r4, r5]
 800ce5e:	604b      	str	r3, [r1, #4]
 800ce60:	4630      	mov	r0, r6
 800ce62:	f000 f82f 	bl	800cec4 <__malloc_unlock>
 800ce66:	f104 000b 	add.w	r0, r4, #11
 800ce6a:	1d23      	adds	r3, r4, #4
 800ce6c:	f020 0007 	bic.w	r0, r0, #7
 800ce70:	1ac2      	subs	r2, r0, r3
 800ce72:	bf1c      	itt	ne
 800ce74:	1a1b      	subne	r3, r3, r0
 800ce76:	50a3      	strne	r3, [r4, r2]
 800ce78:	e7af      	b.n	800cdda <_malloc_r+0x22>
 800ce7a:	6862      	ldr	r2, [r4, #4]
 800ce7c:	42a3      	cmp	r3, r4
 800ce7e:	bf0c      	ite	eq
 800ce80:	f8c8 2000 	streq.w	r2, [r8]
 800ce84:	605a      	strne	r2, [r3, #4]
 800ce86:	e7eb      	b.n	800ce60 <_malloc_r+0xa8>
 800ce88:	4623      	mov	r3, r4
 800ce8a:	6864      	ldr	r4, [r4, #4]
 800ce8c:	e7ae      	b.n	800cdec <_malloc_r+0x34>
 800ce8e:	463c      	mov	r4, r7
 800ce90:	687f      	ldr	r7, [r7, #4]
 800ce92:	e7b6      	b.n	800ce02 <_malloc_r+0x4a>
 800ce94:	461a      	mov	r2, r3
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	42a3      	cmp	r3, r4
 800ce9a:	d1fb      	bne.n	800ce94 <_malloc_r+0xdc>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	6053      	str	r3, [r2, #4]
 800cea0:	e7de      	b.n	800ce60 <_malloc_r+0xa8>
 800cea2:	230c      	movs	r3, #12
 800cea4:	6033      	str	r3, [r6, #0]
 800cea6:	4630      	mov	r0, r6
 800cea8:	f000 f80c 	bl	800cec4 <__malloc_unlock>
 800ceac:	e794      	b.n	800cdd8 <_malloc_r+0x20>
 800ceae:	6005      	str	r5, [r0, #0]
 800ceb0:	e7d6      	b.n	800ce60 <_malloc_r+0xa8>
 800ceb2:	bf00      	nop
 800ceb4:	20002328 	.word	0x20002328

0800ceb8 <__malloc_lock>:
 800ceb8:	4801      	ldr	r0, [pc, #4]	@ (800cec0 <__malloc_lock+0x8>)
 800ceba:	f7ff b8b8 	b.w	800c02e <__retarget_lock_acquire_recursive>
 800cebe:	bf00      	nop
 800cec0:	20002320 	.word	0x20002320

0800cec4 <__malloc_unlock>:
 800cec4:	4801      	ldr	r0, [pc, #4]	@ (800cecc <__malloc_unlock+0x8>)
 800cec6:	f7ff b8b3 	b.w	800c030 <__retarget_lock_release_recursive>
 800ceca:	bf00      	nop
 800cecc:	20002320 	.word	0x20002320

0800ced0 <_Balloc>:
 800ced0:	b570      	push	{r4, r5, r6, lr}
 800ced2:	69c6      	ldr	r6, [r0, #28]
 800ced4:	4604      	mov	r4, r0
 800ced6:	460d      	mov	r5, r1
 800ced8:	b976      	cbnz	r6, 800cef8 <_Balloc+0x28>
 800ceda:	2010      	movs	r0, #16
 800cedc:	f7ff ff42 	bl	800cd64 <malloc>
 800cee0:	4602      	mov	r2, r0
 800cee2:	61e0      	str	r0, [r4, #28]
 800cee4:	b920      	cbnz	r0, 800cef0 <_Balloc+0x20>
 800cee6:	4b18      	ldr	r3, [pc, #96]	@ (800cf48 <_Balloc+0x78>)
 800cee8:	4818      	ldr	r0, [pc, #96]	@ (800cf4c <_Balloc+0x7c>)
 800ceea:	216b      	movs	r1, #107	@ 0x6b
 800ceec:	f000 fdae 	bl	800da4c <__assert_func>
 800cef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cef4:	6006      	str	r6, [r0, #0]
 800cef6:	60c6      	str	r6, [r0, #12]
 800cef8:	69e6      	ldr	r6, [r4, #28]
 800cefa:	68f3      	ldr	r3, [r6, #12]
 800cefc:	b183      	cbz	r3, 800cf20 <_Balloc+0x50>
 800cefe:	69e3      	ldr	r3, [r4, #28]
 800cf00:	68db      	ldr	r3, [r3, #12]
 800cf02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf06:	b9b8      	cbnz	r0, 800cf38 <_Balloc+0x68>
 800cf08:	2101      	movs	r1, #1
 800cf0a:	fa01 f605 	lsl.w	r6, r1, r5
 800cf0e:	1d72      	adds	r2, r6, #5
 800cf10:	0092      	lsls	r2, r2, #2
 800cf12:	4620      	mov	r0, r4
 800cf14:	f000 fdb8 	bl	800da88 <_calloc_r>
 800cf18:	b160      	cbz	r0, 800cf34 <_Balloc+0x64>
 800cf1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf1e:	e00e      	b.n	800cf3e <_Balloc+0x6e>
 800cf20:	2221      	movs	r2, #33	@ 0x21
 800cf22:	2104      	movs	r1, #4
 800cf24:	4620      	mov	r0, r4
 800cf26:	f000 fdaf 	bl	800da88 <_calloc_r>
 800cf2a:	69e3      	ldr	r3, [r4, #28]
 800cf2c:	60f0      	str	r0, [r6, #12]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d1e4      	bne.n	800cefe <_Balloc+0x2e>
 800cf34:	2000      	movs	r0, #0
 800cf36:	bd70      	pop	{r4, r5, r6, pc}
 800cf38:	6802      	ldr	r2, [r0, #0]
 800cf3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf44:	e7f7      	b.n	800cf36 <_Balloc+0x66>
 800cf46:	bf00      	nop
 800cf48:	0800fc65 	.word	0x0800fc65
 800cf4c:	0800fce5 	.word	0x0800fce5

0800cf50 <_Bfree>:
 800cf50:	b570      	push	{r4, r5, r6, lr}
 800cf52:	69c6      	ldr	r6, [r0, #28]
 800cf54:	4605      	mov	r5, r0
 800cf56:	460c      	mov	r4, r1
 800cf58:	b976      	cbnz	r6, 800cf78 <_Bfree+0x28>
 800cf5a:	2010      	movs	r0, #16
 800cf5c:	f7ff ff02 	bl	800cd64 <malloc>
 800cf60:	4602      	mov	r2, r0
 800cf62:	61e8      	str	r0, [r5, #28]
 800cf64:	b920      	cbnz	r0, 800cf70 <_Bfree+0x20>
 800cf66:	4b09      	ldr	r3, [pc, #36]	@ (800cf8c <_Bfree+0x3c>)
 800cf68:	4809      	ldr	r0, [pc, #36]	@ (800cf90 <_Bfree+0x40>)
 800cf6a:	218f      	movs	r1, #143	@ 0x8f
 800cf6c:	f000 fd6e 	bl	800da4c <__assert_func>
 800cf70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf74:	6006      	str	r6, [r0, #0]
 800cf76:	60c6      	str	r6, [r0, #12]
 800cf78:	b13c      	cbz	r4, 800cf8a <_Bfree+0x3a>
 800cf7a:	69eb      	ldr	r3, [r5, #28]
 800cf7c:	6862      	ldr	r2, [r4, #4]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf84:	6021      	str	r1, [r4, #0]
 800cf86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf8a:	bd70      	pop	{r4, r5, r6, pc}
 800cf8c:	0800fc65 	.word	0x0800fc65
 800cf90:	0800fce5 	.word	0x0800fce5

0800cf94 <__multadd>:
 800cf94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf98:	690d      	ldr	r5, [r1, #16]
 800cf9a:	4607      	mov	r7, r0
 800cf9c:	460c      	mov	r4, r1
 800cf9e:	461e      	mov	r6, r3
 800cfa0:	f101 0c14 	add.w	ip, r1, #20
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	f8dc 3000 	ldr.w	r3, [ip]
 800cfaa:	b299      	uxth	r1, r3
 800cfac:	fb02 6101 	mla	r1, r2, r1, r6
 800cfb0:	0c1e      	lsrs	r6, r3, #16
 800cfb2:	0c0b      	lsrs	r3, r1, #16
 800cfb4:	fb02 3306 	mla	r3, r2, r6, r3
 800cfb8:	b289      	uxth	r1, r1
 800cfba:	3001      	adds	r0, #1
 800cfbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cfc0:	4285      	cmp	r5, r0
 800cfc2:	f84c 1b04 	str.w	r1, [ip], #4
 800cfc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cfca:	dcec      	bgt.n	800cfa6 <__multadd+0x12>
 800cfcc:	b30e      	cbz	r6, 800d012 <__multadd+0x7e>
 800cfce:	68a3      	ldr	r3, [r4, #8]
 800cfd0:	42ab      	cmp	r3, r5
 800cfd2:	dc19      	bgt.n	800d008 <__multadd+0x74>
 800cfd4:	6861      	ldr	r1, [r4, #4]
 800cfd6:	4638      	mov	r0, r7
 800cfd8:	3101      	adds	r1, #1
 800cfda:	f7ff ff79 	bl	800ced0 <_Balloc>
 800cfde:	4680      	mov	r8, r0
 800cfe0:	b928      	cbnz	r0, 800cfee <__multadd+0x5a>
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	4b0c      	ldr	r3, [pc, #48]	@ (800d018 <__multadd+0x84>)
 800cfe6:	480d      	ldr	r0, [pc, #52]	@ (800d01c <__multadd+0x88>)
 800cfe8:	21ba      	movs	r1, #186	@ 0xba
 800cfea:	f000 fd2f 	bl	800da4c <__assert_func>
 800cfee:	6922      	ldr	r2, [r4, #16]
 800cff0:	3202      	adds	r2, #2
 800cff2:	f104 010c 	add.w	r1, r4, #12
 800cff6:	0092      	lsls	r2, r2, #2
 800cff8:	300c      	adds	r0, #12
 800cffa:	f000 fd19 	bl	800da30 <memcpy>
 800cffe:	4621      	mov	r1, r4
 800d000:	4638      	mov	r0, r7
 800d002:	f7ff ffa5 	bl	800cf50 <_Bfree>
 800d006:	4644      	mov	r4, r8
 800d008:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d00c:	3501      	adds	r5, #1
 800d00e:	615e      	str	r6, [r3, #20]
 800d010:	6125      	str	r5, [r4, #16]
 800d012:	4620      	mov	r0, r4
 800d014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d018:	0800fcd4 	.word	0x0800fcd4
 800d01c:	0800fce5 	.word	0x0800fce5

0800d020 <__hi0bits>:
 800d020:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d024:	4603      	mov	r3, r0
 800d026:	bf36      	itet	cc
 800d028:	0403      	lslcc	r3, r0, #16
 800d02a:	2000      	movcs	r0, #0
 800d02c:	2010      	movcc	r0, #16
 800d02e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d032:	bf3c      	itt	cc
 800d034:	021b      	lslcc	r3, r3, #8
 800d036:	3008      	addcc	r0, #8
 800d038:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d03c:	bf3c      	itt	cc
 800d03e:	011b      	lslcc	r3, r3, #4
 800d040:	3004      	addcc	r0, #4
 800d042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d046:	bf3c      	itt	cc
 800d048:	009b      	lslcc	r3, r3, #2
 800d04a:	3002      	addcc	r0, #2
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	db05      	blt.n	800d05c <__hi0bits+0x3c>
 800d050:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d054:	f100 0001 	add.w	r0, r0, #1
 800d058:	bf08      	it	eq
 800d05a:	2020      	moveq	r0, #32
 800d05c:	4770      	bx	lr

0800d05e <__lo0bits>:
 800d05e:	6803      	ldr	r3, [r0, #0]
 800d060:	4602      	mov	r2, r0
 800d062:	f013 0007 	ands.w	r0, r3, #7
 800d066:	d00b      	beq.n	800d080 <__lo0bits+0x22>
 800d068:	07d9      	lsls	r1, r3, #31
 800d06a:	d421      	bmi.n	800d0b0 <__lo0bits+0x52>
 800d06c:	0798      	lsls	r0, r3, #30
 800d06e:	bf49      	itett	mi
 800d070:	085b      	lsrmi	r3, r3, #1
 800d072:	089b      	lsrpl	r3, r3, #2
 800d074:	2001      	movmi	r0, #1
 800d076:	6013      	strmi	r3, [r2, #0]
 800d078:	bf5c      	itt	pl
 800d07a:	6013      	strpl	r3, [r2, #0]
 800d07c:	2002      	movpl	r0, #2
 800d07e:	4770      	bx	lr
 800d080:	b299      	uxth	r1, r3
 800d082:	b909      	cbnz	r1, 800d088 <__lo0bits+0x2a>
 800d084:	0c1b      	lsrs	r3, r3, #16
 800d086:	2010      	movs	r0, #16
 800d088:	b2d9      	uxtb	r1, r3
 800d08a:	b909      	cbnz	r1, 800d090 <__lo0bits+0x32>
 800d08c:	3008      	adds	r0, #8
 800d08e:	0a1b      	lsrs	r3, r3, #8
 800d090:	0719      	lsls	r1, r3, #28
 800d092:	bf04      	itt	eq
 800d094:	091b      	lsreq	r3, r3, #4
 800d096:	3004      	addeq	r0, #4
 800d098:	0799      	lsls	r1, r3, #30
 800d09a:	bf04      	itt	eq
 800d09c:	089b      	lsreq	r3, r3, #2
 800d09e:	3002      	addeq	r0, #2
 800d0a0:	07d9      	lsls	r1, r3, #31
 800d0a2:	d403      	bmi.n	800d0ac <__lo0bits+0x4e>
 800d0a4:	085b      	lsrs	r3, r3, #1
 800d0a6:	f100 0001 	add.w	r0, r0, #1
 800d0aa:	d003      	beq.n	800d0b4 <__lo0bits+0x56>
 800d0ac:	6013      	str	r3, [r2, #0]
 800d0ae:	4770      	bx	lr
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	4770      	bx	lr
 800d0b4:	2020      	movs	r0, #32
 800d0b6:	4770      	bx	lr

0800d0b8 <__i2b>:
 800d0b8:	b510      	push	{r4, lr}
 800d0ba:	460c      	mov	r4, r1
 800d0bc:	2101      	movs	r1, #1
 800d0be:	f7ff ff07 	bl	800ced0 <_Balloc>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	b928      	cbnz	r0, 800d0d2 <__i2b+0x1a>
 800d0c6:	4b05      	ldr	r3, [pc, #20]	@ (800d0dc <__i2b+0x24>)
 800d0c8:	4805      	ldr	r0, [pc, #20]	@ (800d0e0 <__i2b+0x28>)
 800d0ca:	f240 1145 	movw	r1, #325	@ 0x145
 800d0ce:	f000 fcbd 	bl	800da4c <__assert_func>
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	6144      	str	r4, [r0, #20]
 800d0d6:	6103      	str	r3, [r0, #16]
 800d0d8:	bd10      	pop	{r4, pc}
 800d0da:	bf00      	nop
 800d0dc:	0800fcd4 	.word	0x0800fcd4
 800d0e0:	0800fce5 	.word	0x0800fce5

0800d0e4 <__multiply>:
 800d0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e8:	4614      	mov	r4, r2
 800d0ea:	690a      	ldr	r2, [r1, #16]
 800d0ec:	6923      	ldr	r3, [r4, #16]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	bfa8      	it	ge
 800d0f2:	4623      	movge	r3, r4
 800d0f4:	460f      	mov	r7, r1
 800d0f6:	bfa4      	itt	ge
 800d0f8:	460c      	movge	r4, r1
 800d0fa:	461f      	movge	r7, r3
 800d0fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d100:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d104:	68a3      	ldr	r3, [r4, #8]
 800d106:	6861      	ldr	r1, [r4, #4]
 800d108:	eb0a 0609 	add.w	r6, sl, r9
 800d10c:	42b3      	cmp	r3, r6
 800d10e:	b085      	sub	sp, #20
 800d110:	bfb8      	it	lt
 800d112:	3101      	addlt	r1, #1
 800d114:	f7ff fedc 	bl	800ced0 <_Balloc>
 800d118:	b930      	cbnz	r0, 800d128 <__multiply+0x44>
 800d11a:	4602      	mov	r2, r0
 800d11c:	4b44      	ldr	r3, [pc, #272]	@ (800d230 <__multiply+0x14c>)
 800d11e:	4845      	ldr	r0, [pc, #276]	@ (800d234 <__multiply+0x150>)
 800d120:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d124:	f000 fc92 	bl	800da4c <__assert_func>
 800d128:	f100 0514 	add.w	r5, r0, #20
 800d12c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d130:	462b      	mov	r3, r5
 800d132:	2200      	movs	r2, #0
 800d134:	4543      	cmp	r3, r8
 800d136:	d321      	bcc.n	800d17c <__multiply+0x98>
 800d138:	f107 0114 	add.w	r1, r7, #20
 800d13c:	f104 0214 	add.w	r2, r4, #20
 800d140:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d144:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d148:	9302      	str	r3, [sp, #8]
 800d14a:	1b13      	subs	r3, r2, r4
 800d14c:	3b15      	subs	r3, #21
 800d14e:	f023 0303 	bic.w	r3, r3, #3
 800d152:	3304      	adds	r3, #4
 800d154:	f104 0715 	add.w	r7, r4, #21
 800d158:	42ba      	cmp	r2, r7
 800d15a:	bf38      	it	cc
 800d15c:	2304      	movcc	r3, #4
 800d15e:	9301      	str	r3, [sp, #4]
 800d160:	9b02      	ldr	r3, [sp, #8]
 800d162:	9103      	str	r1, [sp, #12]
 800d164:	428b      	cmp	r3, r1
 800d166:	d80c      	bhi.n	800d182 <__multiply+0x9e>
 800d168:	2e00      	cmp	r6, #0
 800d16a:	dd03      	ble.n	800d174 <__multiply+0x90>
 800d16c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d170:	2b00      	cmp	r3, #0
 800d172:	d05b      	beq.n	800d22c <__multiply+0x148>
 800d174:	6106      	str	r6, [r0, #16]
 800d176:	b005      	add	sp, #20
 800d178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d17c:	f843 2b04 	str.w	r2, [r3], #4
 800d180:	e7d8      	b.n	800d134 <__multiply+0x50>
 800d182:	f8b1 a000 	ldrh.w	sl, [r1]
 800d186:	f1ba 0f00 	cmp.w	sl, #0
 800d18a:	d024      	beq.n	800d1d6 <__multiply+0xf2>
 800d18c:	f104 0e14 	add.w	lr, r4, #20
 800d190:	46a9      	mov	r9, r5
 800d192:	f04f 0c00 	mov.w	ip, #0
 800d196:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d19a:	f8d9 3000 	ldr.w	r3, [r9]
 800d19e:	fa1f fb87 	uxth.w	fp, r7
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d1a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d1ac:	f8d9 7000 	ldr.w	r7, [r9]
 800d1b0:	4463      	add	r3, ip
 800d1b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d1b6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d1ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d1c4:	4572      	cmp	r2, lr
 800d1c6:	f849 3b04 	str.w	r3, [r9], #4
 800d1ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d1ce:	d8e2      	bhi.n	800d196 <__multiply+0xb2>
 800d1d0:	9b01      	ldr	r3, [sp, #4]
 800d1d2:	f845 c003 	str.w	ip, [r5, r3]
 800d1d6:	9b03      	ldr	r3, [sp, #12]
 800d1d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d1dc:	3104      	adds	r1, #4
 800d1de:	f1b9 0f00 	cmp.w	r9, #0
 800d1e2:	d021      	beq.n	800d228 <__multiply+0x144>
 800d1e4:	682b      	ldr	r3, [r5, #0]
 800d1e6:	f104 0c14 	add.w	ip, r4, #20
 800d1ea:	46ae      	mov	lr, r5
 800d1ec:	f04f 0a00 	mov.w	sl, #0
 800d1f0:	f8bc b000 	ldrh.w	fp, [ip]
 800d1f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d1f8:	fb09 770b 	mla	r7, r9, fp, r7
 800d1fc:	4457      	add	r7, sl
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d204:	f84e 3b04 	str.w	r3, [lr], #4
 800d208:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d20c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d210:	f8be 3000 	ldrh.w	r3, [lr]
 800d214:	fb09 330a 	mla	r3, r9, sl, r3
 800d218:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d21c:	4562      	cmp	r2, ip
 800d21e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d222:	d8e5      	bhi.n	800d1f0 <__multiply+0x10c>
 800d224:	9f01      	ldr	r7, [sp, #4]
 800d226:	51eb      	str	r3, [r5, r7]
 800d228:	3504      	adds	r5, #4
 800d22a:	e799      	b.n	800d160 <__multiply+0x7c>
 800d22c:	3e01      	subs	r6, #1
 800d22e:	e79b      	b.n	800d168 <__multiply+0x84>
 800d230:	0800fcd4 	.word	0x0800fcd4
 800d234:	0800fce5 	.word	0x0800fce5

0800d238 <__pow5mult>:
 800d238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d23c:	4615      	mov	r5, r2
 800d23e:	f012 0203 	ands.w	r2, r2, #3
 800d242:	4607      	mov	r7, r0
 800d244:	460e      	mov	r6, r1
 800d246:	d007      	beq.n	800d258 <__pow5mult+0x20>
 800d248:	4c25      	ldr	r4, [pc, #148]	@ (800d2e0 <__pow5mult+0xa8>)
 800d24a:	3a01      	subs	r2, #1
 800d24c:	2300      	movs	r3, #0
 800d24e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d252:	f7ff fe9f 	bl	800cf94 <__multadd>
 800d256:	4606      	mov	r6, r0
 800d258:	10ad      	asrs	r5, r5, #2
 800d25a:	d03d      	beq.n	800d2d8 <__pow5mult+0xa0>
 800d25c:	69fc      	ldr	r4, [r7, #28]
 800d25e:	b97c      	cbnz	r4, 800d280 <__pow5mult+0x48>
 800d260:	2010      	movs	r0, #16
 800d262:	f7ff fd7f 	bl	800cd64 <malloc>
 800d266:	4602      	mov	r2, r0
 800d268:	61f8      	str	r0, [r7, #28]
 800d26a:	b928      	cbnz	r0, 800d278 <__pow5mult+0x40>
 800d26c:	4b1d      	ldr	r3, [pc, #116]	@ (800d2e4 <__pow5mult+0xac>)
 800d26e:	481e      	ldr	r0, [pc, #120]	@ (800d2e8 <__pow5mult+0xb0>)
 800d270:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d274:	f000 fbea 	bl	800da4c <__assert_func>
 800d278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d27c:	6004      	str	r4, [r0, #0]
 800d27e:	60c4      	str	r4, [r0, #12]
 800d280:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d284:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d288:	b94c      	cbnz	r4, 800d29e <__pow5mult+0x66>
 800d28a:	f240 2171 	movw	r1, #625	@ 0x271
 800d28e:	4638      	mov	r0, r7
 800d290:	f7ff ff12 	bl	800d0b8 <__i2b>
 800d294:	2300      	movs	r3, #0
 800d296:	f8c8 0008 	str.w	r0, [r8, #8]
 800d29a:	4604      	mov	r4, r0
 800d29c:	6003      	str	r3, [r0, #0]
 800d29e:	f04f 0900 	mov.w	r9, #0
 800d2a2:	07eb      	lsls	r3, r5, #31
 800d2a4:	d50a      	bpl.n	800d2bc <__pow5mult+0x84>
 800d2a6:	4631      	mov	r1, r6
 800d2a8:	4622      	mov	r2, r4
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	f7ff ff1a 	bl	800d0e4 <__multiply>
 800d2b0:	4631      	mov	r1, r6
 800d2b2:	4680      	mov	r8, r0
 800d2b4:	4638      	mov	r0, r7
 800d2b6:	f7ff fe4b 	bl	800cf50 <_Bfree>
 800d2ba:	4646      	mov	r6, r8
 800d2bc:	106d      	asrs	r5, r5, #1
 800d2be:	d00b      	beq.n	800d2d8 <__pow5mult+0xa0>
 800d2c0:	6820      	ldr	r0, [r4, #0]
 800d2c2:	b938      	cbnz	r0, 800d2d4 <__pow5mult+0x9c>
 800d2c4:	4622      	mov	r2, r4
 800d2c6:	4621      	mov	r1, r4
 800d2c8:	4638      	mov	r0, r7
 800d2ca:	f7ff ff0b 	bl	800d0e4 <__multiply>
 800d2ce:	6020      	str	r0, [r4, #0]
 800d2d0:	f8c0 9000 	str.w	r9, [r0]
 800d2d4:	4604      	mov	r4, r0
 800d2d6:	e7e4      	b.n	800d2a2 <__pow5mult+0x6a>
 800d2d8:	4630      	mov	r0, r6
 800d2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2de:	bf00      	nop
 800d2e0:	0800fd40 	.word	0x0800fd40
 800d2e4:	0800fc65 	.word	0x0800fc65
 800d2e8:	0800fce5 	.word	0x0800fce5

0800d2ec <__lshift>:
 800d2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f0:	460c      	mov	r4, r1
 800d2f2:	6849      	ldr	r1, [r1, #4]
 800d2f4:	6923      	ldr	r3, [r4, #16]
 800d2f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2fa:	68a3      	ldr	r3, [r4, #8]
 800d2fc:	4607      	mov	r7, r0
 800d2fe:	4691      	mov	r9, r2
 800d300:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d304:	f108 0601 	add.w	r6, r8, #1
 800d308:	42b3      	cmp	r3, r6
 800d30a:	db0b      	blt.n	800d324 <__lshift+0x38>
 800d30c:	4638      	mov	r0, r7
 800d30e:	f7ff fddf 	bl	800ced0 <_Balloc>
 800d312:	4605      	mov	r5, r0
 800d314:	b948      	cbnz	r0, 800d32a <__lshift+0x3e>
 800d316:	4602      	mov	r2, r0
 800d318:	4b28      	ldr	r3, [pc, #160]	@ (800d3bc <__lshift+0xd0>)
 800d31a:	4829      	ldr	r0, [pc, #164]	@ (800d3c0 <__lshift+0xd4>)
 800d31c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d320:	f000 fb94 	bl	800da4c <__assert_func>
 800d324:	3101      	adds	r1, #1
 800d326:	005b      	lsls	r3, r3, #1
 800d328:	e7ee      	b.n	800d308 <__lshift+0x1c>
 800d32a:	2300      	movs	r3, #0
 800d32c:	f100 0114 	add.w	r1, r0, #20
 800d330:	f100 0210 	add.w	r2, r0, #16
 800d334:	4618      	mov	r0, r3
 800d336:	4553      	cmp	r3, sl
 800d338:	db33      	blt.n	800d3a2 <__lshift+0xb6>
 800d33a:	6920      	ldr	r0, [r4, #16]
 800d33c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d340:	f104 0314 	add.w	r3, r4, #20
 800d344:	f019 091f 	ands.w	r9, r9, #31
 800d348:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d34c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d350:	d02b      	beq.n	800d3aa <__lshift+0xbe>
 800d352:	f1c9 0e20 	rsb	lr, r9, #32
 800d356:	468a      	mov	sl, r1
 800d358:	2200      	movs	r2, #0
 800d35a:	6818      	ldr	r0, [r3, #0]
 800d35c:	fa00 f009 	lsl.w	r0, r0, r9
 800d360:	4310      	orrs	r0, r2
 800d362:	f84a 0b04 	str.w	r0, [sl], #4
 800d366:	f853 2b04 	ldr.w	r2, [r3], #4
 800d36a:	459c      	cmp	ip, r3
 800d36c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d370:	d8f3      	bhi.n	800d35a <__lshift+0x6e>
 800d372:	ebac 0304 	sub.w	r3, ip, r4
 800d376:	3b15      	subs	r3, #21
 800d378:	f023 0303 	bic.w	r3, r3, #3
 800d37c:	3304      	adds	r3, #4
 800d37e:	f104 0015 	add.w	r0, r4, #21
 800d382:	4584      	cmp	ip, r0
 800d384:	bf38      	it	cc
 800d386:	2304      	movcc	r3, #4
 800d388:	50ca      	str	r2, [r1, r3]
 800d38a:	b10a      	cbz	r2, 800d390 <__lshift+0xa4>
 800d38c:	f108 0602 	add.w	r6, r8, #2
 800d390:	3e01      	subs	r6, #1
 800d392:	4638      	mov	r0, r7
 800d394:	612e      	str	r6, [r5, #16]
 800d396:	4621      	mov	r1, r4
 800d398:	f7ff fdda 	bl	800cf50 <_Bfree>
 800d39c:	4628      	mov	r0, r5
 800d39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	e7c5      	b.n	800d336 <__lshift+0x4a>
 800d3aa:	3904      	subs	r1, #4
 800d3ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3b4:	459c      	cmp	ip, r3
 800d3b6:	d8f9      	bhi.n	800d3ac <__lshift+0xc0>
 800d3b8:	e7ea      	b.n	800d390 <__lshift+0xa4>
 800d3ba:	bf00      	nop
 800d3bc:	0800fcd4 	.word	0x0800fcd4
 800d3c0:	0800fce5 	.word	0x0800fce5

0800d3c4 <__mcmp>:
 800d3c4:	690a      	ldr	r2, [r1, #16]
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	6900      	ldr	r0, [r0, #16]
 800d3ca:	1a80      	subs	r0, r0, r2
 800d3cc:	b530      	push	{r4, r5, lr}
 800d3ce:	d10e      	bne.n	800d3ee <__mcmp+0x2a>
 800d3d0:	3314      	adds	r3, #20
 800d3d2:	3114      	adds	r1, #20
 800d3d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d3d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d3dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d3e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d3e4:	4295      	cmp	r5, r2
 800d3e6:	d003      	beq.n	800d3f0 <__mcmp+0x2c>
 800d3e8:	d205      	bcs.n	800d3f6 <__mcmp+0x32>
 800d3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ee:	bd30      	pop	{r4, r5, pc}
 800d3f0:	42a3      	cmp	r3, r4
 800d3f2:	d3f3      	bcc.n	800d3dc <__mcmp+0x18>
 800d3f4:	e7fb      	b.n	800d3ee <__mcmp+0x2a>
 800d3f6:	2001      	movs	r0, #1
 800d3f8:	e7f9      	b.n	800d3ee <__mcmp+0x2a>
	...

0800d3fc <__mdiff>:
 800d3fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d400:	4689      	mov	r9, r1
 800d402:	4606      	mov	r6, r0
 800d404:	4611      	mov	r1, r2
 800d406:	4648      	mov	r0, r9
 800d408:	4614      	mov	r4, r2
 800d40a:	f7ff ffdb 	bl	800d3c4 <__mcmp>
 800d40e:	1e05      	subs	r5, r0, #0
 800d410:	d112      	bne.n	800d438 <__mdiff+0x3c>
 800d412:	4629      	mov	r1, r5
 800d414:	4630      	mov	r0, r6
 800d416:	f7ff fd5b 	bl	800ced0 <_Balloc>
 800d41a:	4602      	mov	r2, r0
 800d41c:	b928      	cbnz	r0, 800d42a <__mdiff+0x2e>
 800d41e:	4b3f      	ldr	r3, [pc, #252]	@ (800d51c <__mdiff+0x120>)
 800d420:	f240 2137 	movw	r1, #567	@ 0x237
 800d424:	483e      	ldr	r0, [pc, #248]	@ (800d520 <__mdiff+0x124>)
 800d426:	f000 fb11 	bl	800da4c <__assert_func>
 800d42a:	2301      	movs	r3, #1
 800d42c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d430:	4610      	mov	r0, r2
 800d432:	b003      	add	sp, #12
 800d434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d438:	bfbc      	itt	lt
 800d43a:	464b      	movlt	r3, r9
 800d43c:	46a1      	movlt	r9, r4
 800d43e:	4630      	mov	r0, r6
 800d440:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d444:	bfba      	itte	lt
 800d446:	461c      	movlt	r4, r3
 800d448:	2501      	movlt	r5, #1
 800d44a:	2500      	movge	r5, #0
 800d44c:	f7ff fd40 	bl	800ced0 <_Balloc>
 800d450:	4602      	mov	r2, r0
 800d452:	b918      	cbnz	r0, 800d45c <__mdiff+0x60>
 800d454:	4b31      	ldr	r3, [pc, #196]	@ (800d51c <__mdiff+0x120>)
 800d456:	f240 2145 	movw	r1, #581	@ 0x245
 800d45a:	e7e3      	b.n	800d424 <__mdiff+0x28>
 800d45c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d460:	6926      	ldr	r6, [r4, #16]
 800d462:	60c5      	str	r5, [r0, #12]
 800d464:	f109 0310 	add.w	r3, r9, #16
 800d468:	f109 0514 	add.w	r5, r9, #20
 800d46c:	f104 0e14 	add.w	lr, r4, #20
 800d470:	f100 0b14 	add.w	fp, r0, #20
 800d474:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d478:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d47c:	9301      	str	r3, [sp, #4]
 800d47e:	46d9      	mov	r9, fp
 800d480:	f04f 0c00 	mov.w	ip, #0
 800d484:	9b01      	ldr	r3, [sp, #4]
 800d486:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d48a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d48e:	9301      	str	r3, [sp, #4]
 800d490:	fa1f f38a 	uxth.w	r3, sl
 800d494:	4619      	mov	r1, r3
 800d496:	b283      	uxth	r3, r0
 800d498:	1acb      	subs	r3, r1, r3
 800d49a:	0c00      	lsrs	r0, r0, #16
 800d49c:	4463      	add	r3, ip
 800d49e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d4a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d4ac:	4576      	cmp	r6, lr
 800d4ae:	f849 3b04 	str.w	r3, [r9], #4
 800d4b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4b6:	d8e5      	bhi.n	800d484 <__mdiff+0x88>
 800d4b8:	1b33      	subs	r3, r6, r4
 800d4ba:	3b15      	subs	r3, #21
 800d4bc:	f023 0303 	bic.w	r3, r3, #3
 800d4c0:	3415      	adds	r4, #21
 800d4c2:	3304      	adds	r3, #4
 800d4c4:	42a6      	cmp	r6, r4
 800d4c6:	bf38      	it	cc
 800d4c8:	2304      	movcc	r3, #4
 800d4ca:	441d      	add	r5, r3
 800d4cc:	445b      	add	r3, fp
 800d4ce:	461e      	mov	r6, r3
 800d4d0:	462c      	mov	r4, r5
 800d4d2:	4544      	cmp	r4, r8
 800d4d4:	d30e      	bcc.n	800d4f4 <__mdiff+0xf8>
 800d4d6:	f108 0103 	add.w	r1, r8, #3
 800d4da:	1b49      	subs	r1, r1, r5
 800d4dc:	f021 0103 	bic.w	r1, r1, #3
 800d4e0:	3d03      	subs	r5, #3
 800d4e2:	45a8      	cmp	r8, r5
 800d4e4:	bf38      	it	cc
 800d4e6:	2100      	movcc	r1, #0
 800d4e8:	440b      	add	r3, r1
 800d4ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4ee:	b191      	cbz	r1, 800d516 <__mdiff+0x11a>
 800d4f0:	6117      	str	r7, [r2, #16]
 800d4f2:	e79d      	b.n	800d430 <__mdiff+0x34>
 800d4f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d4f8:	46e6      	mov	lr, ip
 800d4fa:	0c08      	lsrs	r0, r1, #16
 800d4fc:	fa1c fc81 	uxtah	ip, ip, r1
 800d500:	4471      	add	r1, lr
 800d502:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d506:	b289      	uxth	r1, r1
 800d508:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d50c:	f846 1b04 	str.w	r1, [r6], #4
 800d510:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d514:	e7dd      	b.n	800d4d2 <__mdiff+0xd6>
 800d516:	3f01      	subs	r7, #1
 800d518:	e7e7      	b.n	800d4ea <__mdiff+0xee>
 800d51a:	bf00      	nop
 800d51c:	0800fcd4 	.word	0x0800fcd4
 800d520:	0800fce5 	.word	0x0800fce5

0800d524 <__d2b>:
 800d524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d528:	460f      	mov	r7, r1
 800d52a:	2101      	movs	r1, #1
 800d52c:	ec59 8b10 	vmov	r8, r9, d0
 800d530:	4616      	mov	r6, r2
 800d532:	f7ff fccd 	bl	800ced0 <_Balloc>
 800d536:	4604      	mov	r4, r0
 800d538:	b930      	cbnz	r0, 800d548 <__d2b+0x24>
 800d53a:	4602      	mov	r2, r0
 800d53c:	4b23      	ldr	r3, [pc, #140]	@ (800d5cc <__d2b+0xa8>)
 800d53e:	4824      	ldr	r0, [pc, #144]	@ (800d5d0 <__d2b+0xac>)
 800d540:	f240 310f 	movw	r1, #783	@ 0x30f
 800d544:	f000 fa82 	bl	800da4c <__assert_func>
 800d548:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d54c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d550:	b10d      	cbz	r5, 800d556 <__d2b+0x32>
 800d552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d556:	9301      	str	r3, [sp, #4]
 800d558:	f1b8 0300 	subs.w	r3, r8, #0
 800d55c:	d023      	beq.n	800d5a6 <__d2b+0x82>
 800d55e:	4668      	mov	r0, sp
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	f7ff fd7c 	bl	800d05e <__lo0bits>
 800d566:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d56a:	b1d0      	cbz	r0, 800d5a2 <__d2b+0x7e>
 800d56c:	f1c0 0320 	rsb	r3, r0, #32
 800d570:	fa02 f303 	lsl.w	r3, r2, r3
 800d574:	430b      	orrs	r3, r1
 800d576:	40c2      	lsrs	r2, r0
 800d578:	6163      	str	r3, [r4, #20]
 800d57a:	9201      	str	r2, [sp, #4]
 800d57c:	9b01      	ldr	r3, [sp, #4]
 800d57e:	61a3      	str	r3, [r4, #24]
 800d580:	2b00      	cmp	r3, #0
 800d582:	bf0c      	ite	eq
 800d584:	2201      	moveq	r2, #1
 800d586:	2202      	movne	r2, #2
 800d588:	6122      	str	r2, [r4, #16]
 800d58a:	b1a5      	cbz	r5, 800d5b6 <__d2b+0x92>
 800d58c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d590:	4405      	add	r5, r0
 800d592:	603d      	str	r5, [r7, #0]
 800d594:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d598:	6030      	str	r0, [r6, #0]
 800d59a:	4620      	mov	r0, r4
 800d59c:	b003      	add	sp, #12
 800d59e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5a2:	6161      	str	r1, [r4, #20]
 800d5a4:	e7ea      	b.n	800d57c <__d2b+0x58>
 800d5a6:	a801      	add	r0, sp, #4
 800d5a8:	f7ff fd59 	bl	800d05e <__lo0bits>
 800d5ac:	9b01      	ldr	r3, [sp, #4]
 800d5ae:	6163      	str	r3, [r4, #20]
 800d5b0:	3020      	adds	r0, #32
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	e7e8      	b.n	800d588 <__d2b+0x64>
 800d5b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d5ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d5be:	6038      	str	r0, [r7, #0]
 800d5c0:	6918      	ldr	r0, [r3, #16]
 800d5c2:	f7ff fd2d 	bl	800d020 <__hi0bits>
 800d5c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d5ca:	e7e5      	b.n	800d598 <__d2b+0x74>
 800d5cc:	0800fcd4 	.word	0x0800fcd4
 800d5d0:	0800fce5 	.word	0x0800fce5

0800d5d4 <__ssputs_r>:
 800d5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d8:	688e      	ldr	r6, [r1, #8]
 800d5da:	461f      	mov	r7, r3
 800d5dc:	42be      	cmp	r6, r7
 800d5de:	680b      	ldr	r3, [r1, #0]
 800d5e0:	4682      	mov	sl, r0
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	4690      	mov	r8, r2
 800d5e6:	d82d      	bhi.n	800d644 <__ssputs_r+0x70>
 800d5e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d5f0:	d026      	beq.n	800d640 <__ssputs_r+0x6c>
 800d5f2:	6965      	ldr	r5, [r4, #20]
 800d5f4:	6909      	ldr	r1, [r1, #16]
 800d5f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5fa:	eba3 0901 	sub.w	r9, r3, r1
 800d5fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d602:	1c7b      	adds	r3, r7, #1
 800d604:	444b      	add	r3, r9
 800d606:	106d      	asrs	r5, r5, #1
 800d608:	429d      	cmp	r5, r3
 800d60a:	bf38      	it	cc
 800d60c:	461d      	movcc	r5, r3
 800d60e:	0553      	lsls	r3, r2, #21
 800d610:	d527      	bpl.n	800d662 <__ssputs_r+0x8e>
 800d612:	4629      	mov	r1, r5
 800d614:	f7ff fbd0 	bl	800cdb8 <_malloc_r>
 800d618:	4606      	mov	r6, r0
 800d61a:	b360      	cbz	r0, 800d676 <__ssputs_r+0xa2>
 800d61c:	6921      	ldr	r1, [r4, #16]
 800d61e:	464a      	mov	r2, r9
 800d620:	f000 fa06 	bl	800da30 <memcpy>
 800d624:	89a3      	ldrh	r3, [r4, #12]
 800d626:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d62a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d62e:	81a3      	strh	r3, [r4, #12]
 800d630:	6126      	str	r6, [r4, #16]
 800d632:	6165      	str	r5, [r4, #20]
 800d634:	444e      	add	r6, r9
 800d636:	eba5 0509 	sub.w	r5, r5, r9
 800d63a:	6026      	str	r6, [r4, #0]
 800d63c:	60a5      	str	r5, [r4, #8]
 800d63e:	463e      	mov	r6, r7
 800d640:	42be      	cmp	r6, r7
 800d642:	d900      	bls.n	800d646 <__ssputs_r+0x72>
 800d644:	463e      	mov	r6, r7
 800d646:	6820      	ldr	r0, [r4, #0]
 800d648:	4632      	mov	r2, r6
 800d64a:	4641      	mov	r1, r8
 800d64c:	f000 f9c6 	bl	800d9dc <memmove>
 800d650:	68a3      	ldr	r3, [r4, #8]
 800d652:	1b9b      	subs	r3, r3, r6
 800d654:	60a3      	str	r3, [r4, #8]
 800d656:	6823      	ldr	r3, [r4, #0]
 800d658:	4433      	add	r3, r6
 800d65a:	6023      	str	r3, [r4, #0]
 800d65c:	2000      	movs	r0, #0
 800d65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d662:	462a      	mov	r2, r5
 800d664:	f000 fa36 	bl	800dad4 <_realloc_r>
 800d668:	4606      	mov	r6, r0
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d1e0      	bne.n	800d630 <__ssputs_r+0x5c>
 800d66e:	6921      	ldr	r1, [r4, #16]
 800d670:	4650      	mov	r0, sl
 800d672:	f7ff fb2d 	bl	800ccd0 <_free_r>
 800d676:	230c      	movs	r3, #12
 800d678:	f8ca 3000 	str.w	r3, [sl]
 800d67c:	89a3      	ldrh	r3, [r4, #12]
 800d67e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d682:	81a3      	strh	r3, [r4, #12]
 800d684:	f04f 30ff 	mov.w	r0, #4294967295
 800d688:	e7e9      	b.n	800d65e <__ssputs_r+0x8a>
	...

0800d68c <_svfiprintf_r>:
 800d68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d690:	4698      	mov	r8, r3
 800d692:	898b      	ldrh	r3, [r1, #12]
 800d694:	061b      	lsls	r3, r3, #24
 800d696:	b09d      	sub	sp, #116	@ 0x74
 800d698:	4607      	mov	r7, r0
 800d69a:	460d      	mov	r5, r1
 800d69c:	4614      	mov	r4, r2
 800d69e:	d510      	bpl.n	800d6c2 <_svfiprintf_r+0x36>
 800d6a0:	690b      	ldr	r3, [r1, #16]
 800d6a2:	b973      	cbnz	r3, 800d6c2 <_svfiprintf_r+0x36>
 800d6a4:	2140      	movs	r1, #64	@ 0x40
 800d6a6:	f7ff fb87 	bl	800cdb8 <_malloc_r>
 800d6aa:	6028      	str	r0, [r5, #0]
 800d6ac:	6128      	str	r0, [r5, #16]
 800d6ae:	b930      	cbnz	r0, 800d6be <_svfiprintf_r+0x32>
 800d6b0:	230c      	movs	r3, #12
 800d6b2:	603b      	str	r3, [r7, #0]
 800d6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b8:	b01d      	add	sp, #116	@ 0x74
 800d6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6be:	2340      	movs	r3, #64	@ 0x40
 800d6c0:	616b      	str	r3, [r5, #20]
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6c6:	2320      	movs	r3, #32
 800d6c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6d0:	2330      	movs	r3, #48	@ 0x30
 800d6d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d870 <_svfiprintf_r+0x1e4>
 800d6d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6da:	f04f 0901 	mov.w	r9, #1
 800d6de:	4623      	mov	r3, r4
 800d6e0:	469a      	mov	sl, r3
 800d6e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6e6:	b10a      	cbz	r2, 800d6ec <_svfiprintf_r+0x60>
 800d6e8:	2a25      	cmp	r2, #37	@ 0x25
 800d6ea:	d1f9      	bne.n	800d6e0 <_svfiprintf_r+0x54>
 800d6ec:	ebba 0b04 	subs.w	fp, sl, r4
 800d6f0:	d00b      	beq.n	800d70a <_svfiprintf_r+0x7e>
 800d6f2:	465b      	mov	r3, fp
 800d6f4:	4622      	mov	r2, r4
 800d6f6:	4629      	mov	r1, r5
 800d6f8:	4638      	mov	r0, r7
 800d6fa:	f7ff ff6b 	bl	800d5d4 <__ssputs_r>
 800d6fe:	3001      	adds	r0, #1
 800d700:	f000 80a7 	beq.w	800d852 <_svfiprintf_r+0x1c6>
 800d704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d706:	445a      	add	r2, fp
 800d708:	9209      	str	r2, [sp, #36]	@ 0x24
 800d70a:	f89a 3000 	ldrb.w	r3, [sl]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f000 809f 	beq.w	800d852 <_svfiprintf_r+0x1c6>
 800d714:	2300      	movs	r3, #0
 800d716:	f04f 32ff 	mov.w	r2, #4294967295
 800d71a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d71e:	f10a 0a01 	add.w	sl, sl, #1
 800d722:	9304      	str	r3, [sp, #16]
 800d724:	9307      	str	r3, [sp, #28]
 800d726:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d72a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d72c:	4654      	mov	r4, sl
 800d72e:	2205      	movs	r2, #5
 800d730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d734:	484e      	ldr	r0, [pc, #312]	@ (800d870 <_svfiprintf_r+0x1e4>)
 800d736:	f7f2 fd5b 	bl	80001f0 <memchr>
 800d73a:	9a04      	ldr	r2, [sp, #16]
 800d73c:	b9d8      	cbnz	r0, 800d776 <_svfiprintf_r+0xea>
 800d73e:	06d0      	lsls	r0, r2, #27
 800d740:	bf44      	itt	mi
 800d742:	2320      	movmi	r3, #32
 800d744:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d748:	0711      	lsls	r1, r2, #28
 800d74a:	bf44      	itt	mi
 800d74c:	232b      	movmi	r3, #43	@ 0x2b
 800d74e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d752:	f89a 3000 	ldrb.w	r3, [sl]
 800d756:	2b2a      	cmp	r3, #42	@ 0x2a
 800d758:	d015      	beq.n	800d786 <_svfiprintf_r+0xfa>
 800d75a:	9a07      	ldr	r2, [sp, #28]
 800d75c:	4654      	mov	r4, sl
 800d75e:	2000      	movs	r0, #0
 800d760:	f04f 0c0a 	mov.w	ip, #10
 800d764:	4621      	mov	r1, r4
 800d766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d76a:	3b30      	subs	r3, #48	@ 0x30
 800d76c:	2b09      	cmp	r3, #9
 800d76e:	d94b      	bls.n	800d808 <_svfiprintf_r+0x17c>
 800d770:	b1b0      	cbz	r0, 800d7a0 <_svfiprintf_r+0x114>
 800d772:	9207      	str	r2, [sp, #28]
 800d774:	e014      	b.n	800d7a0 <_svfiprintf_r+0x114>
 800d776:	eba0 0308 	sub.w	r3, r0, r8
 800d77a:	fa09 f303 	lsl.w	r3, r9, r3
 800d77e:	4313      	orrs	r3, r2
 800d780:	9304      	str	r3, [sp, #16]
 800d782:	46a2      	mov	sl, r4
 800d784:	e7d2      	b.n	800d72c <_svfiprintf_r+0xa0>
 800d786:	9b03      	ldr	r3, [sp, #12]
 800d788:	1d19      	adds	r1, r3, #4
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	9103      	str	r1, [sp, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	bfbb      	ittet	lt
 800d792:	425b      	neglt	r3, r3
 800d794:	f042 0202 	orrlt.w	r2, r2, #2
 800d798:	9307      	strge	r3, [sp, #28]
 800d79a:	9307      	strlt	r3, [sp, #28]
 800d79c:	bfb8      	it	lt
 800d79e:	9204      	strlt	r2, [sp, #16]
 800d7a0:	7823      	ldrb	r3, [r4, #0]
 800d7a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7a4:	d10a      	bne.n	800d7bc <_svfiprintf_r+0x130>
 800d7a6:	7863      	ldrb	r3, [r4, #1]
 800d7a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7aa:	d132      	bne.n	800d812 <_svfiprintf_r+0x186>
 800d7ac:	9b03      	ldr	r3, [sp, #12]
 800d7ae:	1d1a      	adds	r2, r3, #4
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	9203      	str	r2, [sp, #12]
 800d7b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7b8:	3402      	adds	r4, #2
 800d7ba:	9305      	str	r3, [sp, #20]
 800d7bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d880 <_svfiprintf_r+0x1f4>
 800d7c0:	7821      	ldrb	r1, [r4, #0]
 800d7c2:	2203      	movs	r2, #3
 800d7c4:	4650      	mov	r0, sl
 800d7c6:	f7f2 fd13 	bl	80001f0 <memchr>
 800d7ca:	b138      	cbz	r0, 800d7dc <_svfiprintf_r+0x150>
 800d7cc:	9b04      	ldr	r3, [sp, #16]
 800d7ce:	eba0 000a 	sub.w	r0, r0, sl
 800d7d2:	2240      	movs	r2, #64	@ 0x40
 800d7d4:	4082      	lsls	r2, r0
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	3401      	adds	r4, #1
 800d7da:	9304      	str	r3, [sp, #16]
 800d7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7e0:	4824      	ldr	r0, [pc, #144]	@ (800d874 <_svfiprintf_r+0x1e8>)
 800d7e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7e6:	2206      	movs	r2, #6
 800d7e8:	f7f2 fd02 	bl	80001f0 <memchr>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d036      	beq.n	800d85e <_svfiprintf_r+0x1d2>
 800d7f0:	4b21      	ldr	r3, [pc, #132]	@ (800d878 <_svfiprintf_r+0x1ec>)
 800d7f2:	bb1b      	cbnz	r3, 800d83c <_svfiprintf_r+0x1b0>
 800d7f4:	9b03      	ldr	r3, [sp, #12]
 800d7f6:	3307      	adds	r3, #7
 800d7f8:	f023 0307 	bic.w	r3, r3, #7
 800d7fc:	3308      	adds	r3, #8
 800d7fe:	9303      	str	r3, [sp, #12]
 800d800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d802:	4433      	add	r3, r6
 800d804:	9309      	str	r3, [sp, #36]	@ 0x24
 800d806:	e76a      	b.n	800d6de <_svfiprintf_r+0x52>
 800d808:	fb0c 3202 	mla	r2, ip, r2, r3
 800d80c:	460c      	mov	r4, r1
 800d80e:	2001      	movs	r0, #1
 800d810:	e7a8      	b.n	800d764 <_svfiprintf_r+0xd8>
 800d812:	2300      	movs	r3, #0
 800d814:	3401      	adds	r4, #1
 800d816:	9305      	str	r3, [sp, #20]
 800d818:	4619      	mov	r1, r3
 800d81a:	f04f 0c0a 	mov.w	ip, #10
 800d81e:	4620      	mov	r0, r4
 800d820:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d824:	3a30      	subs	r2, #48	@ 0x30
 800d826:	2a09      	cmp	r2, #9
 800d828:	d903      	bls.n	800d832 <_svfiprintf_r+0x1a6>
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d0c6      	beq.n	800d7bc <_svfiprintf_r+0x130>
 800d82e:	9105      	str	r1, [sp, #20]
 800d830:	e7c4      	b.n	800d7bc <_svfiprintf_r+0x130>
 800d832:	fb0c 2101 	mla	r1, ip, r1, r2
 800d836:	4604      	mov	r4, r0
 800d838:	2301      	movs	r3, #1
 800d83a:	e7f0      	b.n	800d81e <_svfiprintf_r+0x192>
 800d83c:	ab03      	add	r3, sp, #12
 800d83e:	9300      	str	r3, [sp, #0]
 800d840:	462a      	mov	r2, r5
 800d842:	4b0e      	ldr	r3, [pc, #56]	@ (800d87c <_svfiprintf_r+0x1f0>)
 800d844:	a904      	add	r1, sp, #16
 800d846:	4638      	mov	r0, r7
 800d848:	f7fd fe96 	bl	800b578 <_printf_float>
 800d84c:	1c42      	adds	r2, r0, #1
 800d84e:	4606      	mov	r6, r0
 800d850:	d1d6      	bne.n	800d800 <_svfiprintf_r+0x174>
 800d852:	89ab      	ldrh	r3, [r5, #12]
 800d854:	065b      	lsls	r3, r3, #25
 800d856:	f53f af2d 	bmi.w	800d6b4 <_svfiprintf_r+0x28>
 800d85a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d85c:	e72c      	b.n	800d6b8 <_svfiprintf_r+0x2c>
 800d85e:	ab03      	add	r3, sp, #12
 800d860:	9300      	str	r3, [sp, #0]
 800d862:	462a      	mov	r2, r5
 800d864:	4b05      	ldr	r3, [pc, #20]	@ (800d87c <_svfiprintf_r+0x1f0>)
 800d866:	a904      	add	r1, sp, #16
 800d868:	4638      	mov	r0, r7
 800d86a:	f7fe f91d 	bl	800baa8 <_printf_i>
 800d86e:	e7ed      	b.n	800d84c <_svfiprintf_r+0x1c0>
 800d870:	0800fe40 	.word	0x0800fe40
 800d874:	0800fe4a 	.word	0x0800fe4a
 800d878:	0800b579 	.word	0x0800b579
 800d87c:	0800d5d5 	.word	0x0800d5d5
 800d880:	0800fe46 	.word	0x0800fe46

0800d884 <__sflush_r>:
 800d884:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d88c:	0716      	lsls	r6, r2, #28
 800d88e:	4605      	mov	r5, r0
 800d890:	460c      	mov	r4, r1
 800d892:	d454      	bmi.n	800d93e <__sflush_r+0xba>
 800d894:	684b      	ldr	r3, [r1, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	dc02      	bgt.n	800d8a0 <__sflush_r+0x1c>
 800d89a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	dd48      	ble.n	800d932 <__sflush_r+0xae>
 800d8a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8a2:	2e00      	cmp	r6, #0
 800d8a4:	d045      	beq.n	800d932 <__sflush_r+0xae>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d8ac:	682f      	ldr	r7, [r5, #0]
 800d8ae:	6a21      	ldr	r1, [r4, #32]
 800d8b0:	602b      	str	r3, [r5, #0]
 800d8b2:	d030      	beq.n	800d916 <__sflush_r+0x92>
 800d8b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8b6:	89a3      	ldrh	r3, [r4, #12]
 800d8b8:	0759      	lsls	r1, r3, #29
 800d8ba:	d505      	bpl.n	800d8c8 <__sflush_r+0x44>
 800d8bc:	6863      	ldr	r3, [r4, #4]
 800d8be:	1ad2      	subs	r2, r2, r3
 800d8c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8c2:	b10b      	cbz	r3, 800d8c8 <__sflush_r+0x44>
 800d8c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8c6:	1ad2      	subs	r2, r2, r3
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8cc:	6a21      	ldr	r1, [r4, #32]
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	47b0      	blx	r6
 800d8d2:	1c43      	adds	r3, r0, #1
 800d8d4:	89a3      	ldrh	r3, [r4, #12]
 800d8d6:	d106      	bne.n	800d8e6 <__sflush_r+0x62>
 800d8d8:	6829      	ldr	r1, [r5, #0]
 800d8da:	291d      	cmp	r1, #29
 800d8dc:	d82b      	bhi.n	800d936 <__sflush_r+0xb2>
 800d8de:	4a2a      	ldr	r2, [pc, #168]	@ (800d988 <__sflush_r+0x104>)
 800d8e0:	410a      	asrs	r2, r1
 800d8e2:	07d6      	lsls	r6, r2, #31
 800d8e4:	d427      	bmi.n	800d936 <__sflush_r+0xb2>
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	6062      	str	r2, [r4, #4]
 800d8ea:	04d9      	lsls	r1, r3, #19
 800d8ec:	6922      	ldr	r2, [r4, #16]
 800d8ee:	6022      	str	r2, [r4, #0]
 800d8f0:	d504      	bpl.n	800d8fc <__sflush_r+0x78>
 800d8f2:	1c42      	adds	r2, r0, #1
 800d8f4:	d101      	bne.n	800d8fa <__sflush_r+0x76>
 800d8f6:	682b      	ldr	r3, [r5, #0]
 800d8f8:	b903      	cbnz	r3, 800d8fc <__sflush_r+0x78>
 800d8fa:	6560      	str	r0, [r4, #84]	@ 0x54
 800d8fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8fe:	602f      	str	r7, [r5, #0]
 800d900:	b1b9      	cbz	r1, 800d932 <__sflush_r+0xae>
 800d902:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d906:	4299      	cmp	r1, r3
 800d908:	d002      	beq.n	800d910 <__sflush_r+0x8c>
 800d90a:	4628      	mov	r0, r5
 800d90c:	f7ff f9e0 	bl	800ccd0 <_free_r>
 800d910:	2300      	movs	r3, #0
 800d912:	6363      	str	r3, [r4, #52]	@ 0x34
 800d914:	e00d      	b.n	800d932 <__sflush_r+0xae>
 800d916:	2301      	movs	r3, #1
 800d918:	4628      	mov	r0, r5
 800d91a:	47b0      	blx	r6
 800d91c:	4602      	mov	r2, r0
 800d91e:	1c50      	adds	r0, r2, #1
 800d920:	d1c9      	bne.n	800d8b6 <__sflush_r+0x32>
 800d922:	682b      	ldr	r3, [r5, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d0c6      	beq.n	800d8b6 <__sflush_r+0x32>
 800d928:	2b1d      	cmp	r3, #29
 800d92a:	d001      	beq.n	800d930 <__sflush_r+0xac>
 800d92c:	2b16      	cmp	r3, #22
 800d92e:	d11e      	bne.n	800d96e <__sflush_r+0xea>
 800d930:	602f      	str	r7, [r5, #0]
 800d932:	2000      	movs	r0, #0
 800d934:	e022      	b.n	800d97c <__sflush_r+0xf8>
 800d936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d93a:	b21b      	sxth	r3, r3
 800d93c:	e01b      	b.n	800d976 <__sflush_r+0xf2>
 800d93e:	690f      	ldr	r7, [r1, #16]
 800d940:	2f00      	cmp	r7, #0
 800d942:	d0f6      	beq.n	800d932 <__sflush_r+0xae>
 800d944:	0793      	lsls	r3, r2, #30
 800d946:	680e      	ldr	r6, [r1, #0]
 800d948:	bf08      	it	eq
 800d94a:	694b      	ldreq	r3, [r1, #20]
 800d94c:	600f      	str	r7, [r1, #0]
 800d94e:	bf18      	it	ne
 800d950:	2300      	movne	r3, #0
 800d952:	eba6 0807 	sub.w	r8, r6, r7
 800d956:	608b      	str	r3, [r1, #8]
 800d958:	f1b8 0f00 	cmp.w	r8, #0
 800d95c:	dde9      	ble.n	800d932 <__sflush_r+0xae>
 800d95e:	6a21      	ldr	r1, [r4, #32]
 800d960:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d962:	4643      	mov	r3, r8
 800d964:	463a      	mov	r2, r7
 800d966:	4628      	mov	r0, r5
 800d968:	47b0      	blx	r6
 800d96a:	2800      	cmp	r0, #0
 800d96c:	dc08      	bgt.n	800d980 <__sflush_r+0xfc>
 800d96e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d976:	81a3      	strh	r3, [r4, #12]
 800d978:	f04f 30ff 	mov.w	r0, #4294967295
 800d97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d980:	4407      	add	r7, r0
 800d982:	eba8 0800 	sub.w	r8, r8, r0
 800d986:	e7e7      	b.n	800d958 <__sflush_r+0xd4>
 800d988:	dfbffffe 	.word	0xdfbffffe

0800d98c <_fflush_r>:
 800d98c:	b538      	push	{r3, r4, r5, lr}
 800d98e:	690b      	ldr	r3, [r1, #16]
 800d990:	4605      	mov	r5, r0
 800d992:	460c      	mov	r4, r1
 800d994:	b913      	cbnz	r3, 800d99c <_fflush_r+0x10>
 800d996:	2500      	movs	r5, #0
 800d998:	4628      	mov	r0, r5
 800d99a:	bd38      	pop	{r3, r4, r5, pc}
 800d99c:	b118      	cbz	r0, 800d9a6 <_fflush_r+0x1a>
 800d99e:	6a03      	ldr	r3, [r0, #32]
 800d9a0:	b90b      	cbnz	r3, 800d9a6 <_fflush_r+0x1a>
 800d9a2:	f7fe fa2d 	bl	800be00 <__sinit>
 800d9a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d0f3      	beq.n	800d996 <_fflush_r+0xa>
 800d9ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9b0:	07d0      	lsls	r0, r2, #31
 800d9b2:	d404      	bmi.n	800d9be <_fflush_r+0x32>
 800d9b4:	0599      	lsls	r1, r3, #22
 800d9b6:	d402      	bmi.n	800d9be <_fflush_r+0x32>
 800d9b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9ba:	f7fe fb38 	bl	800c02e <__retarget_lock_acquire_recursive>
 800d9be:	4628      	mov	r0, r5
 800d9c0:	4621      	mov	r1, r4
 800d9c2:	f7ff ff5f 	bl	800d884 <__sflush_r>
 800d9c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9c8:	07da      	lsls	r2, r3, #31
 800d9ca:	4605      	mov	r5, r0
 800d9cc:	d4e4      	bmi.n	800d998 <_fflush_r+0xc>
 800d9ce:	89a3      	ldrh	r3, [r4, #12]
 800d9d0:	059b      	lsls	r3, r3, #22
 800d9d2:	d4e1      	bmi.n	800d998 <_fflush_r+0xc>
 800d9d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9d6:	f7fe fb2b 	bl	800c030 <__retarget_lock_release_recursive>
 800d9da:	e7dd      	b.n	800d998 <_fflush_r+0xc>

0800d9dc <memmove>:
 800d9dc:	4288      	cmp	r0, r1
 800d9de:	b510      	push	{r4, lr}
 800d9e0:	eb01 0402 	add.w	r4, r1, r2
 800d9e4:	d902      	bls.n	800d9ec <memmove+0x10>
 800d9e6:	4284      	cmp	r4, r0
 800d9e8:	4623      	mov	r3, r4
 800d9ea:	d807      	bhi.n	800d9fc <memmove+0x20>
 800d9ec:	1e43      	subs	r3, r0, #1
 800d9ee:	42a1      	cmp	r1, r4
 800d9f0:	d008      	beq.n	800da04 <memmove+0x28>
 800d9f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9fa:	e7f8      	b.n	800d9ee <memmove+0x12>
 800d9fc:	4402      	add	r2, r0
 800d9fe:	4601      	mov	r1, r0
 800da00:	428a      	cmp	r2, r1
 800da02:	d100      	bne.n	800da06 <memmove+0x2a>
 800da04:	bd10      	pop	{r4, pc}
 800da06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da0e:	e7f7      	b.n	800da00 <memmove+0x24>

0800da10 <_sbrk_r>:
 800da10:	b538      	push	{r3, r4, r5, lr}
 800da12:	4d06      	ldr	r5, [pc, #24]	@ (800da2c <_sbrk_r+0x1c>)
 800da14:	2300      	movs	r3, #0
 800da16:	4604      	mov	r4, r0
 800da18:	4608      	mov	r0, r1
 800da1a:	602b      	str	r3, [r5, #0]
 800da1c:	f7f3 fca4 	bl	8001368 <_sbrk>
 800da20:	1c43      	adds	r3, r0, #1
 800da22:	d102      	bne.n	800da2a <_sbrk_r+0x1a>
 800da24:	682b      	ldr	r3, [r5, #0]
 800da26:	b103      	cbz	r3, 800da2a <_sbrk_r+0x1a>
 800da28:	6023      	str	r3, [r4, #0]
 800da2a:	bd38      	pop	{r3, r4, r5, pc}
 800da2c:	2000231c 	.word	0x2000231c

0800da30 <memcpy>:
 800da30:	440a      	add	r2, r1
 800da32:	4291      	cmp	r1, r2
 800da34:	f100 33ff 	add.w	r3, r0, #4294967295
 800da38:	d100      	bne.n	800da3c <memcpy+0xc>
 800da3a:	4770      	bx	lr
 800da3c:	b510      	push	{r4, lr}
 800da3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da46:	4291      	cmp	r1, r2
 800da48:	d1f9      	bne.n	800da3e <memcpy+0xe>
 800da4a:	bd10      	pop	{r4, pc}

0800da4c <__assert_func>:
 800da4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da4e:	4614      	mov	r4, r2
 800da50:	461a      	mov	r2, r3
 800da52:	4b09      	ldr	r3, [pc, #36]	@ (800da78 <__assert_func+0x2c>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4605      	mov	r5, r0
 800da58:	68d8      	ldr	r0, [r3, #12]
 800da5a:	b954      	cbnz	r4, 800da72 <__assert_func+0x26>
 800da5c:	4b07      	ldr	r3, [pc, #28]	@ (800da7c <__assert_func+0x30>)
 800da5e:	461c      	mov	r4, r3
 800da60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da64:	9100      	str	r1, [sp, #0]
 800da66:	462b      	mov	r3, r5
 800da68:	4905      	ldr	r1, [pc, #20]	@ (800da80 <__assert_func+0x34>)
 800da6a:	f000 f86f 	bl	800db4c <fiprintf>
 800da6e:	f000 f87f 	bl	800db70 <abort>
 800da72:	4b04      	ldr	r3, [pc, #16]	@ (800da84 <__assert_func+0x38>)
 800da74:	e7f4      	b.n	800da60 <__assert_func+0x14>
 800da76:	bf00      	nop
 800da78:	20000184 	.word	0x20000184
 800da7c:	0800fe96 	.word	0x0800fe96
 800da80:	0800fe68 	.word	0x0800fe68
 800da84:	0800fe5b 	.word	0x0800fe5b

0800da88 <_calloc_r>:
 800da88:	b570      	push	{r4, r5, r6, lr}
 800da8a:	fba1 5402 	umull	r5, r4, r1, r2
 800da8e:	b93c      	cbnz	r4, 800daa0 <_calloc_r+0x18>
 800da90:	4629      	mov	r1, r5
 800da92:	f7ff f991 	bl	800cdb8 <_malloc_r>
 800da96:	4606      	mov	r6, r0
 800da98:	b928      	cbnz	r0, 800daa6 <_calloc_r+0x1e>
 800da9a:	2600      	movs	r6, #0
 800da9c:	4630      	mov	r0, r6
 800da9e:	bd70      	pop	{r4, r5, r6, pc}
 800daa0:	220c      	movs	r2, #12
 800daa2:	6002      	str	r2, [r0, #0]
 800daa4:	e7f9      	b.n	800da9a <_calloc_r+0x12>
 800daa6:	462a      	mov	r2, r5
 800daa8:	4621      	mov	r1, r4
 800daaa:	f7fe fa42 	bl	800bf32 <memset>
 800daae:	e7f5      	b.n	800da9c <_calloc_r+0x14>

0800dab0 <__ascii_mbtowc>:
 800dab0:	b082      	sub	sp, #8
 800dab2:	b901      	cbnz	r1, 800dab6 <__ascii_mbtowc+0x6>
 800dab4:	a901      	add	r1, sp, #4
 800dab6:	b142      	cbz	r2, 800daca <__ascii_mbtowc+0x1a>
 800dab8:	b14b      	cbz	r3, 800dace <__ascii_mbtowc+0x1e>
 800daba:	7813      	ldrb	r3, [r2, #0]
 800dabc:	600b      	str	r3, [r1, #0]
 800dabe:	7812      	ldrb	r2, [r2, #0]
 800dac0:	1e10      	subs	r0, r2, #0
 800dac2:	bf18      	it	ne
 800dac4:	2001      	movne	r0, #1
 800dac6:	b002      	add	sp, #8
 800dac8:	4770      	bx	lr
 800daca:	4610      	mov	r0, r2
 800dacc:	e7fb      	b.n	800dac6 <__ascii_mbtowc+0x16>
 800dace:	f06f 0001 	mvn.w	r0, #1
 800dad2:	e7f8      	b.n	800dac6 <__ascii_mbtowc+0x16>

0800dad4 <_realloc_r>:
 800dad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dad8:	4680      	mov	r8, r0
 800dada:	4615      	mov	r5, r2
 800dadc:	460c      	mov	r4, r1
 800dade:	b921      	cbnz	r1, 800daea <_realloc_r+0x16>
 800dae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dae4:	4611      	mov	r1, r2
 800dae6:	f7ff b967 	b.w	800cdb8 <_malloc_r>
 800daea:	b92a      	cbnz	r2, 800daf8 <_realloc_r+0x24>
 800daec:	f7ff f8f0 	bl	800ccd0 <_free_r>
 800daf0:	2400      	movs	r4, #0
 800daf2:	4620      	mov	r0, r4
 800daf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf8:	f000 f841 	bl	800db7e <_malloc_usable_size_r>
 800dafc:	4285      	cmp	r5, r0
 800dafe:	4606      	mov	r6, r0
 800db00:	d802      	bhi.n	800db08 <_realloc_r+0x34>
 800db02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800db06:	d8f4      	bhi.n	800daf2 <_realloc_r+0x1e>
 800db08:	4629      	mov	r1, r5
 800db0a:	4640      	mov	r0, r8
 800db0c:	f7ff f954 	bl	800cdb8 <_malloc_r>
 800db10:	4607      	mov	r7, r0
 800db12:	2800      	cmp	r0, #0
 800db14:	d0ec      	beq.n	800daf0 <_realloc_r+0x1c>
 800db16:	42b5      	cmp	r5, r6
 800db18:	462a      	mov	r2, r5
 800db1a:	4621      	mov	r1, r4
 800db1c:	bf28      	it	cs
 800db1e:	4632      	movcs	r2, r6
 800db20:	f7ff ff86 	bl	800da30 <memcpy>
 800db24:	4621      	mov	r1, r4
 800db26:	4640      	mov	r0, r8
 800db28:	f7ff f8d2 	bl	800ccd0 <_free_r>
 800db2c:	463c      	mov	r4, r7
 800db2e:	e7e0      	b.n	800daf2 <_realloc_r+0x1e>

0800db30 <__ascii_wctomb>:
 800db30:	4603      	mov	r3, r0
 800db32:	4608      	mov	r0, r1
 800db34:	b141      	cbz	r1, 800db48 <__ascii_wctomb+0x18>
 800db36:	2aff      	cmp	r2, #255	@ 0xff
 800db38:	d904      	bls.n	800db44 <__ascii_wctomb+0x14>
 800db3a:	228a      	movs	r2, #138	@ 0x8a
 800db3c:	601a      	str	r2, [r3, #0]
 800db3e:	f04f 30ff 	mov.w	r0, #4294967295
 800db42:	4770      	bx	lr
 800db44:	700a      	strb	r2, [r1, #0]
 800db46:	2001      	movs	r0, #1
 800db48:	4770      	bx	lr
	...

0800db4c <fiprintf>:
 800db4c:	b40e      	push	{r1, r2, r3}
 800db4e:	b503      	push	{r0, r1, lr}
 800db50:	4601      	mov	r1, r0
 800db52:	ab03      	add	r3, sp, #12
 800db54:	4805      	ldr	r0, [pc, #20]	@ (800db6c <fiprintf+0x20>)
 800db56:	f853 2b04 	ldr.w	r2, [r3], #4
 800db5a:	6800      	ldr	r0, [r0, #0]
 800db5c:	9301      	str	r3, [sp, #4]
 800db5e:	f000 f83f 	bl	800dbe0 <_vfiprintf_r>
 800db62:	b002      	add	sp, #8
 800db64:	f85d eb04 	ldr.w	lr, [sp], #4
 800db68:	b003      	add	sp, #12
 800db6a:	4770      	bx	lr
 800db6c:	20000184 	.word	0x20000184

0800db70 <abort>:
 800db70:	b508      	push	{r3, lr}
 800db72:	2006      	movs	r0, #6
 800db74:	f000 fa08 	bl	800df88 <raise>
 800db78:	2001      	movs	r0, #1
 800db7a:	f7f3 fb7d 	bl	8001278 <_exit>

0800db7e <_malloc_usable_size_r>:
 800db7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db82:	1f18      	subs	r0, r3, #4
 800db84:	2b00      	cmp	r3, #0
 800db86:	bfbc      	itt	lt
 800db88:	580b      	ldrlt	r3, [r1, r0]
 800db8a:	18c0      	addlt	r0, r0, r3
 800db8c:	4770      	bx	lr

0800db8e <__sfputc_r>:
 800db8e:	6893      	ldr	r3, [r2, #8]
 800db90:	3b01      	subs	r3, #1
 800db92:	2b00      	cmp	r3, #0
 800db94:	b410      	push	{r4}
 800db96:	6093      	str	r3, [r2, #8]
 800db98:	da08      	bge.n	800dbac <__sfputc_r+0x1e>
 800db9a:	6994      	ldr	r4, [r2, #24]
 800db9c:	42a3      	cmp	r3, r4
 800db9e:	db01      	blt.n	800dba4 <__sfputc_r+0x16>
 800dba0:	290a      	cmp	r1, #10
 800dba2:	d103      	bne.n	800dbac <__sfputc_r+0x1e>
 800dba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dba8:	f000 b932 	b.w	800de10 <__swbuf_r>
 800dbac:	6813      	ldr	r3, [r2, #0]
 800dbae:	1c58      	adds	r0, r3, #1
 800dbb0:	6010      	str	r0, [r2, #0]
 800dbb2:	7019      	strb	r1, [r3, #0]
 800dbb4:	4608      	mov	r0, r1
 800dbb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbba:	4770      	bx	lr

0800dbbc <__sfputs_r>:
 800dbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	460f      	mov	r7, r1
 800dbc2:	4614      	mov	r4, r2
 800dbc4:	18d5      	adds	r5, r2, r3
 800dbc6:	42ac      	cmp	r4, r5
 800dbc8:	d101      	bne.n	800dbce <__sfputs_r+0x12>
 800dbca:	2000      	movs	r0, #0
 800dbcc:	e007      	b.n	800dbde <__sfputs_r+0x22>
 800dbce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbd2:	463a      	mov	r2, r7
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f7ff ffda 	bl	800db8e <__sfputc_r>
 800dbda:	1c43      	adds	r3, r0, #1
 800dbdc:	d1f3      	bne.n	800dbc6 <__sfputs_r+0xa>
 800dbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dbe0 <_vfiprintf_r>:
 800dbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe4:	460d      	mov	r5, r1
 800dbe6:	b09d      	sub	sp, #116	@ 0x74
 800dbe8:	4614      	mov	r4, r2
 800dbea:	4698      	mov	r8, r3
 800dbec:	4606      	mov	r6, r0
 800dbee:	b118      	cbz	r0, 800dbf8 <_vfiprintf_r+0x18>
 800dbf0:	6a03      	ldr	r3, [r0, #32]
 800dbf2:	b90b      	cbnz	r3, 800dbf8 <_vfiprintf_r+0x18>
 800dbf4:	f7fe f904 	bl	800be00 <__sinit>
 800dbf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbfa:	07d9      	lsls	r1, r3, #31
 800dbfc:	d405      	bmi.n	800dc0a <_vfiprintf_r+0x2a>
 800dbfe:	89ab      	ldrh	r3, [r5, #12]
 800dc00:	059a      	lsls	r2, r3, #22
 800dc02:	d402      	bmi.n	800dc0a <_vfiprintf_r+0x2a>
 800dc04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc06:	f7fe fa12 	bl	800c02e <__retarget_lock_acquire_recursive>
 800dc0a:	89ab      	ldrh	r3, [r5, #12]
 800dc0c:	071b      	lsls	r3, r3, #28
 800dc0e:	d501      	bpl.n	800dc14 <_vfiprintf_r+0x34>
 800dc10:	692b      	ldr	r3, [r5, #16]
 800dc12:	b99b      	cbnz	r3, 800dc3c <_vfiprintf_r+0x5c>
 800dc14:	4629      	mov	r1, r5
 800dc16:	4630      	mov	r0, r6
 800dc18:	f000 f938 	bl	800de8c <__swsetup_r>
 800dc1c:	b170      	cbz	r0, 800dc3c <_vfiprintf_r+0x5c>
 800dc1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc20:	07dc      	lsls	r4, r3, #31
 800dc22:	d504      	bpl.n	800dc2e <_vfiprintf_r+0x4e>
 800dc24:	f04f 30ff 	mov.w	r0, #4294967295
 800dc28:	b01d      	add	sp, #116	@ 0x74
 800dc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc2e:	89ab      	ldrh	r3, [r5, #12]
 800dc30:	0598      	lsls	r0, r3, #22
 800dc32:	d4f7      	bmi.n	800dc24 <_vfiprintf_r+0x44>
 800dc34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc36:	f7fe f9fb 	bl	800c030 <__retarget_lock_release_recursive>
 800dc3a:	e7f3      	b.n	800dc24 <_vfiprintf_r+0x44>
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc40:	2320      	movs	r3, #32
 800dc42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc46:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc4a:	2330      	movs	r3, #48	@ 0x30
 800dc4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ddfc <_vfiprintf_r+0x21c>
 800dc50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc54:	f04f 0901 	mov.w	r9, #1
 800dc58:	4623      	mov	r3, r4
 800dc5a:	469a      	mov	sl, r3
 800dc5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc60:	b10a      	cbz	r2, 800dc66 <_vfiprintf_r+0x86>
 800dc62:	2a25      	cmp	r2, #37	@ 0x25
 800dc64:	d1f9      	bne.n	800dc5a <_vfiprintf_r+0x7a>
 800dc66:	ebba 0b04 	subs.w	fp, sl, r4
 800dc6a:	d00b      	beq.n	800dc84 <_vfiprintf_r+0xa4>
 800dc6c:	465b      	mov	r3, fp
 800dc6e:	4622      	mov	r2, r4
 800dc70:	4629      	mov	r1, r5
 800dc72:	4630      	mov	r0, r6
 800dc74:	f7ff ffa2 	bl	800dbbc <__sfputs_r>
 800dc78:	3001      	adds	r0, #1
 800dc7a:	f000 80a7 	beq.w	800ddcc <_vfiprintf_r+0x1ec>
 800dc7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc80:	445a      	add	r2, fp
 800dc82:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc84:	f89a 3000 	ldrb.w	r3, [sl]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f000 809f 	beq.w	800ddcc <_vfiprintf_r+0x1ec>
 800dc8e:	2300      	movs	r3, #0
 800dc90:	f04f 32ff 	mov.w	r2, #4294967295
 800dc94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc98:	f10a 0a01 	add.w	sl, sl, #1
 800dc9c:	9304      	str	r3, [sp, #16]
 800dc9e:	9307      	str	r3, [sp, #28]
 800dca0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dca4:	931a      	str	r3, [sp, #104]	@ 0x68
 800dca6:	4654      	mov	r4, sl
 800dca8:	2205      	movs	r2, #5
 800dcaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcae:	4853      	ldr	r0, [pc, #332]	@ (800ddfc <_vfiprintf_r+0x21c>)
 800dcb0:	f7f2 fa9e 	bl	80001f0 <memchr>
 800dcb4:	9a04      	ldr	r2, [sp, #16]
 800dcb6:	b9d8      	cbnz	r0, 800dcf0 <_vfiprintf_r+0x110>
 800dcb8:	06d1      	lsls	r1, r2, #27
 800dcba:	bf44      	itt	mi
 800dcbc:	2320      	movmi	r3, #32
 800dcbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcc2:	0713      	lsls	r3, r2, #28
 800dcc4:	bf44      	itt	mi
 800dcc6:	232b      	movmi	r3, #43	@ 0x2b
 800dcc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dccc:	f89a 3000 	ldrb.w	r3, [sl]
 800dcd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcd2:	d015      	beq.n	800dd00 <_vfiprintf_r+0x120>
 800dcd4:	9a07      	ldr	r2, [sp, #28]
 800dcd6:	4654      	mov	r4, sl
 800dcd8:	2000      	movs	r0, #0
 800dcda:	f04f 0c0a 	mov.w	ip, #10
 800dcde:	4621      	mov	r1, r4
 800dce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dce4:	3b30      	subs	r3, #48	@ 0x30
 800dce6:	2b09      	cmp	r3, #9
 800dce8:	d94b      	bls.n	800dd82 <_vfiprintf_r+0x1a2>
 800dcea:	b1b0      	cbz	r0, 800dd1a <_vfiprintf_r+0x13a>
 800dcec:	9207      	str	r2, [sp, #28]
 800dcee:	e014      	b.n	800dd1a <_vfiprintf_r+0x13a>
 800dcf0:	eba0 0308 	sub.w	r3, r0, r8
 800dcf4:	fa09 f303 	lsl.w	r3, r9, r3
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	9304      	str	r3, [sp, #16]
 800dcfc:	46a2      	mov	sl, r4
 800dcfe:	e7d2      	b.n	800dca6 <_vfiprintf_r+0xc6>
 800dd00:	9b03      	ldr	r3, [sp, #12]
 800dd02:	1d19      	adds	r1, r3, #4
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	9103      	str	r1, [sp, #12]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	bfbb      	ittet	lt
 800dd0c:	425b      	neglt	r3, r3
 800dd0e:	f042 0202 	orrlt.w	r2, r2, #2
 800dd12:	9307      	strge	r3, [sp, #28]
 800dd14:	9307      	strlt	r3, [sp, #28]
 800dd16:	bfb8      	it	lt
 800dd18:	9204      	strlt	r2, [sp, #16]
 800dd1a:	7823      	ldrb	r3, [r4, #0]
 800dd1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd1e:	d10a      	bne.n	800dd36 <_vfiprintf_r+0x156>
 800dd20:	7863      	ldrb	r3, [r4, #1]
 800dd22:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd24:	d132      	bne.n	800dd8c <_vfiprintf_r+0x1ac>
 800dd26:	9b03      	ldr	r3, [sp, #12]
 800dd28:	1d1a      	adds	r2, r3, #4
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	9203      	str	r2, [sp, #12]
 800dd2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd32:	3402      	adds	r4, #2
 800dd34:	9305      	str	r3, [sp, #20]
 800dd36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800de0c <_vfiprintf_r+0x22c>
 800dd3a:	7821      	ldrb	r1, [r4, #0]
 800dd3c:	2203      	movs	r2, #3
 800dd3e:	4650      	mov	r0, sl
 800dd40:	f7f2 fa56 	bl	80001f0 <memchr>
 800dd44:	b138      	cbz	r0, 800dd56 <_vfiprintf_r+0x176>
 800dd46:	9b04      	ldr	r3, [sp, #16]
 800dd48:	eba0 000a 	sub.w	r0, r0, sl
 800dd4c:	2240      	movs	r2, #64	@ 0x40
 800dd4e:	4082      	lsls	r2, r0
 800dd50:	4313      	orrs	r3, r2
 800dd52:	3401      	adds	r4, #1
 800dd54:	9304      	str	r3, [sp, #16]
 800dd56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd5a:	4829      	ldr	r0, [pc, #164]	@ (800de00 <_vfiprintf_r+0x220>)
 800dd5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd60:	2206      	movs	r2, #6
 800dd62:	f7f2 fa45 	bl	80001f0 <memchr>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d03f      	beq.n	800ddea <_vfiprintf_r+0x20a>
 800dd6a:	4b26      	ldr	r3, [pc, #152]	@ (800de04 <_vfiprintf_r+0x224>)
 800dd6c:	bb1b      	cbnz	r3, 800ddb6 <_vfiprintf_r+0x1d6>
 800dd6e:	9b03      	ldr	r3, [sp, #12]
 800dd70:	3307      	adds	r3, #7
 800dd72:	f023 0307 	bic.w	r3, r3, #7
 800dd76:	3308      	adds	r3, #8
 800dd78:	9303      	str	r3, [sp, #12]
 800dd7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd7c:	443b      	add	r3, r7
 800dd7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd80:	e76a      	b.n	800dc58 <_vfiprintf_r+0x78>
 800dd82:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd86:	460c      	mov	r4, r1
 800dd88:	2001      	movs	r0, #1
 800dd8a:	e7a8      	b.n	800dcde <_vfiprintf_r+0xfe>
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	3401      	adds	r4, #1
 800dd90:	9305      	str	r3, [sp, #20]
 800dd92:	4619      	mov	r1, r3
 800dd94:	f04f 0c0a 	mov.w	ip, #10
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd9e:	3a30      	subs	r2, #48	@ 0x30
 800dda0:	2a09      	cmp	r2, #9
 800dda2:	d903      	bls.n	800ddac <_vfiprintf_r+0x1cc>
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d0c6      	beq.n	800dd36 <_vfiprintf_r+0x156>
 800dda8:	9105      	str	r1, [sp, #20]
 800ddaa:	e7c4      	b.n	800dd36 <_vfiprintf_r+0x156>
 800ddac:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e7f0      	b.n	800dd98 <_vfiprintf_r+0x1b8>
 800ddb6:	ab03      	add	r3, sp, #12
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	462a      	mov	r2, r5
 800ddbc:	4b12      	ldr	r3, [pc, #72]	@ (800de08 <_vfiprintf_r+0x228>)
 800ddbe:	a904      	add	r1, sp, #16
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	f7fd fbd9 	bl	800b578 <_printf_float>
 800ddc6:	4607      	mov	r7, r0
 800ddc8:	1c78      	adds	r0, r7, #1
 800ddca:	d1d6      	bne.n	800dd7a <_vfiprintf_r+0x19a>
 800ddcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddce:	07d9      	lsls	r1, r3, #31
 800ddd0:	d405      	bmi.n	800ddde <_vfiprintf_r+0x1fe>
 800ddd2:	89ab      	ldrh	r3, [r5, #12]
 800ddd4:	059a      	lsls	r2, r3, #22
 800ddd6:	d402      	bmi.n	800ddde <_vfiprintf_r+0x1fe>
 800ddd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ddda:	f7fe f929 	bl	800c030 <__retarget_lock_release_recursive>
 800ddde:	89ab      	ldrh	r3, [r5, #12]
 800dde0:	065b      	lsls	r3, r3, #25
 800dde2:	f53f af1f 	bmi.w	800dc24 <_vfiprintf_r+0x44>
 800dde6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dde8:	e71e      	b.n	800dc28 <_vfiprintf_r+0x48>
 800ddea:	ab03      	add	r3, sp, #12
 800ddec:	9300      	str	r3, [sp, #0]
 800ddee:	462a      	mov	r2, r5
 800ddf0:	4b05      	ldr	r3, [pc, #20]	@ (800de08 <_vfiprintf_r+0x228>)
 800ddf2:	a904      	add	r1, sp, #16
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	f7fd fe57 	bl	800baa8 <_printf_i>
 800ddfa:	e7e4      	b.n	800ddc6 <_vfiprintf_r+0x1e6>
 800ddfc:	0800fe40 	.word	0x0800fe40
 800de00:	0800fe4a 	.word	0x0800fe4a
 800de04:	0800b579 	.word	0x0800b579
 800de08:	0800dbbd 	.word	0x0800dbbd
 800de0c:	0800fe46 	.word	0x0800fe46

0800de10 <__swbuf_r>:
 800de10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de12:	460e      	mov	r6, r1
 800de14:	4614      	mov	r4, r2
 800de16:	4605      	mov	r5, r0
 800de18:	b118      	cbz	r0, 800de22 <__swbuf_r+0x12>
 800de1a:	6a03      	ldr	r3, [r0, #32]
 800de1c:	b90b      	cbnz	r3, 800de22 <__swbuf_r+0x12>
 800de1e:	f7fd ffef 	bl	800be00 <__sinit>
 800de22:	69a3      	ldr	r3, [r4, #24]
 800de24:	60a3      	str	r3, [r4, #8]
 800de26:	89a3      	ldrh	r3, [r4, #12]
 800de28:	071a      	lsls	r2, r3, #28
 800de2a:	d501      	bpl.n	800de30 <__swbuf_r+0x20>
 800de2c:	6923      	ldr	r3, [r4, #16]
 800de2e:	b943      	cbnz	r3, 800de42 <__swbuf_r+0x32>
 800de30:	4621      	mov	r1, r4
 800de32:	4628      	mov	r0, r5
 800de34:	f000 f82a 	bl	800de8c <__swsetup_r>
 800de38:	b118      	cbz	r0, 800de42 <__swbuf_r+0x32>
 800de3a:	f04f 37ff 	mov.w	r7, #4294967295
 800de3e:	4638      	mov	r0, r7
 800de40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de42:	6823      	ldr	r3, [r4, #0]
 800de44:	6922      	ldr	r2, [r4, #16]
 800de46:	1a98      	subs	r0, r3, r2
 800de48:	6963      	ldr	r3, [r4, #20]
 800de4a:	b2f6      	uxtb	r6, r6
 800de4c:	4283      	cmp	r3, r0
 800de4e:	4637      	mov	r7, r6
 800de50:	dc05      	bgt.n	800de5e <__swbuf_r+0x4e>
 800de52:	4621      	mov	r1, r4
 800de54:	4628      	mov	r0, r5
 800de56:	f7ff fd99 	bl	800d98c <_fflush_r>
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d1ed      	bne.n	800de3a <__swbuf_r+0x2a>
 800de5e:	68a3      	ldr	r3, [r4, #8]
 800de60:	3b01      	subs	r3, #1
 800de62:	60a3      	str	r3, [r4, #8]
 800de64:	6823      	ldr	r3, [r4, #0]
 800de66:	1c5a      	adds	r2, r3, #1
 800de68:	6022      	str	r2, [r4, #0]
 800de6a:	701e      	strb	r6, [r3, #0]
 800de6c:	6962      	ldr	r2, [r4, #20]
 800de6e:	1c43      	adds	r3, r0, #1
 800de70:	429a      	cmp	r2, r3
 800de72:	d004      	beq.n	800de7e <__swbuf_r+0x6e>
 800de74:	89a3      	ldrh	r3, [r4, #12]
 800de76:	07db      	lsls	r3, r3, #31
 800de78:	d5e1      	bpl.n	800de3e <__swbuf_r+0x2e>
 800de7a:	2e0a      	cmp	r6, #10
 800de7c:	d1df      	bne.n	800de3e <__swbuf_r+0x2e>
 800de7e:	4621      	mov	r1, r4
 800de80:	4628      	mov	r0, r5
 800de82:	f7ff fd83 	bl	800d98c <_fflush_r>
 800de86:	2800      	cmp	r0, #0
 800de88:	d0d9      	beq.n	800de3e <__swbuf_r+0x2e>
 800de8a:	e7d6      	b.n	800de3a <__swbuf_r+0x2a>

0800de8c <__swsetup_r>:
 800de8c:	b538      	push	{r3, r4, r5, lr}
 800de8e:	4b29      	ldr	r3, [pc, #164]	@ (800df34 <__swsetup_r+0xa8>)
 800de90:	4605      	mov	r5, r0
 800de92:	6818      	ldr	r0, [r3, #0]
 800de94:	460c      	mov	r4, r1
 800de96:	b118      	cbz	r0, 800dea0 <__swsetup_r+0x14>
 800de98:	6a03      	ldr	r3, [r0, #32]
 800de9a:	b90b      	cbnz	r3, 800dea0 <__swsetup_r+0x14>
 800de9c:	f7fd ffb0 	bl	800be00 <__sinit>
 800dea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dea4:	0719      	lsls	r1, r3, #28
 800dea6:	d422      	bmi.n	800deee <__swsetup_r+0x62>
 800dea8:	06da      	lsls	r2, r3, #27
 800deaa:	d407      	bmi.n	800debc <__swsetup_r+0x30>
 800deac:	2209      	movs	r2, #9
 800deae:	602a      	str	r2, [r5, #0]
 800deb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800deb4:	81a3      	strh	r3, [r4, #12]
 800deb6:	f04f 30ff 	mov.w	r0, #4294967295
 800deba:	e033      	b.n	800df24 <__swsetup_r+0x98>
 800debc:	0758      	lsls	r0, r3, #29
 800debe:	d512      	bpl.n	800dee6 <__swsetup_r+0x5a>
 800dec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dec2:	b141      	cbz	r1, 800ded6 <__swsetup_r+0x4a>
 800dec4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dec8:	4299      	cmp	r1, r3
 800deca:	d002      	beq.n	800ded2 <__swsetup_r+0x46>
 800decc:	4628      	mov	r0, r5
 800dece:	f7fe feff 	bl	800ccd0 <_free_r>
 800ded2:	2300      	movs	r3, #0
 800ded4:	6363      	str	r3, [r4, #52]	@ 0x34
 800ded6:	89a3      	ldrh	r3, [r4, #12]
 800ded8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dedc:	81a3      	strh	r3, [r4, #12]
 800dede:	2300      	movs	r3, #0
 800dee0:	6063      	str	r3, [r4, #4]
 800dee2:	6923      	ldr	r3, [r4, #16]
 800dee4:	6023      	str	r3, [r4, #0]
 800dee6:	89a3      	ldrh	r3, [r4, #12]
 800dee8:	f043 0308 	orr.w	r3, r3, #8
 800deec:	81a3      	strh	r3, [r4, #12]
 800deee:	6923      	ldr	r3, [r4, #16]
 800def0:	b94b      	cbnz	r3, 800df06 <__swsetup_r+0x7a>
 800def2:	89a3      	ldrh	r3, [r4, #12]
 800def4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800def8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800defc:	d003      	beq.n	800df06 <__swsetup_r+0x7a>
 800defe:	4621      	mov	r1, r4
 800df00:	4628      	mov	r0, r5
 800df02:	f000 f883 	bl	800e00c <__smakebuf_r>
 800df06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df0a:	f013 0201 	ands.w	r2, r3, #1
 800df0e:	d00a      	beq.n	800df26 <__swsetup_r+0x9a>
 800df10:	2200      	movs	r2, #0
 800df12:	60a2      	str	r2, [r4, #8]
 800df14:	6962      	ldr	r2, [r4, #20]
 800df16:	4252      	negs	r2, r2
 800df18:	61a2      	str	r2, [r4, #24]
 800df1a:	6922      	ldr	r2, [r4, #16]
 800df1c:	b942      	cbnz	r2, 800df30 <__swsetup_r+0xa4>
 800df1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800df22:	d1c5      	bne.n	800deb0 <__swsetup_r+0x24>
 800df24:	bd38      	pop	{r3, r4, r5, pc}
 800df26:	0799      	lsls	r1, r3, #30
 800df28:	bf58      	it	pl
 800df2a:	6962      	ldrpl	r2, [r4, #20]
 800df2c:	60a2      	str	r2, [r4, #8]
 800df2e:	e7f4      	b.n	800df1a <__swsetup_r+0x8e>
 800df30:	2000      	movs	r0, #0
 800df32:	e7f7      	b.n	800df24 <__swsetup_r+0x98>
 800df34:	20000184 	.word	0x20000184

0800df38 <_raise_r>:
 800df38:	291f      	cmp	r1, #31
 800df3a:	b538      	push	{r3, r4, r5, lr}
 800df3c:	4605      	mov	r5, r0
 800df3e:	460c      	mov	r4, r1
 800df40:	d904      	bls.n	800df4c <_raise_r+0x14>
 800df42:	2316      	movs	r3, #22
 800df44:	6003      	str	r3, [r0, #0]
 800df46:	f04f 30ff 	mov.w	r0, #4294967295
 800df4a:	bd38      	pop	{r3, r4, r5, pc}
 800df4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800df4e:	b112      	cbz	r2, 800df56 <_raise_r+0x1e>
 800df50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df54:	b94b      	cbnz	r3, 800df6a <_raise_r+0x32>
 800df56:	4628      	mov	r0, r5
 800df58:	f000 f830 	bl	800dfbc <_getpid_r>
 800df5c:	4622      	mov	r2, r4
 800df5e:	4601      	mov	r1, r0
 800df60:	4628      	mov	r0, r5
 800df62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df66:	f000 b817 	b.w	800df98 <_kill_r>
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d00a      	beq.n	800df84 <_raise_r+0x4c>
 800df6e:	1c59      	adds	r1, r3, #1
 800df70:	d103      	bne.n	800df7a <_raise_r+0x42>
 800df72:	2316      	movs	r3, #22
 800df74:	6003      	str	r3, [r0, #0]
 800df76:	2001      	movs	r0, #1
 800df78:	e7e7      	b.n	800df4a <_raise_r+0x12>
 800df7a:	2100      	movs	r1, #0
 800df7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800df80:	4620      	mov	r0, r4
 800df82:	4798      	blx	r3
 800df84:	2000      	movs	r0, #0
 800df86:	e7e0      	b.n	800df4a <_raise_r+0x12>

0800df88 <raise>:
 800df88:	4b02      	ldr	r3, [pc, #8]	@ (800df94 <raise+0xc>)
 800df8a:	4601      	mov	r1, r0
 800df8c:	6818      	ldr	r0, [r3, #0]
 800df8e:	f7ff bfd3 	b.w	800df38 <_raise_r>
 800df92:	bf00      	nop
 800df94:	20000184 	.word	0x20000184

0800df98 <_kill_r>:
 800df98:	b538      	push	{r3, r4, r5, lr}
 800df9a:	4d07      	ldr	r5, [pc, #28]	@ (800dfb8 <_kill_r+0x20>)
 800df9c:	2300      	movs	r3, #0
 800df9e:	4604      	mov	r4, r0
 800dfa0:	4608      	mov	r0, r1
 800dfa2:	4611      	mov	r1, r2
 800dfa4:	602b      	str	r3, [r5, #0]
 800dfa6:	f7f3 f957 	bl	8001258 <_kill>
 800dfaa:	1c43      	adds	r3, r0, #1
 800dfac:	d102      	bne.n	800dfb4 <_kill_r+0x1c>
 800dfae:	682b      	ldr	r3, [r5, #0]
 800dfb0:	b103      	cbz	r3, 800dfb4 <_kill_r+0x1c>
 800dfb2:	6023      	str	r3, [r4, #0]
 800dfb4:	bd38      	pop	{r3, r4, r5, pc}
 800dfb6:	bf00      	nop
 800dfb8:	2000231c 	.word	0x2000231c

0800dfbc <_getpid_r>:
 800dfbc:	f7f3 b944 	b.w	8001248 <_getpid>

0800dfc0 <__swhatbuf_r>:
 800dfc0:	b570      	push	{r4, r5, r6, lr}
 800dfc2:	460c      	mov	r4, r1
 800dfc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfc8:	2900      	cmp	r1, #0
 800dfca:	b096      	sub	sp, #88	@ 0x58
 800dfcc:	4615      	mov	r5, r2
 800dfce:	461e      	mov	r6, r3
 800dfd0:	da0d      	bge.n	800dfee <__swhatbuf_r+0x2e>
 800dfd2:	89a3      	ldrh	r3, [r4, #12]
 800dfd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dfd8:	f04f 0100 	mov.w	r1, #0
 800dfdc:	bf14      	ite	ne
 800dfde:	2340      	movne	r3, #64	@ 0x40
 800dfe0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	6031      	str	r1, [r6, #0]
 800dfe8:	602b      	str	r3, [r5, #0]
 800dfea:	b016      	add	sp, #88	@ 0x58
 800dfec:	bd70      	pop	{r4, r5, r6, pc}
 800dfee:	466a      	mov	r2, sp
 800dff0:	f000 f848 	bl	800e084 <_fstat_r>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	dbec      	blt.n	800dfd2 <__swhatbuf_r+0x12>
 800dff8:	9901      	ldr	r1, [sp, #4]
 800dffa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dffe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e002:	4259      	negs	r1, r3
 800e004:	4159      	adcs	r1, r3
 800e006:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e00a:	e7eb      	b.n	800dfe4 <__swhatbuf_r+0x24>

0800e00c <__smakebuf_r>:
 800e00c:	898b      	ldrh	r3, [r1, #12]
 800e00e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e010:	079d      	lsls	r5, r3, #30
 800e012:	4606      	mov	r6, r0
 800e014:	460c      	mov	r4, r1
 800e016:	d507      	bpl.n	800e028 <__smakebuf_r+0x1c>
 800e018:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e01c:	6023      	str	r3, [r4, #0]
 800e01e:	6123      	str	r3, [r4, #16]
 800e020:	2301      	movs	r3, #1
 800e022:	6163      	str	r3, [r4, #20]
 800e024:	b003      	add	sp, #12
 800e026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e028:	ab01      	add	r3, sp, #4
 800e02a:	466a      	mov	r2, sp
 800e02c:	f7ff ffc8 	bl	800dfc0 <__swhatbuf_r>
 800e030:	9f00      	ldr	r7, [sp, #0]
 800e032:	4605      	mov	r5, r0
 800e034:	4639      	mov	r1, r7
 800e036:	4630      	mov	r0, r6
 800e038:	f7fe febe 	bl	800cdb8 <_malloc_r>
 800e03c:	b948      	cbnz	r0, 800e052 <__smakebuf_r+0x46>
 800e03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e042:	059a      	lsls	r2, r3, #22
 800e044:	d4ee      	bmi.n	800e024 <__smakebuf_r+0x18>
 800e046:	f023 0303 	bic.w	r3, r3, #3
 800e04a:	f043 0302 	orr.w	r3, r3, #2
 800e04e:	81a3      	strh	r3, [r4, #12]
 800e050:	e7e2      	b.n	800e018 <__smakebuf_r+0xc>
 800e052:	89a3      	ldrh	r3, [r4, #12]
 800e054:	6020      	str	r0, [r4, #0]
 800e056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e05a:	81a3      	strh	r3, [r4, #12]
 800e05c:	9b01      	ldr	r3, [sp, #4]
 800e05e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e062:	b15b      	cbz	r3, 800e07c <__smakebuf_r+0x70>
 800e064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e068:	4630      	mov	r0, r6
 800e06a:	f000 f81d 	bl	800e0a8 <_isatty_r>
 800e06e:	b128      	cbz	r0, 800e07c <__smakebuf_r+0x70>
 800e070:	89a3      	ldrh	r3, [r4, #12]
 800e072:	f023 0303 	bic.w	r3, r3, #3
 800e076:	f043 0301 	orr.w	r3, r3, #1
 800e07a:	81a3      	strh	r3, [r4, #12]
 800e07c:	89a3      	ldrh	r3, [r4, #12]
 800e07e:	431d      	orrs	r5, r3
 800e080:	81a5      	strh	r5, [r4, #12]
 800e082:	e7cf      	b.n	800e024 <__smakebuf_r+0x18>

0800e084 <_fstat_r>:
 800e084:	b538      	push	{r3, r4, r5, lr}
 800e086:	4d07      	ldr	r5, [pc, #28]	@ (800e0a4 <_fstat_r+0x20>)
 800e088:	2300      	movs	r3, #0
 800e08a:	4604      	mov	r4, r0
 800e08c:	4608      	mov	r0, r1
 800e08e:	4611      	mov	r1, r2
 800e090:	602b      	str	r3, [r5, #0]
 800e092:	f7f3 f941 	bl	8001318 <_fstat>
 800e096:	1c43      	adds	r3, r0, #1
 800e098:	d102      	bne.n	800e0a0 <_fstat_r+0x1c>
 800e09a:	682b      	ldr	r3, [r5, #0]
 800e09c:	b103      	cbz	r3, 800e0a0 <_fstat_r+0x1c>
 800e09e:	6023      	str	r3, [r4, #0]
 800e0a0:	bd38      	pop	{r3, r4, r5, pc}
 800e0a2:	bf00      	nop
 800e0a4:	2000231c 	.word	0x2000231c

0800e0a8 <_isatty_r>:
 800e0a8:	b538      	push	{r3, r4, r5, lr}
 800e0aa:	4d06      	ldr	r5, [pc, #24]	@ (800e0c4 <_isatty_r+0x1c>)
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	4608      	mov	r0, r1
 800e0b2:	602b      	str	r3, [r5, #0]
 800e0b4:	f7f3 f940 	bl	8001338 <_isatty>
 800e0b8:	1c43      	adds	r3, r0, #1
 800e0ba:	d102      	bne.n	800e0c2 <_isatty_r+0x1a>
 800e0bc:	682b      	ldr	r3, [r5, #0]
 800e0be:	b103      	cbz	r3, 800e0c2 <_isatty_r+0x1a>
 800e0c0:	6023      	str	r3, [r4, #0]
 800e0c2:	bd38      	pop	{r3, r4, r5, pc}
 800e0c4:	2000231c 	.word	0x2000231c

0800e0c8 <_init>:
 800e0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ca:	bf00      	nop
 800e0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0ce:	bc08      	pop	{r3}
 800e0d0:	469e      	mov	lr, r3
 800e0d2:	4770      	bx	lr

0800e0d4 <_fini>:
 800e0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0d6:	bf00      	nop
 800e0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0da:	bc08      	pop	{r3}
 800e0dc:	469e      	mov	lr, r3
 800e0de:	4770      	bx	lr
